#include <erl_nif.h>
#include "nif_utils.hpp"
using namespace evision::nif;
CV_ERL_TYPE(Algorithm, Algorithm, Ptr<cv::Algorithm>, Ptr, NoBase, 0, Algorithm);
CV_ERL_TYPE(AsyncArray, AsyncArray, Ptr<cv::AsyncArray>, Ptr, NoBase, ('asyncArray_AsyncArray', 'evision_cv_asyncArray_AsyncArray'), AsyncArray);
CV_ERL_TYPE(utils_nested_ExportClassName, utils_nested_OriginalClassName, Ptr<cv::utils::nested::OriginalClassName>, Ptr, NoBase, 0, Utils.Nested.OriginalClassName);
CV_ERL_TYPE(utils_nested_OriginalClassName_Params, utils_nested_OriginalClassName_Params, cv::utils::nested::OriginalClassName::Params, Params, NoBase, ('utils_nested_utils_nested_OriginalClassName_Params_OriginalClassName_Params', 'evision_cv_utils_nested_utils_nested_OriginalClassName_Params_OriginalClassName_Params'), Utils.Nested.OriginalClassName.Params);
CV_ERL_TYPE(cuda_GpuMat, cuda_GpuMat, Ptr<cv::cuda::GpuMat>, Ptr, NoBase, ('cuda_cuda_GpuMat_GpuMat', 'evision_cv_cuda_cuda_GpuMat_GpuMat'), CUDA.GpuMat);
CV_ERL_TYPE(cuda_GpuMat_Allocator, cuda_GpuMat_Allocator, Ptr<cv::cuda::GpuMat::Allocator>, Ptr, NoBase, 0, CUDA.GpuMat.Allocator);
CV_ERL_TYPE(cuda_GpuData, cuda_GpuData, Ptr<cv::cuda::GpuData>, Ptr, NoBase, 0, CUDA.GpuData);
CV_ERL_TYPE(cuda_GpuMatND, cuda_GpuMatND, Ptr<cv::cuda::GpuMatND>, Ptr, NoBase, 0, CUDA.GpuMatND);
CV_ERL_TYPE(cuda_BufferPool, cuda_BufferPool, Ptr<cv::cuda::BufferPool>, Ptr, NoBase, ('cuda_cuda_BufferPool_BufferPool', 'evision_cv_cuda_cuda_BufferPool_BufferPool'), CUDA.BufferPool);
CV_ERL_TYPE(cuda_HostMem, cuda_HostMem, Ptr<cv::cuda::HostMem>, Ptr, NoBase, ('cuda_cuda_HostMem_HostMem', 'evision_cv_cuda_cuda_HostMem_HostMem'), CUDA.HostMem);
CV_ERL_TYPE(cuda_Stream, cuda_Stream, Ptr<cv::cuda::Stream>, Ptr, NoBase, ('cuda_cuda_Stream_Stream', 'evision_cv_cuda_cuda_Stream_Stream'), CUDA.Stream);
CV_ERL_TYPE(cuda_Event, cuda_Event, Ptr<cv::cuda::Event>, Ptr, NoBase, ('cuda_cuda_Event_Event', 'evision_cv_cuda_cuda_Event_Event'), CUDA.Event);
CV_ERL_TYPE(cuda_TargetArchs, cuda_TargetArchs, Ptr<cv::cuda::TargetArchs>, Ptr, NoBase, 0, CUDA.TargetArchs);
CV_ERL_TYPE(cuda_DeviceInfo, cuda_DeviceInfo, Ptr<cv::cuda::DeviceInfo>, Ptr, NoBase, ('cuda_cuda_DeviceInfo_DeviceInfo', 'evision_cv_cuda_cuda_DeviceInfo_DeviceInfo'), CUDA.DeviceInfo);
CV_ERL_TYPE(ocl_Device, ocl_Device, cv::ocl::Device, Device, NoBase, ('ocl_ocl_Device_Device', 'evision_cv_ocl_ocl_Device_Device'), OCL.Device);
CV_ERL_TYPE(ocl_OpenCLExecutionContext, ocl_OpenCLExecutionContext, Ptr<cv::ocl::OpenCLExecutionContext>, Ptr, NoBase, 0, OCL.OpenCLExecutionContext);
CV_ERL_TYPE(FileStorage, FileStorage, Ptr<cv::FileStorage>, Ptr, NoBase, ('fileStorage_FileStorage', 'evision_cv_fileStorage_FileStorage'), FileStorage);
CV_ERL_TYPE(FileNode, FileNode, cv::FileNode, FileNode, NoBase, ('fileNode_FileNode', 'evision_cv_fileNode_FileNode'), FileNode);
CV_ERL_TYPE(KeyPoint, KeyPoint, cv::KeyPoint, KeyPoint, NoBase, ('keyPoint_KeyPoint', 'evision_cv_keyPoint_KeyPoint'), KeyPoint);
CV_ERL_TYPE(DMatch, DMatch, cv::DMatch, DMatch, NoBase, ('dMatch_DMatch', 'evision_cv_dMatch_DMatch'), DMatch);
CV_ERL_TYPE(TickMeter, TickMeter, Ptr<cv::TickMeter>, Ptr, NoBase, ('tickMeter_TickMeter', 'evision_cv_tickMeter_TickMeter'), TickMeter);
CV_ERL_TYPE(UMat, UMat, Ptr<cv::UMat>, Ptr, NoBase, ('uMat_UMat', 'evision_cv_uMat_UMat'), UMat);
CV_ERL_TYPE(flann_Index, flann_Index, Ptr<cv::flann::Index>, Ptr, NoBase, ('flann_flann_Index_Index', 'evision_cv_flann_flann_Index_Index'), Flann.Index);
CV_ERL_TYPE(GeneralizedHough, GeneralizedHough, Ptr<cv::GeneralizedHough>, Ptr, Algorithm, 0, GeneralizedHough);
CV_ERL_TYPE(GeneralizedHoughBallard, GeneralizedHoughBallard, Ptr<cv::GeneralizedHoughBallard>, Ptr, GeneralizedHough, 0, GeneralizedHoughBallard);
CV_ERL_TYPE(GeneralizedHoughGuil, GeneralizedHoughGuil, Ptr<cv::GeneralizedHoughGuil>, Ptr, GeneralizedHough, 0, GeneralizedHoughGuil);
CV_ERL_TYPE(CLAHE, CLAHE, Ptr<cv::CLAHE>, Ptr, Algorithm, 0, CLAHE);
CV_ERL_TYPE(Subdiv2D, Subdiv2D, Ptr<cv::Subdiv2D>, Ptr, NoBase, ('subdiv2D_Subdiv2D', 'evision_cv_subdiv2D_Subdiv2D'), Subdiv2D);
CV_ERL_TYPE(LineSegmentDetector, LineSegmentDetector, Ptr<cv::LineSegmentDetector>, Ptr, Algorithm, 0, LineSegmentDetector);
CV_ERL_TYPE(segmentation_IntelligentScissorsMB, segmentation_IntelligentScissorsMB, cv::segmentation::IntelligentScissorsMB, IntelligentScissorsMB, NoBase, ('segmentation_segmentation_IntelligentScissorsMB_IntelligentScissorsMB', 'evision_cv_segmentation_segmentation_IntelligentScissorsMB_IntelligentScissorsMB'), Segmentation.IntelligentScissorsMB);
CV_ERL_TYPE(ml_ParamGrid, ml_ParamGrid, Ptr<cv::ml::ParamGrid>, Ptr, NoBase, 0, ML.ParamGrid);
CV_ERL_TYPE(ml_TrainData, ml_TrainData, Ptr<cv::ml::TrainData>, Ptr, NoBase, 0, ML.TrainData);
CV_ERL_TYPE(ml_StatModel, ml_StatModel, Ptr<cv::ml::StatModel>, Ptr, Algorithm, 0, ML.StatModel);
CV_ERL_TYPE(ml_NormalBayesClassifier, ml_NormalBayesClassifier, Ptr<cv::ml::NormalBayesClassifier>, Ptr, ml_StatModel, 0, ML.NormalBayesClassifier);
CV_ERL_TYPE(ml_KNearest, ml_KNearest, Ptr<cv::ml::KNearest>, Ptr, ml_StatModel, 0, ML.KNearest);
CV_ERL_TYPE(ml_SVM, ml_SVM, Ptr<cv::ml::SVM>, Ptr, ml_StatModel, 0, ML.SVM);
CV_ERL_TYPE(ml_EM, ml_EM, Ptr<cv::ml::EM>, Ptr, ml_StatModel, 0, ML.EM);
CV_ERL_TYPE(ml_DTrees, ml_DTrees, Ptr<cv::ml::DTrees>, Ptr, ml_StatModel, 0, ML.DTrees);
CV_ERL_TYPE(ml_RTrees, ml_RTrees, Ptr<cv::ml::RTrees>, Ptr, ml_DTrees, 0, ML.RTrees);
CV_ERL_TYPE(ml_Boost, ml_Boost, Ptr<cv::ml::Boost>, Ptr, ml_DTrees, 0, ML.Boost);
CV_ERL_TYPE(ml_ANN_MLP, ml_ANN_MLP, Ptr<cv::ml::ANN_MLP>, Ptr, ml_StatModel, 0, ML.ANNMLP);
CV_ERL_TYPE(ml_LogisticRegression, ml_LogisticRegression, Ptr<cv::ml::LogisticRegression>, Ptr, ml_StatModel, 0, ML.LogisticRegression);
CV_ERL_TYPE(ml_SVMSGD, ml_SVMSGD, Ptr<cv::ml::SVMSGD>, Ptr, ml_StatModel, 0, ML.SVMSGD);
CV_ERL_TYPE(Tonemap, Tonemap, Ptr<cv::Tonemap>, Ptr, Algorithm, 0, Tonemap);
CV_ERL_TYPE(TonemapDrago, TonemapDrago, Ptr<cv::TonemapDrago>, Ptr, Tonemap, 0, TonemapDrago);
CV_ERL_TYPE(TonemapReinhard, TonemapReinhard, Ptr<cv::TonemapReinhard>, Ptr, Tonemap, 0, TonemapReinhard);
CV_ERL_TYPE(TonemapMantiuk, TonemapMantiuk, Ptr<cv::TonemapMantiuk>, Ptr, Tonemap, 0, TonemapMantiuk);
CV_ERL_TYPE(AlignExposures, AlignExposures, Ptr<cv::AlignExposures>, Ptr, Algorithm, 0, AlignExposures);
CV_ERL_TYPE(AlignMTB, AlignMTB, Ptr<cv::AlignMTB>, Ptr, AlignExposures, 0, AlignMTB);
CV_ERL_TYPE(CalibrateCRF, CalibrateCRF, Ptr<cv::CalibrateCRF>, Ptr, Algorithm, 0, CalibrateCRF);
CV_ERL_TYPE(CalibrateDebevec, CalibrateDebevec, Ptr<cv::CalibrateDebevec>, Ptr, CalibrateCRF, 0, CalibrateDebevec);
CV_ERL_TYPE(CalibrateRobertson, CalibrateRobertson, Ptr<cv::CalibrateRobertson>, Ptr, CalibrateCRF, 0, CalibrateRobertson);
CV_ERL_TYPE(MergeExposures, MergeExposures, Ptr<cv::MergeExposures>, Ptr, Algorithm, 0, MergeExposures);
CV_ERL_TYPE(MergeDebevec, MergeDebevec, Ptr<cv::MergeDebevec>, Ptr, MergeExposures, 0, MergeDebevec);
CV_ERL_TYPE(MergeMertens, MergeMertens, Ptr<cv::MergeMertens>, Ptr, MergeExposures, 0, MergeMertens);
CV_ERL_TYPE(MergeRobertson, MergeRobertson, Ptr<cv::MergeRobertson>, Ptr, MergeExposures, 0, MergeRobertson);
CV_ERL_TYPE(dnn_DictValue, dnn_DictValue, Ptr<cv::dnn::DictValue>, Ptr, NoBase, ('dnn_dnn_DictValue_DictValue', 'evision_cv_dnn_dnn_DictValue_DictValue'), DNN.DictValue);
CV_ERL_TYPE(dnn_Layer, dnn_Layer, Ptr<cv::dnn::Layer>, Ptr, Algorithm, 0, DNN.Layer);
CV_ERL_TYPE(dnn_Net, dnn_Net, cv::dnn::Net, Net, NoBase, ('dnn_dnn_Net_Net', 'evision_cv_dnn_dnn_Net_Net'), DNN.Net);
CV_ERL_TYPE(dnn_Model, dnn_Model, cv::dnn::Model, Model, NoBase, ('dnn_dnn_Model_Model', 'evision_cv_dnn_dnn_Model_Model'), DNN.Model);
CV_ERL_TYPE(dnn_ClassificationModel, dnn_ClassificationModel, cv::dnn::ClassificationModel, ClassificationModel, dnn_Model, ('dnn_dnn_ClassificationModel_ClassificationModel', 'evision_cv_dnn_dnn_ClassificationModel_ClassificationModel'), DNN.ClassificationModel);
CV_ERL_TYPE(dnn_KeypointsModel, dnn_KeypointsModel, cv::dnn::KeypointsModel, KeypointsModel, dnn_Model, ('dnn_dnn_KeypointsModel_KeypointsModel', 'evision_cv_dnn_dnn_KeypointsModel_KeypointsModel'), DNN.KeypointsModel);
CV_ERL_TYPE(dnn_SegmentationModel, dnn_SegmentationModel, cv::dnn::SegmentationModel, SegmentationModel, dnn_Model, ('dnn_dnn_SegmentationModel_SegmentationModel', 'evision_cv_dnn_dnn_SegmentationModel_SegmentationModel'), DNN.SegmentationModel);
CV_ERL_TYPE(dnn_DetectionModel, dnn_DetectionModel, cv::dnn::DetectionModel, DetectionModel, dnn_Model, ('dnn_dnn_DetectionModel_DetectionModel', 'evision_cv_dnn_dnn_DetectionModel_DetectionModel'), DNN.DetectionModel);
CV_ERL_TYPE(dnn_TextRecognitionModel, dnn_TextRecognitionModel, cv::dnn::TextRecognitionModel, TextRecognitionModel, dnn_Model, ('dnn_dnn_TextRecognitionModel_TextRecognitionModel', 'evision_cv_dnn_dnn_TextRecognitionModel_TextRecognitionModel'), DNN.TextRecognitionModel);
CV_ERL_TYPE(dnn_TextDetectionModel, dnn_TextDetectionModel, cv::dnn::TextDetectionModel, TextDetectionModel, dnn_Model, 0, DNN.TextDetectionModel);
CV_ERL_TYPE(dnn_TextDetectionModel_EAST, dnn_TextDetectionModel_EAST, cv::dnn::TextDetectionModel_EAST, TextDetectionModel_EAST, dnn_TextDetectionModel, ('dnn_dnn_TextDetectionModel_EAST_TextDetectionModel_EAST', 'evision_cv_dnn_dnn_TextDetectionModel_EAST_TextDetectionModel_EAST'), DNN.TextDetectionModelEAST);
CV_ERL_TYPE(dnn_TextDetectionModel_DB, dnn_TextDetectionModel_DB, cv::dnn::TextDetectionModel_DB, TextDetectionModel_DB, dnn_TextDetectionModel, ('dnn_dnn_TextDetectionModel_DB_TextDetectionModel_DB', 'evision_cv_dnn_dnn_TextDetectionModel_DB_TextDetectionModel_DB'), DNN.TextDetectionModelDB);
CV_ERL_TYPE(Feature2D, Feature2D, Ptr<cv::Feature2D>, Ptr, NoBase, 0, Feature2D);
CV_ERL_TYPE(AffineFeature, AffineFeature, Ptr<cv::AffineFeature>, Ptr, Feature2D, 0, AffineFeature);
CV_ERL_TYPE(SIFT, SIFT, Ptr<cv::SIFT>, Ptr, Feature2D, 0, SIFT);
CV_ERL_TYPE(BRISK, BRISK, Ptr<cv::BRISK>, Ptr, Feature2D, 0, BRISK);
CV_ERL_TYPE(ORB, ORB, Ptr<cv::ORB>, Ptr, Feature2D, 0, ORB);
CV_ERL_TYPE(MSER, MSER, Ptr<cv::MSER>, Ptr, Feature2D, 0, MSER);
CV_ERL_TYPE(FastFeatureDetector, FastFeatureDetector, Ptr<cv::FastFeatureDetector>, Ptr, Feature2D, 0, FastFeatureDetector);
CV_ERL_TYPE(AgastFeatureDetector, AgastFeatureDetector, Ptr<cv::AgastFeatureDetector>, Ptr, Feature2D, 0, AgastFeatureDetector);
CV_ERL_TYPE(GFTTDetector, GFTTDetector, Ptr<cv::GFTTDetector>, Ptr, Feature2D, 0, GFTTDetector);
CV_ERL_TYPE(SimpleBlobDetector, SimpleBlobDetector, Ptr<cv::SimpleBlobDetector>, Ptr, Feature2D, 0, SimpleBlobDetector);
CV_ERL_TYPE(SimpleBlobDetector_Params, SimpleBlobDetector_Params, cv::SimpleBlobDetector::Params, Params, NoBase, ('simpleBlobDetector_Params_SimpleBlobDetector_Params', 'evision_cv_simpleBlobDetector_Params_SimpleBlobDetector_Params'), SimpleBlobDetector.Params);
CV_ERL_TYPE(KAZE, KAZE, Ptr<cv::KAZE>, Ptr, Feature2D, 0, KAZE);
CV_ERL_TYPE(AKAZE, AKAZE, Ptr<cv::AKAZE>, Ptr, Feature2D, 0, AKAZE);
CV_ERL_TYPE(DescriptorMatcher, DescriptorMatcher, Ptr<cv::DescriptorMatcher>, Ptr, Algorithm, 0, DescriptorMatcher);
CV_ERL_TYPE(BFMatcher, BFMatcher, Ptr<cv::BFMatcher>, Ptr, DescriptorMatcher, ('bfMatcher_BFMatcher', 'evision_cv_bfMatcher_BFMatcher'), BFMatcher);
CV_ERL_TYPE(FlannBasedMatcher, FlannBasedMatcher, Ptr<cv::FlannBasedMatcher>, Ptr, DescriptorMatcher, ('flannBasedMatcher_FlannBasedMatcher', 'evision_cv_flannBasedMatcher_FlannBasedMatcher'), FlannBasedMatcher);
CV_ERL_TYPE(BOWTrainer, BOWTrainer, Ptr<cv::BOWTrainer>, Ptr, NoBase, 0, BOWTrainer);
CV_ERL_TYPE(BOWKMeansTrainer, BOWKMeansTrainer, Ptr<cv::BOWKMeansTrainer>, Ptr, BOWTrainer, ('bowKMeansTrainer_BOWKMeansTrainer', 'evision_cv_bowKMeansTrainer_BOWKMeansTrainer'), BOWKMeansTrainer);
CV_ERL_TYPE(BOWImgDescriptorExtractor, BOWImgDescriptorExtractor, Ptr<cv::BOWImgDescriptorExtractor>, Ptr, NoBase, ('bowImgDescriptorExtractor_BOWImgDescriptorExtractor', 'evision_cv_bowImgDescriptorExtractor_BOWImgDescriptorExtractor'), BOWImgDescriptorExtractor);
CV_ERL_TYPE(VideoCapture, VideoCapture, Ptr<cv::VideoCapture>, Ptr, NoBase, ('videoCapture_VideoCapture', 'evision_cv_videoCapture_VideoCapture'), VideoCapture);
CV_ERL_TYPE(VideoWriter, VideoWriter, Ptr<cv::VideoWriter>, Ptr, NoBase, ('videoWriter_VideoWriter', 'evision_cv_videoWriter_VideoWriter'), VideoWriter);
CV_ERL_TYPE(UsacParams, UsacParams, cv::UsacParams, UsacParams, NoBase, ('usacParams_UsacParams', 'evision_cv_usacParams_UsacParams'), UsacParams);
CV_ERL_TYPE(CirclesGridFinderParameters, CirclesGridFinderParameters, cv::CirclesGridFinderParameters, CirclesGridFinderParameters, NoBase, ('circlesGridFinderParameters_CirclesGridFinderParameters', 'evision_cv_circlesGridFinderParameters_CirclesGridFinderParameters'), CirclesGridFinderParameters);
CV_ERL_TYPE(StereoMatcher, StereoMatcher, Ptr<cv::StereoMatcher>, Ptr, Algorithm, 0, StereoMatcher);
CV_ERL_TYPE(StereoBM, StereoBM, Ptr<cv::StereoBM>, Ptr, StereoMatcher, 0, StereoBM);
CV_ERL_TYPE(StereoSGBM, StereoSGBM, Ptr<cv::StereoSGBM>, Ptr, StereoMatcher, 0, StereoSGBM);
CV_ERL_TYPE(BaseCascadeClassifier, BaseCascadeClassifier, Ptr<cv::BaseCascadeClassifier>, Ptr, Algorithm, 0, BaseCascadeClassifier);
CV_ERL_TYPE(CascadeClassifier, CascadeClassifier, Ptr<cv::CascadeClassifier>, Ptr, NoBase, ('cascadeClassifier_CascadeClassifier', 'evision_cv_cascadeClassifier_CascadeClassifier'), CascadeClassifier);
CV_ERL_TYPE(HOGDescriptor, HOGDescriptor, Ptr<cv::HOGDescriptor>, Ptr, NoBase, ('hogDescriptor_HOGDescriptor', 'evision_cv_hogDescriptor_HOGDescriptor'), HOGDescriptor);
CV_ERL_TYPE(QRCodeEncoder, QRCodeEncoder, Ptr<cv::QRCodeEncoder>, Ptr, NoBase, 0, QRCodeEncoder);
CV_ERL_TYPE(QRCodeEncoder_Params, QRCodeEncoder_Params, cv::QRCodeEncoder::Params, Params, NoBase, ('qrCodeEncoder_Params_QRCodeEncoder_Params', 'evision_cv_qrCodeEncoder_Params_QRCodeEncoder_Params'), QRCodeEncoder.Params);
CV_ERL_TYPE(QRCodeDetector, QRCodeDetector, Ptr<cv::QRCodeDetector>, Ptr, NoBase, ('qrCodeDetector_QRCodeDetector', 'evision_cv_qrCodeDetector_QRCodeDetector'), QRCodeDetector);
CV_ERL_TYPE(FaceDetectorYN, FaceDetectorYN, Ptr<cv::FaceDetectorYN>, Ptr, NoBase, 0, FaceDetectorYN);
CV_ERL_TYPE(FaceRecognizerSF, FaceRecognizerSF, Ptr<cv::FaceRecognizerSF>, Ptr, NoBase, 0, FaceRecognizerSF);
CV_ERL_TYPE(Stitcher, Stitcher, Ptr<cv::Stitcher>, Ptr, NoBase, 0, Stitcher);
CV_ERL_TYPE(detail_Blender, detail_Blender, Ptr<cv::detail::Blender>, Ptr, NoBase, 0, Detail.Blender);
CV_ERL_TYPE(detail_FeatherBlender, detail_FeatherBlender, Ptr<cv::detail::FeatherBlender>, Ptr, detail_Blender, ('detail_detail_FeatherBlender_FeatherBlender', 'evision_cv_detail_detail_FeatherBlender_FeatherBlender'), Detail.FeatherBlender);
CV_ERL_TYPE(detail_MultiBandBlender, detail_MultiBandBlender, Ptr<cv::detail::MultiBandBlender>, Ptr, detail_Blender, ('detail_detail_MultiBandBlender_MultiBandBlender', 'evision_cv_detail_detail_MultiBandBlender_MultiBandBlender'), Detail.MultiBandBlender);
CV_ERL_TYPE(detail_CameraParams, detail_CameraParams, cv::detail::CameraParams, CameraParams, NoBase, 0, Detail.CameraParams);
CV_ERL_TYPE(detail_ExposureCompensator, detail_ExposureCompensator, Ptr<cv::detail::ExposureCompensator>, Ptr, NoBase, 0, Detail.ExposureCompensator);
CV_ERL_TYPE(detail_NoExposureCompensator, detail_NoExposureCompensator, Ptr<cv::detail::NoExposureCompensator>, Ptr, detail_ExposureCompensator, 0, Detail.NoExposureCompensator);
CV_ERL_TYPE(detail_GainCompensator, detail_GainCompensator, Ptr<cv::detail::GainCompensator>, Ptr, detail_ExposureCompensator, ('detail_detail_GainCompensator_GainCompensator', 'evision_cv_detail_detail_GainCompensator_GainCompensator'), Detail.GainCompensator);
CV_ERL_TYPE(detail_ChannelsCompensator, detail_ChannelsCompensator, Ptr<cv::detail::ChannelsCompensator>, Ptr, detail_ExposureCompensator, ('detail_detail_ChannelsCompensator_ChannelsCompensator', 'evision_cv_detail_detail_ChannelsCompensator_ChannelsCompensator'), Detail.ChannelsCompensator);
CV_ERL_TYPE(detail_BlocksCompensator, detail_BlocksCompensator, Ptr<cv::detail::BlocksCompensator>, Ptr, detail_ExposureCompensator, 0, Detail.BlocksCompensator);
CV_ERL_TYPE(detail_BlocksGainCompensator, detail_BlocksGainCompensator, Ptr<cv::detail::BlocksGainCompensator>, Ptr, detail_BlocksCompensator, ('detail_detail_BlocksGainCompensator_BlocksGainCompensator', 'evision_cv_detail_detail_BlocksGainCompensator_BlocksGainCompensator'), Detail.BlocksGainCompensator);
CV_ERL_TYPE(detail_BlocksChannelsCompensator, detail_BlocksChannelsCompensator, Ptr<cv::detail::BlocksChannelsCompensator>, Ptr, detail_BlocksCompensator, ('detail_detail_BlocksChannelsCompensator_BlocksChannelsCompensator', 'evision_cv_detail_detail_BlocksChannelsCompensator_BlocksChannelsCompensator'), Detail.BlocksChannelsCompensator);
CV_ERL_TYPE(detail_ImageFeatures, detail_ImageFeatures, cv::detail::ImageFeatures, ImageFeatures, NoBase, 0, Detail.ImageFeatures);
CV_ERL_TYPE(detail_MatchesInfo, detail_MatchesInfo, cv::detail::MatchesInfo, MatchesInfo, NoBase, 0, Detail.MatchesInfo);
CV_ERL_TYPE(detail_FeaturesMatcher, detail_FeaturesMatcher, Ptr<cv::detail::FeaturesMatcher>, Ptr, NoBase, 0, Detail.FeaturesMatcher);
CV_ERL_TYPE(detail_BestOf2NearestMatcher, detail_BestOf2NearestMatcher, Ptr<cv::detail::BestOf2NearestMatcher>, Ptr, detail_FeaturesMatcher, ('detail_detail_BestOf2NearestMatcher_BestOf2NearestMatcher', 'evision_cv_detail_detail_BestOf2NearestMatcher_BestOf2NearestMatcher'), Detail.BestOf2NearestMatcher);
CV_ERL_TYPE(detail_BestOf2NearestRangeMatcher, detail_BestOf2NearestRangeMatcher, Ptr<cv::detail::BestOf2NearestRangeMatcher>, Ptr, detail_BestOf2NearestMatcher, ('detail_detail_BestOf2NearestRangeMatcher_BestOf2NearestRangeMatcher', 'evision_cv_detail_detail_BestOf2NearestRangeMatcher_BestOf2NearestRangeMatcher'), Detail.BestOf2NearestRangeMatcher);
CV_ERL_TYPE(detail_AffineBestOf2NearestMatcher, detail_AffineBestOf2NearestMatcher, Ptr<cv::detail::AffineBestOf2NearestMatcher>, Ptr, detail_BestOf2NearestMatcher, ('detail_detail_AffineBestOf2NearestMatcher_AffineBestOf2NearestMatcher', 'evision_cv_detail_detail_AffineBestOf2NearestMatcher_AffineBestOf2NearestMatcher'), Detail.AffineBestOf2NearestMatcher);
CV_ERL_TYPE(detail_Estimator, detail_Estimator, Ptr<cv::detail::Estimator>, Ptr, NoBase, 0, Detail.Estimator);
CV_ERL_TYPE(detail_HomographyBasedEstimator, detail_HomographyBasedEstimator, Ptr<cv::detail::HomographyBasedEstimator>, Ptr, detail_Estimator, ('detail_detail_HomographyBasedEstimator_HomographyBasedEstimator', 'evision_cv_detail_detail_HomographyBasedEstimator_HomographyBasedEstimator'), Detail.HomographyBasedEstimator);
CV_ERL_TYPE(detail_AffineBasedEstimator, detail_AffineBasedEstimator, Ptr<cv::detail::AffineBasedEstimator>, Ptr, detail_Estimator, ('detail_detail_AffineBasedEstimator_AffineBasedEstimator', 'evision_cv_detail_detail_AffineBasedEstimator_AffineBasedEstimator'), Detail.AffineBasedEstimator);
CV_ERL_TYPE(detail_BundleAdjusterBase, detail_BundleAdjusterBase, Ptr<cv::detail::BundleAdjusterBase>, Ptr, detail_Estimator, 0, Detail.BundleAdjusterBase);
CV_ERL_TYPE(detail_NoBundleAdjuster, detail_NoBundleAdjuster, Ptr<cv::detail::NoBundleAdjuster>, Ptr, detail_BundleAdjusterBase, ('detail_detail_NoBundleAdjuster_NoBundleAdjuster', 'evision_cv_detail_detail_NoBundleAdjuster_NoBundleAdjuster'), Detail.NoBundleAdjuster);
CV_ERL_TYPE(detail_BundleAdjusterReproj, detail_BundleAdjusterReproj, Ptr<cv::detail::BundleAdjusterReproj>, Ptr, detail_BundleAdjusterBase, ('detail_detail_BundleAdjusterReproj_BundleAdjusterReproj', 'evision_cv_detail_detail_BundleAdjusterReproj_BundleAdjusterReproj'), Detail.BundleAdjusterReproj);
CV_ERL_TYPE(detail_BundleAdjusterRay, detail_BundleAdjusterRay, Ptr<cv::detail::BundleAdjusterRay>, Ptr, detail_BundleAdjusterBase, ('detail_detail_BundleAdjusterRay_BundleAdjusterRay', 'evision_cv_detail_detail_BundleAdjusterRay_BundleAdjusterRay'), Detail.BundleAdjusterRay);
CV_ERL_TYPE(detail_BundleAdjusterAffine, detail_BundleAdjusterAffine, Ptr<cv::detail::BundleAdjusterAffine>, Ptr, detail_BundleAdjusterBase, ('detail_detail_BundleAdjusterAffine_BundleAdjusterAffine', 'evision_cv_detail_detail_BundleAdjusterAffine_BundleAdjusterAffine'), Detail.BundleAdjusterAffine);
CV_ERL_TYPE(detail_BundleAdjusterAffinePartial, detail_BundleAdjusterAffinePartial, Ptr<cv::detail::BundleAdjusterAffinePartial>, Ptr, detail_BundleAdjusterBase, ('detail_detail_BundleAdjusterAffinePartial_BundleAdjusterAffinePartial', 'evision_cv_detail_detail_BundleAdjusterAffinePartial_BundleAdjusterAffinePartial'), Detail.BundleAdjusterAffinePartial);
CV_ERL_TYPE(detail_SeamFinder, detail_SeamFinder, Ptr<cv::detail::SeamFinder>, Ptr, NoBase, 0, Detail.SeamFinder);
CV_ERL_TYPE(detail_NoSeamFinder, detail_NoSeamFinder, Ptr<cv::detail::NoSeamFinder>, Ptr, detail_SeamFinder, 0, Detail.NoSeamFinder);
CV_ERL_TYPE(detail_PairwiseSeamFinder, detail_PairwiseSeamFinder, Ptr<cv::detail::PairwiseSeamFinder>, Ptr, detail_SeamFinder, 0, Detail.PairwiseSeamFinder);
CV_ERL_TYPE(detail_VoronoiSeamFinder, detail_VoronoiSeamFinder, Ptr<cv::detail::VoronoiSeamFinder>, Ptr, detail_PairwiseSeamFinder, 0, Detail.VoronoiSeamFinder);
CV_ERL_TYPE(detail_DpSeamFinder, detail_DpSeamFinder, Ptr<cv::detail::DpSeamFinder>, Ptr, detail_SeamFinder, ('detail_detail_DpSeamFinder_DpSeamFinder', 'evision_cv_detail_detail_DpSeamFinder_DpSeamFinder'), Detail.DpSeamFinder);
CV_ERL_TYPE(detail_GraphCutSeamFinder, detail_GraphCutSeamFinder, Ptr<cv::detail::GraphCutSeamFinder>, Ptr, NoBase, ('detail_detail_GraphCutSeamFinder_GraphCutSeamFinder', 'evision_cv_detail_detail_GraphCutSeamFinder_GraphCutSeamFinder'), Detail.GraphCutSeamFinder);
CV_ERL_TYPE(detail_Timelapser, detail_Timelapser, Ptr<cv::detail::Timelapser>, Ptr, NoBase, 0, Detail.Timelapser);
CV_ERL_TYPE(detail_TimelapserCrop, detail_TimelapserCrop, Ptr<cv::detail::TimelapserCrop>, Ptr, detail_Timelapser, 0, Detail.TimelapserCrop);
CV_ERL_TYPE(detail_ProjectorBase, detail_ProjectorBase, cv::detail::ProjectorBase, ProjectorBase, NoBase, 0, Detail.ProjectorBase);
CV_ERL_TYPE(detail_SphericalProjector, detail_SphericalProjector, cv::detail::SphericalProjector, SphericalProjector, detail_ProjectorBase, 0, Detail.SphericalProjector);
CV_ERL_TYPE(PyRotationWarper, PyRotationWarper, Ptr<cv::PyRotationWarper>, Ptr, NoBase, ('pyRotationWarper_PyRotationWarper', 'evision_cv_pyRotationWarper_PyRotationWarper'), PyRotationWarper);
CV_ERL_TYPE(WarperCreator, WarperCreator, Ptr<cv::WarperCreator>, Ptr, NoBase, 0, WarperCreator);
CV_ERL_TYPE(BackgroundSubtractor, BackgroundSubtractor, Ptr<cv::BackgroundSubtractor>, Ptr, Algorithm, 0, BackgroundSubtractor);
CV_ERL_TYPE(BackgroundSubtractorMOG2, BackgroundSubtractorMOG2, Ptr<cv::BackgroundSubtractorMOG2>, Ptr, BackgroundSubtractor, 0, BackgroundSubtractorMOG2);
CV_ERL_TYPE(BackgroundSubtractorKNN, BackgroundSubtractorKNN, Ptr<cv::BackgroundSubtractorKNN>, Ptr, BackgroundSubtractor, 0, BackgroundSubtractorKNN);
CV_ERL_TYPE(KalmanFilter, KalmanFilter, Ptr<cv::KalmanFilter>, Ptr, NoBase, ('kalmanFilter_KalmanFilter', 'evision_cv_kalmanFilter_KalmanFilter'), KalmanFilter);
CV_ERL_TYPE(DenseOpticalFlow, DenseOpticalFlow, Ptr<cv::DenseOpticalFlow>, Ptr, Algorithm, 0, DenseOpticalFlow);
CV_ERL_TYPE(SparseOpticalFlow, SparseOpticalFlow, Ptr<cv::SparseOpticalFlow>, Ptr, Algorithm, 0, SparseOpticalFlow);
CV_ERL_TYPE(FarnebackOpticalFlow, FarnebackOpticalFlow, Ptr<cv::FarnebackOpticalFlow>, Ptr, DenseOpticalFlow, 0, FarnebackOpticalFlow);
CV_ERL_TYPE(VariationalRefinement, VariationalRefinement, Ptr<cv::VariationalRefinement>, Ptr, DenseOpticalFlow, 0, VariationalRefinement);
CV_ERL_TYPE(DISOpticalFlow, DISOpticalFlow, Ptr<cv::DISOpticalFlow>, Ptr, DenseOpticalFlow, 0, DISOpticalFlow);
CV_ERL_TYPE(SparsePyrLKOpticalFlow, SparsePyrLKOpticalFlow, Ptr<cv::SparsePyrLKOpticalFlow>, Ptr, SparseOpticalFlow, 0, SparsePyrLKOpticalFlow);
CV_ERL_TYPE(Tracker, Tracker, Ptr<cv::Tracker>, Ptr, NoBase, 0, Tracker);
CV_ERL_TYPE(TrackerMIL, TrackerMIL, Ptr<cv::TrackerMIL>, Ptr, Tracker, 0, TrackerMIL);
CV_ERL_TYPE(TrackerMIL_Params, TrackerMIL_Params, cv::TrackerMIL::Params, Params, NoBase, ('trackerMIL_Params_TrackerMIL_Params', 'evision_cv_trackerMIL_Params_TrackerMIL_Params'), TrackerMIL.Params);
CV_ERL_TYPE(TrackerGOTURN, TrackerGOTURN, Ptr<cv::TrackerGOTURN>, Ptr, Tracker, 0, TrackerGOTURN);
CV_ERL_TYPE(TrackerGOTURN_Params, TrackerGOTURN_Params, cv::TrackerGOTURN::Params, Params, NoBase, ('trackerGOTURN_Params_TrackerGOTURN_Params', 'evision_cv_trackerGOTURN_Params_TrackerGOTURN_Params'), TrackerGOTURN.Params);
CV_ERL_TYPE(TrackerDaSiamRPN, TrackerDaSiamRPN, Ptr<cv::TrackerDaSiamRPN>, Ptr, Tracker, 0, TrackerDaSiamRPN);
CV_ERL_TYPE(TrackerDaSiamRPN_Params, TrackerDaSiamRPN_Params, cv::TrackerDaSiamRPN::Params, Params, NoBase, ('trackerDaSiamRPN_Params_TrackerDaSiamRPN_Params', 'evision_cv_trackerDaSiamRPN_Params_TrackerDaSiamRPN_Params'), TrackerDaSiamRPN.Params);
