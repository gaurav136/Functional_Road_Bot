#include <erl_nif.h>
#include "nif_utils.hpp"
using namespace evision::nif;
static ERL_NIF_TERM evision_cv_akaze_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::underlying_type_t<AKAZE_DescriptorType> descriptor_type=static_cast<std::underlying_type_t<AKAZE_DescriptorType>>(AKAZE::DESCRIPTOR_MLDB);
    int descriptor_size=0;
    int descriptor_channels=3;
    float threshold=0.001f;
    int nOctaves=4;
    int nOctaveLayers=4;
    std::underlying_type_t<KAZE_DiffusivityType> diffusivity=static_cast<std::underlying_type_t<KAZE_DiffusivityType>>(KAZE::DIFF_PM_G2);
    Ptr<AKAZE> retval;

    // const char* keywords[] = { "descriptor_type", "descriptor_size", "descriptor_channels", "threshold", "nOctaves", "nOctaveLayers", "diffusivity", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "descriptor_type"), descriptor_type, ArgInfo("descriptor_type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "descriptor_size"), descriptor_size, ArgInfo("descriptor_size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "descriptor_channels"), descriptor_channels, ArgInfo("descriptor_channels", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nOctaves"), nOctaves, ArgInfo("nOctaves", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nOctaveLayers"), nOctaveLayers, ArgInfo("nOctaveLayers", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "diffusivity"), diffusivity, ArgInfo("diffusivity", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::AKAZE::create(static_cast<AKAZE_DescriptorType>(descriptor_type), descriptor_size, descriptor_channels, threshold, nOctaves, nOctaveLayers, static_cast<KAZE_DiffusivityType>(diffusivity)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_affineFeature_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<Feature2D> backend;
    int maxTilt=5;
    int minTilt=0;
    float tiltStep=1.4142135623730951f;
    float rotateStepBase=72;
    Ptr<AffineFeature> retval;

    // const char* keywords[] = { "backend", "maxTilt", "minTilt", "tiltStep", "rotateStepBase", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "backend"), backend, ArgInfo("backend", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxTilt"), maxTilt, ArgInfo("maxTilt", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minTilt"), minTilt, ArgInfo("minTilt", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tiltStep"), tiltStep, ArgInfo("tiltStep", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rotateStepBase"), rotateStepBase, ArgInfo("rotateStepBase", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::AffineFeature::create(backend, maxTilt, minTilt, tiltStep, rotateStepBase), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_agastFeatureDetector_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int threshold=10;
    bool nonmaxSuppression=true;
    std::underlying_type_t<AgastFeatureDetector_DetectorType> type=static_cast<std::underlying_type_t<AgastFeatureDetector_DetectorType>>(AgastFeatureDetector::OAST_9_16);
    Ptr<AgastFeatureDetector> retval;

    // const char* keywords[] = { "threshold", "nonmaxSuppression", "type", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nonmaxSuppression"), nonmaxSuppression, ArgInfo("nonmaxSuppression", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::AgastFeatureDetector::create(threshold, nonmaxSuppression, static_cast<AgastFeatureDetector_DetectorType>(type)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_bfMatcher_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int normType=NORM_L2;
    bool crossCheck=false;
    Ptr<BFMatcher> retval;

    // const char* keywords[] = { "normType", "crossCheck", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "normType"), normType, ArgInfo("normType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "crossCheck"), crossCheck, ArgInfo("crossCheck", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::BFMatcher::create(normType, crossCheck), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_brisk_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    int thresh=30;
    int octaves=3;
    float patternScale=1.0f;
    Ptr<BRISK> retval;

    // const char* keywords[] = { "thresh", "octaves", "patternScale", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "thresh"), thresh, ArgInfo("thresh", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "octaves"), octaves, ArgInfo("octaves", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternScale"), patternScale, ArgInfo("patternScale", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::BRISK::create(thresh, octaves, patternScale), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    vector_float radiusList;
    vector_int numberList;
    float dMax=5.85f;
    float dMin=8.2f;
    vector_int indexChange=std::vector<int>();
    Ptr<BRISK> retval;

    // const char* keywords[] = { "radiusList", "numberList", "dMax", "dMin", "indexChange", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "radiusList"), radiusList, ArgInfo("radiusList", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "numberList"), numberList, ArgInfo("numberList", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dMax"), dMax, ArgInfo("dMax", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dMin"), dMin, ArgInfo("dMin", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "indexChange"), indexChange, ArgInfo("indexChange", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::BRISK::create(radiusList, numberList, dMax, dMin, indexChange), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    int thresh=0;
    int octaves=0;
    vector_float radiusList;
    vector_int numberList;
    float dMax=5.85f;
    float dMin=8.2f;
    vector_int indexChange=std::vector<int>();
    Ptr<BRISK> retval;

    // const char* keywords[] = { "thresh", "octaves", "radiusList", "numberList", "dMax", "dMin", "indexChange", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "thresh"), thresh, ArgInfo("thresh", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "octaves"), octaves, ArgInfo("octaves", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "radiusList"), radiusList, ArgInfo("radiusList", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "numberList"), numberList, ArgInfo("numberList", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dMax"), dMax, ArgInfo("dMax", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dMin"), dMin, ArgInfo("dMin", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "indexChange"), indexChange, ArgInfo("indexChange", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::BRISK::create(thresh, octaves, radiusList, numberList, dMax, dMin, indexChange), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_camShift(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat probImage;
    Rect window;
    TermCriteria criteria;
    RotatedRect retval;

    // const char* keywords[] = { "probImage", "window", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "probImage"), probImage, ArgInfo("probImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "window"), window, ArgInfo("window", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::CamShift(probImage, window, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, window));
        }
    }

    }
    

    {
    UMat probImage;
    Rect window;
    TermCriteria criteria;
    RotatedRect retval;

    // const char* keywords[] = { "probImage", "window", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "probImage"), probImage, ArgInfo("probImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "window"), window, ArgInfo("window", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::CamShift(probImage, window, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, window));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_canny(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat edges;
    double threshold1=0;
    double threshold2=0;
    int apertureSize=3;
    bool L2gradient=false;

    // const char* keywords[] = { "image", "threshold1", "threshold2", "edges", "apertureSize", "L2gradient", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "edges"), edges, ArgInfo("edges", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold1"), threshold1, ArgInfo("threshold1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold2"), threshold2, ArgInfo("threshold2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "apertureSize"), apertureSize, ArgInfo("apertureSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "l2gradient"), L2gradient, ArgInfo("L2gradient", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::Canny(image, edges, threshold1, threshold2, apertureSize, L2gradient), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, edges);
        }
    }

    }
    

    {
    UMat image;
    UMat edges;
    double threshold1=0;
    double threshold2=0;
    int apertureSize=3;
    bool L2gradient=false;

    // const char* keywords[] = { "image", "threshold1", "threshold2", "edges", "apertureSize", "L2gradient", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "edges"), edges, ArgInfo("edges", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold1"), threshold1, ArgInfo("threshold1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold2"), threshold2, ArgInfo("threshold2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "apertureSize"), apertureSize, ArgInfo("apertureSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "l2gradient"), L2gradient, ArgInfo("L2gradient", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::Canny(image, edges, threshold1, threshold2, apertureSize, L2gradient), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, edges);
        }
    }

    }
    

    {
    Mat dx;
    Mat dy;
    Mat edges;
    double threshold1=0;
    double threshold2=0;
    bool L2gradient=false;

    // const char* keywords[] = { "dx", "dy", "threshold1", "threshold2", "edges", "L2gradient", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "dx"), dx, ArgInfo("dx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dy"), dy, ArgInfo("dy", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "edges"), edges, ArgInfo("edges", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold1"), threshold1, ArgInfo("threshold1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold2"), threshold2, ArgInfo("threshold2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "l2gradient"), L2gradient, ArgInfo("L2gradient", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::Canny(dx, dy, edges, threshold1, threshold2, L2gradient), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, edges);
        }
    }

    }
    

    {
    UMat dx;
    UMat dy;
    UMat edges;
    double threshold1=0;
    double threshold2=0;
    bool L2gradient=false;

    // const char* keywords[] = { "dx", "dy", "threshold1", "threshold2", "edges", "L2gradient", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "dx"), dx, ArgInfo("dx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dy"), dy, ArgInfo("dy", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "edges"), edges, ArgInfo("edges", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold1"), threshold1, ArgInfo("threshold1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold2"), threshold2, ArgInfo("threshold2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "l2gradient"), L2gradient, ArgInfo("L2gradient", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::Canny(dx, dy, edges, threshold1, threshold2, L2gradient), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, edges);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cascadeClassifier_convert(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String oldcascade;
    String newcascade;
    bool retval;

    // const char* keywords[] = { "oldcascade", "newcascade", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "oldcascade"), oldcascade, ArgInfo("oldcascade", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newcascade"), newcascade, ArgInfo("newcascade", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::CascadeClassifier::convert(oldcascade, newcascade), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_disOpticalFlow_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int preset=DISOpticalFlow::PRESET_FAST;
    Ptr<DISOpticalFlow> retval;

    // const char* keywords[] = { "preset", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "preset"), preset, ArgInfo("preset", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::DISOpticalFlow::create(preset), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_descriptorMatcher_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String descriptorMatcherType;
    Ptr<DescriptorMatcher> retval;

    // const char* keywords[] = { "descriptorMatcherType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "descriptorMatcherType"), descriptorMatcherType, ArgInfo("descriptorMatcherType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::DescriptorMatcher::create(descriptorMatcherType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    std::underlying_type_t<DescriptorMatcher_MatcherType> matcherType=static_cast<std::underlying_type_t<DescriptorMatcher_MatcherType>>(static_cast<DescriptorMatcher_MatcherType>(0));
    Ptr<DescriptorMatcher> retval;

    // const char* keywords[] = { "matcherType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "matcherType"), matcherType, ArgInfo("matcherType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::DescriptorMatcher::create(static_cast<DescriptorMatcher_MatcherType>(matcherType)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_emd(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat signature1;
    Mat signature2;
    int distType=0;
    Mat cost;
    Ptr<float> lowerBound;
    Mat flow;
    float retval;

    // const char* keywords[] = { "signature1", "signature2", "distType", "cost", "lowerBound", "flow", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "signature1"), signature1, ArgInfo("signature1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "signature2"), signature2, ArgInfo("signature2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distType"), distType, ArgInfo("distType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cost"), cost, ArgInfo("cost", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lowerBound"), lowerBound, ArgInfo("lowerBound", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flow"), flow, ArgInfo("flow", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::wrapperEMD(signature1, signature2, distType, cost, lowerBound, flow), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, retval), evision_from(env, lowerBound), evision_from(env, flow));
        }
    }

    }
    

    {
    UMat signature1;
    UMat signature2;
    int distType=0;
    UMat cost;
    Ptr<float> lowerBound;
    UMat flow;
    float retval;

    // const char* keywords[] = { "signature1", "signature2", "distType", "cost", "lowerBound", "flow", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "signature1"), signature1, ArgInfo("signature1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "signature2"), signature2, ArgInfo("signature2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distType"), distType, ArgInfo("distType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cost"), cost, ArgInfo("cost", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lowerBound"), lowerBound, ArgInfo("lowerBound", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flow"), flow, ArgInfo("flow", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::wrapperEMD(signature1, signature2, distType, cost, lowerBound, flow), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, retval), evision_from(env, lowerBound), evision_from(env, flow));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_faceDetectorYN_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String model;
    String config;
    Size input_size;
    float score_threshold=0.9f;
    float nms_threshold=0.3f;
    int top_k=5000;
    int backend_id=0;
    int target_id=0;
    Ptr<FaceDetectorYN> retval;

    // const char* keywords[] = { "model", "config", "input_size", "score_threshold", "nms_threshold", "top_k", "backend_id", "target_id", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "model"), model, ArgInfo("model", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "config"), config, ArgInfo("config", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "input_size"), input_size, ArgInfo("input_size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "score_threshold"), score_threshold, ArgInfo("score_threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nms_threshold"), nms_threshold, ArgInfo("nms_threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "top_k"), top_k, ArgInfo("top_k", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "backend_id"), backend_id, ArgInfo("backend_id", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "target_id"), target_id, ArgInfo("target_id", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::FaceDetectorYN::create(model, config, input_size, score_threshold, nms_threshold, top_k, backend_id, target_id), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_faceRecognizerSF_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String model;
    String config;
    int backend_id=0;
    int target_id=0;
    Ptr<FaceRecognizerSF> retval;

    // const char* keywords[] = { "model", "config", "backend_id", "target_id", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "model"), model, ArgInfo("model", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "config"), config, ArgInfo("config", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "backend_id"), backend_id, ArgInfo("backend_id", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "target_id"), target_id, ArgInfo("target_id", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::FaceRecognizerSF::create(model, config, backend_id, target_id), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_farnebackOpticalFlow_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int numLevels=5;
    double pyrScale=0.5;
    bool fastPyramids=false;
    int winSize=13;
    int numIters=10;
    int polyN=5;
    double polySigma=1.1;
    int flags=0;
    Ptr<FarnebackOpticalFlow> retval;

    // const char* keywords[] = { "numLevels", "pyrScale", "fastPyramids", "winSize", "numIters", "polyN", "polySigma", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "numLevels"), numLevels, ArgInfo("numLevels", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pyrScale"), pyrScale, ArgInfo("pyrScale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fastPyramids"), fastPyramids, ArgInfo("fastPyramids", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winSize"), winSize, ArgInfo("winSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "numIters"), numIters, ArgInfo("numIters", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "polyN"), polyN, ArgInfo("polyN", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "polySigma"), polySigma, ArgInfo("polySigma", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::FarnebackOpticalFlow::create(numLevels, pyrScale, fastPyramids, winSize, numIters, polyN, polySigma, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fastFeatureDetector_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int threshold=10;
    bool nonmaxSuppression=true;
    std::underlying_type_t<FastFeatureDetector_DetectorType> type=static_cast<std::underlying_type_t<FastFeatureDetector_DetectorType>>(FastFeatureDetector::TYPE_9_16);
    Ptr<FastFeatureDetector> retval;

    // const char* keywords[] = { "threshold", "nonmaxSuppression", "type", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nonmaxSuppression"), nonmaxSuppression, ArgInfo("nonmaxSuppression", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::FastFeatureDetector::create(threshold, nonmaxSuppression, static_cast<FastFeatureDetector_DetectorType>(type)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_flannBasedMatcher_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<FlannBasedMatcher> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::FlannBasedMatcher::create(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_gfttDetector_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    int maxCorners=1000;
    double qualityLevel=0.01;
    double minDistance=1;
    int blockSize=3;
    bool useHarrisDetector=false;
    double k=0.04;
    Ptr<GFTTDetector> retval;

    // const char* keywords[] = { "maxCorners", "qualityLevel", "minDistance", "blockSize", "useHarrisDetector", "k", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "maxCorners"), maxCorners, ArgInfo("maxCorners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qualityLevel"), qualityLevel, ArgInfo("qualityLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minDistance"), minDistance, ArgInfo("minDistance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useHarrisDetector"), useHarrisDetector, ArgInfo("useHarrisDetector", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), k, ArgInfo("k", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::GFTTDetector::create(maxCorners, qualityLevel, minDistance, blockSize, useHarrisDetector, k), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    int maxCorners=0;
    double qualityLevel=0;
    double minDistance=0;
    int blockSize=0;
    int gradiantSize=0;
    bool useHarrisDetector=false;
    double k=0.04;
    Ptr<GFTTDetector> retval;

    // const char* keywords[] = { "maxCorners", "qualityLevel", "minDistance", "blockSize", "gradiantSize", "useHarrisDetector", "k", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "maxCorners"), maxCorners, ArgInfo("maxCorners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qualityLevel"), qualityLevel, ArgInfo("qualityLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minDistance"), minDistance, ArgInfo("minDistance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "gradiantSize"), gradiantSize, ArgInfo("gradiantSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useHarrisDetector"), useHarrisDetector, ArgInfo("useHarrisDetector", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), k, ArgInfo("k", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::GFTTDetector::create(maxCorners, qualityLevel, minDistance, blockSize, gradiantSize, useHarrisDetector, k), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_gaussianBlur(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Size ksize;
    double sigmaX=0;
    double sigmaY=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ksize", "sigmaX", "dst", "sigmaY", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigmaX"), sigmaX, ArgInfo("sigmaX", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigmaY"), sigmaY, ArgInfo("sigmaY", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::GaussianBlur(src, dst, ksize, sigmaX, sigmaY, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    Size ksize;
    double sigmaX=0;
    double sigmaY=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ksize", "sigmaX", "dst", "sigmaY", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigmaX"), sigmaX, ArgInfo("sigmaX", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigmaY"), sigmaY, ArgInfo("sigmaY", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::GaussianBlur(src, dst, ksize, sigmaX, sigmaY, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_hogDescriptor_getDaimlerPeopleDetector(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::vector<float> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::HOGDescriptor::getDaimlerPeopleDetector(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_hogDescriptor_getDefaultPeopleDetector(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::vector<float> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::HOGDescriptor::getDefaultPeopleDetector(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_houghCircles(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat circles;
    int method=0;
    double dp=0;
    double minDist=0;
    double param1=100;
    double param2=100;
    int minRadius=0;
    int maxRadius=0;

    // const char* keywords[] = { "image", "method", "dp", "minDist", "circles", "param1", "param2", "minRadius", "maxRadius", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "circles"), circles, ArgInfo("circles", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dp"), dp, ArgInfo("dp", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minDist"), minDist, ArgInfo("minDist", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "param1"), param1, ArgInfo("param1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "param2"), param2, ArgInfo("param2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minRadius"), minRadius, ArgInfo("minRadius", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxRadius"), maxRadius, ArgInfo("maxRadius", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::HoughCircles(image, circles, method, dp, minDist, param1, param2, minRadius, maxRadius), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, circles);
        }
    }

    }
    

    {
    UMat image;
    UMat circles;
    int method=0;
    double dp=0;
    double minDist=0;
    double param1=100;
    double param2=100;
    int minRadius=0;
    int maxRadius=0;

    // const char* keywords[] = { "image", "method", "dp", "minDist", "circles", "param1", "param2", "minRadius", "maxRadius", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "circles"), circles, ArgInfo("circles", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dp"), dp, ArgInfo("dp", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minDist"), minDist, ArgInfo("minDist", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "param1"), param1, ArgInfo("param1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "param2"), param2, ArgInfo("param2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minRadius"), minRadius, ArgInfo("minRadius", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxRadius"), maxRadius, ArgInfo("maxRadius", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::HoughCircles(image, circles, method, dp, minDist, param1, param2, minRadius, maxRadius), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, circles);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_houghLines(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat lines;
    double rho=0;
    double theta=0;
    int threshold=0;
    double srn=0;
    double stn=0;
    double min_theta=0;
    double max_theta=CV_PI;

    // const char* keywords[] = { "image", "rho", "theta", "threshold", "lines", "srn", "stn", "min_theta", "max_theta", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lines"), lines, ArgInfo("lines", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rho"), rho, ArgInfo("rho", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "theta"), theta, ArgInfo("theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "srn"), srn, ArgInfo("srn", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stn"), stn, ArgInfo("stn", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "min_theta"), min_theta, ArgInfo("min_theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "max_theta"), max_theta, ArgInfo("max_theta", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::HoughLines(image, lines, rho, theta, threshold, srn, stn, min_theta, max_theta), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, lines);
        }
    }

    }
    

    {
    UMat image;
    UMat lines;
    double rho=0;
    double theta=0;
    int threshold=0;
    double srn=0;
    double stn=0;
    double min_theta=0;
    double max_theta=CV_PI;

    // const char* keywords[] = { "image", "rho", "theta", "threshold", "lines", "srn", "stn", "min_theta", "max_theta", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lines"), lines, ArgInfo("lines", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rho"), rho, ArgInfo("rho", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "theta"), theta, ArgInfo("theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "srn"), srn, ArgInfo("srn", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stn"), stn, ArgInfo("stn", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "min_theta"), min_theta, ArgInfo("min_theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "max_theta"), max_theta, ArgInfo("max_theta", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::HoughLines(image, lines, rho, theta, threshold, srn, stn, min_theta, max_theta), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, lines);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_houghLinesP(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat lines;
    double rho=0;
    double theta=0;
    int threshold=0;
    double minLineLength=0;
    double maxLineGap=0;

    // const char* keywords[] = { "image", "rho", "theta", "threshold", "lines", "minLineLength", "maxLineGap", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lines"), lines, ArgInfo("lines", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rho"), rho, ArgInfo("rho", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "theta"), theta, ArgInfo("theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minLineLength"), minLineLength, ArgInfo("minLineLength", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxLineGap"), maxLineGap, ArgInfo("maxLineGap", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::HoughLinesP(image, lines, rho, theta, threshold, minLineLength, maxLineGap), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, lines);
        }
    }

    }
    

    {
    UMat image;
    UMat lines;
    double rho=0;
    double theta=0;
    int threshold=0;
    double minLineLength=0;
    double maxLineGap=0;

    // const char* keywords[] = { "image", "rho", "theta", "threshold", "lines", "minLineLength", "maxLineGap", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lines"), lines, ArgInfo("lines", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rho"), rho, ArgInfo("rho", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "theta"), theta, ArgInfo("theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minLineLength"), minLineLength, ArgInfo("minLineLength", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxLineGap"), maxLineGap, ArgInfo("maxLineGap", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::HoughLinesP(image, lines, rho, theta, threshold, minLineLength, maxLineGap), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, lines);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_houghLinesPointSet(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat point;
    Mat lines;
    int lines_max=0;
    int threshold=0;
    double min_rho=0;
    double max_rho=0;
    double rho_step=0;
    double min_theta=0;
    double max_theta=0;
    double theta_step=0;

    // const char* keywords[] = { "point", "lines_max", "threshold", "min_rho", "max_rho", "rho_step", "min_theta", "max_theta", "theta_step", "lines", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "point"), point, ArgInfo("point", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lines"), lines, ArgInfo("lines", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lines_max"), lines_max, ArgInfo("lines_max", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "min_rho"), min_rho, ArgInfo("min_rho", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "max_rho"), max_rho, ArgInfo("max_rho", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rho_step"), rho_step, ArgInfo("rho_step", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "min_theta"), min_theta, ArgInfo("min_theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "max_theta"), max_theta, ArgInfo("max_theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "theta_step"), theta_step, ArgInfo("theta_step", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::HoughLinesPointSet(point, lines, lines_max, threshold, min_rho, max_rho, rho_step, min_theta, max_theta, theta_step), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, lines);
        }
    }

    }
    

    {
    UMat point;
    UMat lines;
    int lines_max=0;
    int threshold=0;
    double min_rho=0;
    double max_rho=0;
    double rho_step=0;
    double min_theta=0;
    double max_theta=0;
    double theta_step=0;

    // const char* keywords[] = { "point", "lines_max", "threshold", "min_rho", "max_rho", "rho_step", "min_theta", "max_theta", "theta_step", "lines", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "point"), point, ArgInfo("point", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lines"), lines, ArgInfo("lines", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lines_max"), lines_max, ArgInfo("lines_max", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "min_rho"), min_rho, ArgInfo("min_rho", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "max_rho"), max_rho, ArgInfo("max_rho", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rho_step"), rho_step, ArgInfo("rho_step", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "min_theta"), min_theta, ArgInfo("min_theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "max_theta"), max_theta, ArgInfo("max_theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "theta_step"), theta_step, ArgInfo("theta_step", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::HoughLinesPointSet(point, lines, lines_max, threshold, min_rho, max_rho, rho_step, min_theta, max_theta, theta_step), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, lines);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_houghLinesWithAccumulator(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat lines;
    double rho=0;
    double theta=0;
    int threshold=0;
    double srn=0;
    double stn=0;
    double min_theta=0;
    double max_theta=CV_PI;

    // const char* keywords[] = { "image", "rho", "theta", "threshold", "lines", "srn", "stn", "min_theta", "max_theta", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lines"), lines, ArgInfo("lines", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rho"), rho, ArgInfo("rho", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "theta"), theta, ArgInfo("theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "srn"), srn, ArgInfo("srn", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stn"), stn, ArgInfo("stn", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "min_theta"), min_theta, ArgInfo("min_theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "max_theta"), max_theta, ArgInfo("max_theta", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::HoughLinesWithAccumulator(image, lines, rho, theta, threshold, srn, stn, min_theta, max_theta), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, lines);
        }
    }

    }
    

    {
    UMat image;
    UMat lines;
    double rho=0;
    double theta=0;
    int threshold=0;
    double srn=0;
    double stn=0;
    double min_theta=0;
    double max_theta=CV_PI;

    // const char* keywords[] = { "image", "rho", "theta", "threshold", "lines", "srn", "stn", "min_theta", "max_theta", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lines"), lines, ArgInfo("lines", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rho"), rho, ArgInfo("rho", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "theta"), theta, ArgInfo("theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "srn"), srn, ArgInfo("srn", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stn"), stn, ArgInfo("stn", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "min_theta"), min_theta, ArgInfo("min_theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "max_theta"), max_theta, ArgInfo("max_theta", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::HoughLinesWithAccumulator(image, lines, rho, theta, threshold, srn, stn, min_theta, max_theta), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, lines);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_huMoments(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Moments m;
    Mat hu;

    // const char* keywords[] = { "m", "hu", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), m, ArgInfo("m", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hu"), hu, ArgInfo("hu", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::HuMoments(m, hu), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, hu);
        }
    }

    }
    

    {
    Moments m;
    UMat hu;

    // const char* keywords[] = { "m", "hu", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), m, ArgInfo("m", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hu"), hu, ArgInfo("hu", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::HuMoments(m, hu), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, hu);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_kaze_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool extended=false;
    bool upright=false;
    float threshold=0.001f;
    int nOctaves=4;
    int nOctaveLayers=4;
    std::underlying_type_t<KAZE_DiffusivityType> diffusivity=static_cast<std::underlying_type_t<KAZE_DiffusivityType>>(KAZE::DIFF_PM_G2);
    Ptr<KAZE> retval;

    // const char* keywords[] = { "extended", "upright", "threshold", "nOctaves", "nOctaveLayers", "diffusivity", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "extended"), extended, ArgInfo("extended", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "upright"), upright, ArgInfo("upright", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nOctaves"), nOctaves, ArgInfo("nOctaves", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nOctaveLayers"), nOctaveLayers, ArgInfo("nOctaveLayers", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "diffusivity"), diffusivity, ArgInfo("diffusivity", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::KAZE::create(extended, upright, threshold, nOctaves, nOctaveLayers, static_cast<KAZE_DiffusivityType>(diffusivity)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_keyPoint_convert(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_KeyPoint keypoints;
    vector_Point2f points2f;
    vector_int keypointIndexes=std::vector<int>();

    // const char* keywords[] = { "keypoints", "keypointIndexes", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints"), keypoints, ArgInfo("keypoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypointIndexes"), keypointIndexes, ArgInfo("keypointIndexes", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::KeyPoint::convert(keypoints, points2f, keypointIndexes), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, points2f);
        }
    }

    }
    

    {
    vector_Point2f points2f;
    vector_KeyPoint keypoints;
    float size=1;
    float response=1;
    int octave=0;
    int class_id=-1;

    // const char* keywords[] = { "points2f", "size", "response", "octave", "class_id", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points2f"), points2f, ArgInfo("points2f", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "response"), response, ArgInfo("response", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "octave"), octave, ArgInfo("octave", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "class_id"), class_id, ArgInfo("class_id", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::KeyPoint::convert(points2f, keypoints, size, response, octave, class_id), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, keypoints);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_keyPoint_overlap(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    KeyPoint kp1;
    KeyPoint kp2;
    float retval;

    // const char* keywords[] = { "kp1", "kp2", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "kp1"), kp1, ArgInfo("kp1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kp2"), kp2, ArgInfo("kp2", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::KeyPoint::overlap(kp1, kp2), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_lut(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat lut;
    Mat dst;

    // const char* keywords[] = { "src", "lut", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lut"), lut, ArgInfo("lut", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::LUT(src, lut, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat lut;
    UMat dst;

    // const char* keywords[] = { "src", "lut", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lut"), lut, ArgInfo("lut", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::LUT(src, lut, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_laplacian(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int ddepth=0;
    int ksize=1;
    double scale=1;
    double delta=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "dst", "ksize", "scale", "delta", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::Laplacian(src, dst, ddepth, ksize, scale, delta, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int ddepth=0;
    int ksize=1;
    double scale=1;
    double delta=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "dst", "ksize", "scale", "delta", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::Laplacian(src, dst, ddepth, ksize, scale, delta, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_mser_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int delta=5;
    int min_area=60;
    int max_area=14400;
    double max_variation=0.25;
    double min_diversity=.2;
    int max_evolution=200;
    double area_threshold=1.01;
    double min_margin=0.003;
    int edge_blur_size=5;
    Ptr<MSER> retval;

    // const char* keywords[] = { "delta", "min_area", "max_area", "max_variation", "min_diversity", "max_evolution", "area_threshold", "min_margin", "edge_blur_size", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "min_area"), min_area, ArgInfo("min_area", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "max_area"), max_area, ArgInfo("max_area", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "max_variation"), max_variation, ArgInfo("max_variation", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "min_diversity"), min_diversity, ArgInfo("min_diversity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "max_evolution"), max_evolution, ArgInfo("max_evolution", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "area_threshold"), area_threshold, ArgInfo("area_threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "min_margin"), min_margin, ArgInfo("min_margin", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "edge_blur_size"), edge_blur_size, ArgInfo("edge_blur_size", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::MSER::create(delta, min_area, max_area, max_variation, min_diversity, max_evolution, area_threshold, min_margin, edge_blur_size), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_mahalanobis(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat v1;
    Mat v2;
    Mat icovar;
    double retval;

    // const char* keywords[] = { "v1", "v2", "icovar", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "v1"), v1, ArgInfo("v1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "v2"), v2, ArgInfo("v2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "icovar"), icovar, ArgInfo("icovar", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::Mahalanobis(v1, v2, icovar), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat v1;
    UMat v2;
    UMat icovar;
    double retval;

    // const char* keywords[] = { "v1", "v2", "icovar", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "v1"), v1, ArgInfo("v1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "v2"), v2, ArgInfo("v2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "icovar"), icovar, ArgInfo("icovar", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::Mahalanobis(v1, v2, icovar), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_orb_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int nfeatures=500;
    float scaleFactor=1.2f;
    int nlevels=8;
    int edgeThreshold=31;
    int firstLevel=0;
    int WTA_K=2;
    std::underlying_type_t<ORB_ScoreType> scoreType=static_cast<std::underlying_type_t<ORB_ScoreType>>(ORB::HARRIS_SCORE);
    int patchSize=31;
    int fastThreshold=20;
    Ptr<ORB> retval;

    // const char* keywords[] = { "nfeatures", "scaleFactor", "nlevels", "edgeThreshold", "firstLevel", "WTA_K", "scoreType", "patchSize", "fastThreshold", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "nfeatures"), nfeatures, ArgInfo("nfeatures", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scaleFactor"), scaleFactor, ArgInfo("scaleFactor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nlevels"), nlevels, ArgInfo("nlevels", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "edgeThreshold"), edgeThreshold, ArgInfo("edgeThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "firstLevel"), firstLevel, ArgInfo("firstLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "wTA_K"), WTA_K, ArgInfo("WTA_K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scoreType"), scoreType, ArgInfo("scoreType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patchSize"), patchSize, ArgInfo("patchSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fastThreshold"), fastThreshold, ArgInfo("fastThreshold", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ORB::create(nfeatures, scaleFactor, nlevels, edgeThreshold, firstLevel, WTA_K, static_cast<ORB_ScoreType>(scoreType), patchSize, fastThreshold), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_pcaBackProject(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat data;
    Mat mean;
    Mat eigenvectors;
    Mat result;

    // const char* keywords[] = { "data", "mean", "eigenvectors", "result", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "result"), result, ArgInfo("result", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::PCABackProject(data, mean, eigenvectors, result), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, result);
        }
    }

    }
    

    {
    UMat data;
    UMat mean;
    UMat eigenvectors;
    UMat result;

    // const char* keywords[] = { "data", "mean", "eigenvectors", "result", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "result"), result, ArgInfo("result", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::PCABackProject(data, mean, eigenvectors, result), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, result);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_pcaCompute(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat data;
    Mat mean;
    Mat eigenvectors;
    int maxComponents=0;

    // const char* keywords[] = { "data", "mean", "eigenvectors", "maxComponents", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxComponents"), maxComponents, ArgInfo("maxComponents", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, maxComponents), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, mean), evision_from(env, eigenvectors));
        }
    }

    }
    

    {
    UMat data;
    UMat mean;
    UMat eigenvectors;
    int maxComponents=0;

    // const char* keywords[] = { "data", "mean", "eigenvectors", "maxComponents", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxComponents"), maxComponents, ArgInfo("maxComponents", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, maxComponents), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, mean), evision_from(env, eigenvectors));
        }
    }

    }
    

    {
    Mat data;
    Mat mean;
    Mat eigenvectors;
    double retainedVariance=0;

    // const char* keywords[] = { "data", "mean", "retainedVariance", "eigenvectors", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "retainedVariance"), retainedVariance, ArgInfo("retainedVariance", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, retainedVariance), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, mean), evision_from(env, eigenvectors));
        }
    }

    }
    

    {
    UMat data;
    UMat mean;
    UMat eigenvectors;
    double retainedVariance=0;

    // const char* keywords[] = { "data", "mean", "retainedVariance", "eigenvectors", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "retainedVariance"), retainedVariance, ArgInfo("retainedVariance", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, retainedVariance), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, mean), evision_from(env, eigenvectors));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_pcaCompute2(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat data;
    Mat mean;
    Mat eigenvectors;
    Mat eigenvalues;
    int maxComponents=0;

    // const char* keywords[] = { "data", "mean", "eigenvectors", "eigenvalues", "maxComponents", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvalues"), eigenvalues, ArgInfo("eigenvalues", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxComponents"), maxComponents, ArgInfo("maxComponents", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, eigenvalues, maxComponents), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, mean), evision_from(env, eigenvectors), evision_from(env, eigenvalues));
        }
    }

    }
    

    {
    UMat data;
    UMat mean;
    UMat eigenvectors;
    UMat eigenvalues;
    int maxComponents=0;

    // const char* keywords[] = { "data", "mean", "eigenvectors", "eigenvalues", "maxComponents", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvalues"), eigenvalues, ArgInfo("eigenvalues", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxComponents"), maxComponents, ArgInfo("maxComponents", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, eigenvalues, maxComponents), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, mean), evision_from(env, eigenvectors), evision_from(env, eigenvalues));
        }
    }

    }
    

    {
    Mat data;
    Mat mean;
    Mat eigenvectors;
    Mat eigenvalues;
    double retainedVariance=0;

    // const char* keywords[] = { "data", "mean", "retainedVariance", "eigenvectors", "eigenvalues", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvalues"), eigenvalues, ArgInfo("eigenvalues", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "retainedVariance"), retainedVariance, ArgInfo("retainedVariance", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, eigenvalues, retainedVariance), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, mean), evision_from(env, eigenvectors), evision_from(env, eigenvalues));
        }
    }

    }
    

    {
    UMat data;
    UMat mean;
    UMat eigenvectors;
    UMat eigenvalues;
    double retainedVariance=0;

    // const char* keywords[] = { "data", "mean", "retainedVariance", "eigenvectors", "eigenvalues", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvalues"), eigenvalues, ArgInfo("eigenvalues", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "retainedVariance"), retainedVariance, ArgInfo("retainedVariance", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::PCACompute(data, mean, eigenvectors, eigenvalues, retainedVariance), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, mean), evision_from(env, eigenvectors), evision_from(env, eigenvalues));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_pcaProject(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat data;
    Mat mean;
    Mat eigenvectors;
    Mat result;

    // const char* keywords[] = { "data", "mean", "eigenvectors", "result", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "result"), result, ArgInfo("result", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::PCAProject(data, mean, eigenvectors, result), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, result);
        }
    }

    }
    

    {
    UMat data;
    UMat mean;
    UMat eigenvectors;
    UMat result;

    // const char* keywords[] = { "data", "mean", "eigenvectors", "result", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "result"), result, ArgInfo("result", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::PCAProject(data, mean, eigenvectors, result), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, result);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_psnr(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    double R=255.;
    double retval;

    // const char* keywords[] = { "src1", "src2", "R", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::PSNR(src1, src2, R), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    double R=255.;
    double retval;

    // const char* keywords[] = { "src1", "src2", "R", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::PSNR(src1, src2, R), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_qrCodeEncoder_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    QRCodeEncoder::Params parameters=QRCodeEncoder::Params();
    Ptr<QRCodeEncoder> retval;

    // const char* keywords[] = { "parameters", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "parameters"), parameters, ArgInfo("parameters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::QRCodeEncoder::create(parameters), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_rqDecomp3x3(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat mtxR;
    Mat mtxQ;
    Mat Qx;
    Mat Qy;
    Mat Qz;
    Vec3d retval;

    // const char* keywords[] = { "src", "mtxR", "mtxQ", "Qx", "Qy", "Qz", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mtxR"), mtxR, ArgInfo("mtxR", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mtxQ"), mtxQ, ArgInfo("mtxQ", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qx"), Qx, ArgInfo("Qx", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qy"), Qy, ArgInfo("Qy", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qz"), Qz, ArgInfo("Qz", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::RQDecomp3x3(src, mtxR, mtxQ, Qx, Qy, Qz), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple6(env, evision_from(env, retval), evision_from(env, mtxR), evision_from(env, mtxQ), evision_from(env, Qx), evision_from(env, Qy), evision_from(env, Qz));
        }
    }

    }
    

    {
    UMat src;
    UMat mtxR;
    UMat mtxQ;
    UMat Qx;
    UMat Qy;
    UMat Qz;
    Vec3d retval;

    // const char* keywords[] = { "src", "mtxR", "mtxQ", "Qx", "Qy", "Qz", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mtxR"), mtxR, ArgInfo("mtxR", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mtxQ"), mtxQ, ArgInfo("mtxQ", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qx"), Qx, ArgInfo("Qx", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qy"), Qy, ArgInfo("Qy", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qz"), Qz, ArgInfo("Qz", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::RQDecomp3x3(src, mtxR, mtxQ, Qx, Qy, Qz), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple6(env, evision_from(env, retval), evision_from(env, mtxR), evision_from(env, mtxQ), evision_from(env, Qx), evision_from(env, Qy), evision_from(env, Qz));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_rodrigues(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat jacobian;

    // const char* keywords[] = { "src", "dst", "jacobian", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "jacobian"), jacobian, ArgInfo("jacobian", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::Rodrigues(src, dst, jacobian), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dst), evision_from(env, jacobian));
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat jacobian;

    // const char* keywords[] = { "src", "dst", "jacobian", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "jacobian"), jacobian, ArgInfo("jacobian", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::Rodrigues(src, dst, jacobian), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dst), evision_from(env, jacobian));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_sift_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    int nfeatures=0;
    int nOctaveLayers=3;
    double contrastThreshold=0.04;
    double edgeThreshold=10;
    double sigma=1.6;
    Ptr<SIFT> retval;

    // const char* keywords[] = { "nfeatures", "nOctaveLayers", "contrastThreshold", "edgeThreshold", "sigma", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "nfeatures"), nfeatures, ArgInfo("nfeatures", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nOctaveLayers"), nOctaveLayers, ArgInfo("nOctaveLayers", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "contrastThreshold"), contrastThreshold, ArgInfo("contrastThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "edgeThreshold"), edgeThreshold, ArgInfo("edgeThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma"), sigma, ArgInfo("sigma", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::SIFT::create(nfeatures, nOctaveLayers, contrastThreshold, edgeThreshold, sigma), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    int nfeatures=0;
    int nOctaveLayers=0;
    double contrastThreshold=0;
    double edgeThreshold=0;
    double sigma=0;
    int descriptorType=0;
    Ptr<SIFT> retval;

    // const char* keywords[] = { "nfeatures", "nOctaveLayers", "contrastThreshold", "edgeThreshold", "sigma", "descriptorType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "nfeatures"), nfeatures, ArgInfo("nfeatures", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nOctaveLayers"), nOctaveLayers, ArgInfo("nOctaveLayers", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "contrastThreshold"), contrastThreshold, ArgInfo("contrastThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "edgeThreshold"), edgeThreshold, ArgInfo("edgeThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma"), sigma, ArgInfo("sigma", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "descriptorType"), descriptorType, ArgInfo("descriptorType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::SIFT::create(nfeatures, nOctaveLayers, contrastThreshold, edgeThreshold, sigma, descriptorType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_svBackSubst(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat w;
    Mat u;
    Mat vt;
    Mat rhs;
    Mat dst;

    // const char* keywords[] = { "w", "u", "vt", "rhs", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "w"), w, ArgInfo("w", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "u"), u, ArgInfo("u", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "vt"), vt, ArgInfo("vt", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rhs"), rhs, ArgInfo("rhs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::SVBackSubst(w, u, vt, rhs, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat w;
    UMat u;
    UMat vt;
    UMat rhs;
    UMat dst;

    // const char* keywords[] = { "w", "u", "vt", "rhs", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "w"), w, ArgInfo("w", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "u"), u, ArgInfo("u", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "vt"), vt, ArgInfo("vt", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rhs"), rhs, ArgInfo("rhs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::SVBackSubst(w, u, vt, rhs, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_svdDecomp(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat w;
    Mat u;
    Mat vt;
    int flags=0;

    // const char* keywords[] = { "src", "w", "u", "vt", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "w"), w, ArgInfo("w", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "u"), u, ArgInfo("u", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "vt"), vt, ArgInfo("vt", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::SVDecomp(src, w, u, vt, flags), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, w), evision_from(env, u), evision_from(env, vt));
        }
    }

    }
    

    {
    UMat src;
    UMat w;
    UMat u;
    UMat vt;
    int flags=0;

    // const char* keywords[] = { "src", "w", "u", "vt", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "w"), w, ArgInfo("w", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "u"), u, ArgInfo("u", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "vt"), vt, ArgInfo("vt", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::SVDecomp(src, w, u, vt, flags), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, w), evision_from(env, u), evision_from(env, vt));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_scharr(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int ddepth=0;
    int dx=0;
    int dy=0;
    double scale=1;
    double delta=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "dx", "dy", "dst", "scale", "delta", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dx"), dx, ArgInfo("dx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dy"), dy, ArgInfo("dy", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::Scharr(src, dst, ddepth, dx, dy, scale, delta, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int ddepth=0;
    int dx=0;
    int dy=0;
    double scale=1;
    double delta=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "dx", "dy", "dst", "scale", "delta", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dx"), dx, ArgInfo("dx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dy"), dy, ArgInfo("dy", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::Scharr(src, dst, ddepth, dx, dy, scale, delta, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_simpleBlobDetector_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    SimpleBlobDetector_Params parameters=SimpleBlobDetector::Params();
    Ptr<SimpleBlobDetector> retval;

    // const char* keywords[] = { "parameters", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "parameters"), parameters, ArgInfo("parameters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::SimpleBlobDetector::create(parameters), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_sobel(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int ddepth=0;
    int dx=0;
    int dy=0;
    int ksize=3;
    double scale=1;
    double delta=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "dx", "dy", "dst", "ksize", "scale", "delta", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dx"), dx, ArgInfo("dx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dy"), dy, ArgInfo("dy", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::Sobel(src, dst, ddepth, dx, dy, ksize, scale, delta, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int ddepth=0;
    int dx=0;
    int dy=0;
    int ksize=3;
    double scale=1;
    double delta=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "dx", "dy", "dst", "ksize", "scale", "delta", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dx"), dx, ArgInfo("dx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dy"), dy, ArgInfo("dy", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::Sobel(src, dst, ddepth, dx, dy, ksize, scale, delta, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_sparsePyrLKOpticalFlow_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Size winSize=Size(21, 21);
    int maxLevel=3;
    TermCriteria crit=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01);
    int flags=0;
    double minEigThreshold=1e-4;
    Ptr<SparsePyrLKOpticalFlow> retval;

    // const char* keywords[] = { "winSize", "maxLevel", "crit", "flags", "minEigThreshold", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "winSize"), winSize, ArgInfo("winSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxLevel"), maxLevel, ArgInfo("maxLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "crit"), crit, ArgInfo("crit", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minEigThreshold"), minEigThreshold, ArgInfo("minEigThreshold", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::SparsePyrLKOpticalFlow::create(winSize, maxLevel, crit, flags, minEigThreshold), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_stereoBM_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int numDisparities=0;
    int blockSize=21;
    Ptr<StereoBM> retval;

    // const char* keywords[] = { "numDisparities", "blockSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "numDisparities"), numDisparities, ArgInfo("numDisparities", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::StereoBM::create(numDisparities, blockSize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_stereoSGBM_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int minDisparity=0;
    int numDisparities=16;
    int blockSize=3;
    int P1=0;
    int P2=0;
    int disp12MaxDiff=0;
    int preFilterCap=0;
    int uniquenessRatio=0;
    int speckleWindowSize=0;
    int speckleRange=0;
    int mode=StereoSGBM::MODE_SGBM;
    Ptr<StereoSGBM> retval;

    // const char* keywords[] = { "minDisparity", "numDisparities", "blockSize", "P1", "P2", "disp12MaxDiff", "preFilterCap", "uniquenessRatio", "speckleWindowSize", "speckleRange", "mode", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "minDisparity"), minDisparity, ArgInfo("minDisparity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "numDisparities"), numDisparities, ArgInfo("numDisparities", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p1"), P1, ArgInfo("P1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p2"), P2, ArgInfo("P2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "disp12MaxDiff"), disp12MaxDiff, ArgInfo("disp12MaxDiff", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "preFilterCap"), preFilterCap, ArgInfo("preFilterCap", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "uniquenessRatio"), uniquenessRatio, ArgInfo("uniquenessRatio", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "speckleWindowSize"), speckleWindowSize, ArgInfo("speckleWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "speckleRange"), speckleRange, ArgInfo("speckleRange", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mode"), mode, ArgInfo("mode", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::StereoSGBM::create(minDisparity, numDisparities, blockSize, P1, P2, disp12MaxDiff, preFilterCap, uniquenessRatio, speckleWindowSize, speckleRange, mode), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_stitcher_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Mode mode=Stitcher::PANORAMA;
    Ptr<Stitcher> retval;

    // const char* keywords[] = { "mode", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "mode"), mode, ArgInfo("mode", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::Stitcher::create(mode), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_trackerDaSiamRPN_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    TrackerDaSiamRPN_Params parameters=TrackerDaSiamRPN::Params();
    Ptr<TrackerDaSiamRPN> retval;

    // const char* keywords[] = { "parameters", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "parameters"), parameters, ArgInfo("parameters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::TrackerDaSiamRPN::create(parameters), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_trackerGOTURN_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    TrackerGOTURN_Params parameters=TrackerGOTURN::Params();
    Ptr<TrackerGOTURN> retval;

    // const char* keywords[] = { "parameters", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "parameters"), parameters, ArgInfo("parameters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::TrackerGOTURN::create(parameters), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_trackerMIL_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    TrackerMIL_Params parameters=TrackerMIL::Params();
    Ptr<TrackerMIL> retval;

    // const char* keywords[] = { "parameters", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "parameters"), parameters, ArgInfo("parameters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::TrackerMIL::create(parameters), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_uMat_context(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    void* retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv_UMat_context(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_uMat_queue(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    void* retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv_UMat_queue(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_variationalRefinement_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<VariationalRefinement> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::VariationalRefinement::create(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_videoWriter_fourcc(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    char c1;
    char c2;
    char c3;
    char c4;
    int retval;

    // const char* keywords[] = { "c1", "c2", "c3", "c4", NULL }; // <- no more in use, left for debugging purpose
    if( convert_to_char(env, evision_get_kw(env, erl_terms, "c1"), &c1, ArgInfo("c1", 0)) && 
        convert_to_char(env, evision_get_kw(env, erl_terms, "c2"), &c2, ArgInfo("c2", 0)) && 
        convert_to_char(env, evision_get_kw(env, erl_terms, "c3"), &c3, ArgInfo("c3", 0)) && 
        convert_to_char(env, evision_get_kw(env, erl_terms, "c4"), &c4, ArgInfo("c4", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::VideoWriter::fourcc(c1, c2, c3, c4), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_absdiff(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;

    // const char* keywords[] = { "src1", "src2", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::absdiff(src1, src2, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;

    // const char* keywords[] = { "src1", "src2", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::absdiff(src1, src2, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_accumulate(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat mask;

    // const char* keywords[] = { "src", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::accumulate(src, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat mask;

    // const char* keywords[] = { "src", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::accumulate(src, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_accumulateProduct(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;
    Mat mask;

    // const char* keywords[] = { "src1", "src2", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::accumulateProduct(src1, src2, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;
    UMat mask;

    // const char* keywords[] = { "src1", "src2", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::accumulateProduct(src1, src2, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_accumulateSquare(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat mask;

    // const char* keywords[] = { "src", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::accumulateSquare(src, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat mask;

    // const char* keywords[] = { "src", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::accumulateSquare(src, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_accumulateWeighted(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    double alpha=0;
    Mat mask;

    // const char* keywords[] = { "src", "dst", "alpha", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::accumulateWeighted(src, dst, alpha, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    double alpha=0;
    UMat mask;

    // const char* keywords[] = { "src", "dst", "alpha", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::accumulateWeighted(src, dst, alpha, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_adaptiveThreshold(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    double maxValue=0;
    int adaptiveMethod=0;
    int thresholdType=0;
    int blockSize=0;
    double C=0;

    // const char* keywords[] = { "src", "maxValue", "adaptiveMethod", "thresholdType", "blockSize", "C", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxValue"), maxValue, ArgInfo("maxValue", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "adaptiveMethod"), adaptiveMethod, ArgInfo("adaptiveMethod", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thresholdType"), thresholdType, ArgInfo("thresholdType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "c"), C, ArgInfo("C", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::adaptiveThreshold(src, dst, maxValue, adaptiveMethod, thresholdType, blockSize, C), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    double maxValue=0;
    int adaptiveMethod=0;
    int thresholdType=0;
    int blockSize=0;
    double C=0;

    // const char* keywords[] = { "src", "maxValue", "adaptiveMethod", "thresholdType", "blockSize", "C", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxValue"), maxValue, ArgInfo("maxValue", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "adaptiveMethod"), adaptiveMethod, ArgInfo("adaptiveMethod", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thresholdType"), thresholdType, ArgInfo("thresholdType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "c"), C, ArgInfo("C", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::adaptiveThreshold(src, dst, maxValue, adaptiveMethod, thresholdType, blockSize, C), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_add(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;
    Mat mask;
    int dtype=-1;

    // const char* keywords[] = { "src1", "src2", "dst", "mask", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::add(src1, src2, dst, mask, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;
    UMat mask;
    int dtype=-1;

    // const char* keywords[] = { "src1", "src2", "dst", "mask", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::add(src1, src2, dst, mask, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_addText(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Mat img;
    String text;
    Point org;
    String nameFont;
    int pointSize=-1;
    Scalar color=Scalar::all(0);
    int weight=QT_FONT_NORMAL;
    int style=QT_STYLE_NORMAL;
    int spacing=0;

    // const char* keywords[] = { "img", "text", "org", "nameFont", "pointSize", "color", "weight", "style", "spacing", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "text"), text, ArgInfo("text", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "org"), org, ArgInfo("org", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nameFont"), nameFont, ArgInfo("nameFont", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pointSize"), pointSize, ArgInfo("pointSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "weight"), weight, ArgInfo("weight", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "style"), style, ArgInfo("style", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "spacing"), spacing, ArgInfo("spacing", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::addText(img, text, org, nameFont, pointSize, color, weight, style, spacing), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_addWeighted(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    double alpha=0;
    Mat src2;
    double beta=0;
    double gamma=0;
    Mat dst;
    int dtype=-1;

    // const char* keywords[] = { "src1", "alpha", "src2", "beta", "gamma", "dst", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "beta"), beta, ArgInfo("beta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "gamma"), gamma, ArgInfo("gamma", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::addWeighted(src1, alpha, src2, beta, gamma, dst, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    double alpha=0;
    UMat src2;
    double beta=0;
    double gamma=0;
    UMat dst;
    int dtype=-1;

    // const char* keywords[] = { "src1", "alpha", "src2", "beta", "gamma", "dst", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "beta"), beta, ArgInfo("beta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "gamma"), gamma, ArgInfo("gamma", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::addWeighted(src1, alpha, src2, beta, gamma, dst, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_applyColorMap(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int colormap=0;

    // const char* keywords[] = { "src", "colormap", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "colormap"), colormap, ArgInfo("colormap", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::applyColorMap(src, dst, colormap), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int colormap=0;

    // const char* keywords[] = { "src", "colormap", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "colormap"), colormap, ArgInfo("colormap", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::applyColorMap(src, dst, colormap), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    Mat src;
    Mat dst;
    Mat userColor;

    // const char* keywords[] = { "src", "userColor", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "userColor"), userColor, ArgInfo("userColor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::applyColorMap(src, dst, userColor), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat userColor;

    // const char* keywords[] = { "src", "userColor", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "userColor"), userColor, ArgInfo("userColor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::applyColorMap(src, dst, userColor), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_approxPolyDP(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat curve;
    Mat approxCurve;
    double epsilon=0;
    bool closed=0;

    // const char* keywords[] = { "curve", "epsilon", "closed", "approxCurve", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "curve"), curve, ArgInfo("curve", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "approxCurve"), approxCurve, ArgInfo("approxCurve", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "epsilon"), epsilon, ArgInfo("epsilon", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "closed"), closed, ArgInfo("closed", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::approxPolyDP(curve, approxCurve, epsilon, closed), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, approxCurve);
        }
    }

    }
    

    {
    UMat curve;
    UMat approxCurve;
    double epsilon=0;
    bool closed=0;

    // const char* keywords[] = { "curve", "epsilon", "closed", "approxCurve", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "curve"), curve, ArgInfo("curve", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "approxCurve"), approxCurve, ArgInfo("approxCurve", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "epsilon"), epsilon, ArgInfo("epsilon", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "closed"), closed, ArgInfo("closed", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::approxPolyDP(curve, approxCurve, epsilon, closed), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, approxCurve);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_arcLength(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat curve;
    bool closed=0;
    double retval;

    // const char* keywords[] = { "curve", "closed", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "curve"), curve, ArgInfo("curve", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "closed"), closed, ArgInfo("closed", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::arcLength(curve, closed), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat curve;
    bool closed=0;
    double retval;

    // const char* keywords[] = { "curve", "closed", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "curve"), curve, ArgInfo("curve", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "closed"), closed, ArgInfo("closed", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::arcLength(curve, closed), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_arrowedLine(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    Point pt1;
    Point pt2;
    Scalar color;
    int thickness=1;
    int line_type=8;
    int shift=0;
    double tipLength=0.1;

    // const char* keywords[] = { "img", "pt1", "pt2", "color", "thickness", "line_type", "shift", "tipLength", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt1"), pt1, ArgInfo("pt1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt2"), pt2, ArgInfo("pt2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "line_type"), line_type, ArgInfo("line_type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tipLength"), tipLength, ArgInfo("tipLength", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::arrowedLine(img, pt1, pt2, color, thickness, line_type, shift, tipLength), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    UMat img;
    Point pt1;
    Point pt2;
    Scalar color;
    int thickness=1;
    int line_type=8;
    int shift=0;
    double tipLength=0.1;

    // const char* keywords[] = { "img", "pt1", "pt2", "color", "thickness", "line_type", "shift", "tipLength", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt1"), pt1, ArgInfo("pt1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt2"), pt2, ArgInfo("pt2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "line_type"), line_type, ArgInfo("line_type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tipLength"), tipLength, ArgInfo("tipLength", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::arrowedLine(img, pt1, pt2, color, thickness, line_type, shift, tipLength), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_batchDistance(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dist;
    int dtype=0;
    Mat nidx;
    int normType=NORM_L2;
    int K=0;
    Mat mask;
    int update=0;
    bool crosscheck=false;

    // const char* keywords[] = { "src1", "src2", "dtype", "dist", "nidx", "normType", "K", "mask", "update", "crosscheck", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dist"), dist, ArgInfo("dist", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nidx"), nidx, ArgInfo("nidx", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normType"), normType, ArgInfo("normType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "update"), update, ArgInfo("update", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "crosscheck"), crosscheck, ArgInfo("crosscheck", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::batchDistance(src1, src2, dist, dtype, nidx, normType, K, mask, update, crosscheck), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dist), evision_from(env, nidx));
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dist;
    int dtype=0;
    UMat nidx;
    int normType=NORM_L2;
    int K=0;
    UMat mask;
    int update=0;
    bool crosscheck=false;

    // const char* keywords[] = { "src1", "src2", "dtype", "dist", "nidx", "normType", "K", "mask", "update", "crosscheck", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dist"), dist, ArgInfo("dist", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nidx"), nidx, ArgInfo("nidx", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normType"), normType, ArgInfo("normType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "update"), update, ArgInfo("update", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "crosscheck"), crosscheck, ArgInfo("crosscheck", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::batchDistance(src1, src2, dist, dtype, nidx, normType, K, mask, update, crosscheck), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dist), evision_from(env, nidx));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_bilateralFilter(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int d=0;
    double sigmaColor=0;
    double sigmaSpace=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "d", "sigmaColor", "sigmaSpace", "dst", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), d, ArgInfo("d", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigmaColor"), sigmaColor, ArgInfo("sigmaColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigmaSpace"), sigmaSpace, ArgInfo("sigmaSpace", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::bilateralFilter(src, dst, d, sigmaColor, sigmaSpace, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int d=0;
    double sigmaColor=0;
    double sigmaSpace=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "d", "sigmaColor", "sigmaSpace", "dst", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), d, ArgInfo("d", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigmaColor"), sigmaColor, ArgInfo("sigmaColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigmaSpace"), sigmaSpace, ArgInfo("sigmaSpace", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::bilateralFilter(src, dst, d, sigmaColor, sigmaSpace, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_bitwise_and(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;
    Mat mask;

    // const char* keywords[] = { "src1", "src2", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::bitwise_and(src1, src2, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;
    UMat mask;

    // const char* keywords[] = { "src1", "src2", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::bitwise_and(src1, src2, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_bitwise_not(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat mask;

    // const char* keywords[] = { "src", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::bitwise_not(src, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat mask;

    // const char* keywords[] = { "src", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::bitwise_not(src, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_bitwise_or(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;
    Mat mask;

    // const char* keywords[] = { "src1", "src2", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::bitwise_or(src1, src2, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;
    UMat mask;

    // const char* keywords[] = { "src1", "src2", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::bitwise_or(src1, src2, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_bitwise_xor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;
    Mat mask;

    // const char* keywords[] = { "src1", "src2", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::bitwise_xor(src1, src2, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;
    UMat mask;

    // const char* keywords[] = { "src1", "src2", "dst", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::bitwise_xor(src1, src2, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_blendLinear(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat weights1;
    Mat weights2;
    Mat dst;

    // const char* keywords[] = { "src1", "src2", "weights1", "weights2", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "weights1"), weights1, ArgInfo("weights1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "weights2"), weights2, ArgInfo("weights2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::blendLinear(src1, src2, weights1, weights2, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat weights1;
    UMat weights2;
    UMat dst;

    // const char* keywords[] = { "src1", "src2", "weights1", "weights2", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "weights1"), weights1, ArgInfo("weights1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "weights2"), weights2, ArgInfo("weights2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::blendLinear(src1, src2, weights1, weights2, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_blur(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Size ksize;
    Point anchor=Point(-1,-1);
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ksize", "dst", "anchor", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::blur(src, dst, ksize, anchor, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    Size ksize;
    Point anchor=Point(-1,-1);
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ksize", "dst", "anchor", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::blur(src, dst, ksize, anchor, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_borderInterpolate(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int p=0;
    int len=0;
    int borderType=0;
    int retval;

    // const char* keywords[] = { "p", "len", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "p"), p, ArgInfo("p", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "len"), len, ArgInfo("len", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::borderInterpolate(p, len, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_boundingRect(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat array;
    Rect retval;

    // const char* keywords[] = { "array", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "array"), array, ArgInfo("array", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::boundingRect(array), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat array;
    Rect retval;

    // const char* keywords[] = { "array", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "array"), array, ArgInfo("array", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::boundingRect(array), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_boxFilter(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int ddepth=0;
    Size ksize;
    Point anchor=Point(-1,-1);
    bool normalize=true;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "ksize", "dst", "anchor", "normalize", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normalize"), normalize, ArgInfo("normalize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::boxFilter(src, dst, ddepth, ksize, anchor, normalize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int ddepth=0;
    Size ksize;
    Point anchor=Point(-1,-1);
    bool normalize=true;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "ksize", "dst", "anchor", "normalize", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normalize"), normalize, ArgInfo("normalize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::boxFilter(src, dst, ddepth, ksize, anchor, normalize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_boxPoints(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    RotatedRect box;
    Mat points;

    // const char* keywords[] = { "box", "points", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "box"), box, ArgInfo("box", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::boxPoints(box, points), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, points);
        }
    }

    }
    

    {
    RotatedRect box;
    UMat points;

    // const char* keywords[] = { "box", "points", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "box"), box, ArgInfo("box", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::boxPoints(box, points), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, points);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_buildOpticalFlowPyramid(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    vector_Mat pyramid;
    Size winSize;
    int maxLevel=0;
    bool withDerivatives=true;
    int pyrBorder=BORDER_REFLECT_101;
    int derivBorder=BORDER_CONSTANT;
    bool tryReuseInputImage=true;
    int retval;

    // const char* keywords[] = { "img", "winSize", "maxLevel", "pyramid", "withDerivatives", "pyrBorder", "derivBorder", "tryReuseInputImage", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pyramid"), pyramid, ArgInfo("pyramid", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winSize"), winSize, ArgInfo("winSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxLevel"), maxLevel, ArgInfo("maxLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "withDerivatives"), withDerivatives, ArgInfo("withDerivatives", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pyrBorder"), pyrBorder, ArgInfo("pyrBorder", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "derivBorder"), derivBorder, ArgInfo("derivBorder", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tryReuseInputImage"), tryReuseInputImage, ArgInfo("tryReuseInputImage", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::buildOpticalFlowPyramid(img, pyramid, winSize, maxLevel, withDerivatives, pyrBorder, derivBorder, tryReuseInputImage), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, pyramid));
        }
    }

    }
    

    {
    UMat img;
    vector_UMat pyramid;
    Size winSize;
    int maxLevel=0;
    bool withDerivatives=true;
    int pyrBorder=BORDER_REFLECT_101;
    int derivBorder=BORDER_CONSTANT;
    bool tryReuseInputImage=true;
    int retval;

    // const char* keywords[] = { "img", "winSize", "maxLevel", "pyramid", "withDerivatives", "pyrBorder", "derivBorder", "tryReuseInputImage", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pyramid"), pyramid, ArgInfo("pyramid", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winSize"), winSize, ArgInfo("winSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxLevel"), maxLevel, ArgInfo("maxLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "withDerivatives"), withDerivatives, ArgInfo("withDerivatives", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pyrBorder"), pyrBorder, ArgInfo("pyrBorder", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "derivBorder"), derivBorder, ArgInfo("derivBorder", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tryReuseInputImage"), tryReuseInputImage, ArgInfo("tryReuseInputImage", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::buildOpticalFlowPyramid(img, pyramid, winSize, maxLevel, withDerivatives, pyrBorder, derivBorder, tryReuseInputImage), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, pyramid));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_calcBackProject(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat images;
    vector_int channels;
    Mat hist;
    Mat dst;
    vector_float ranges;
    double scale=0;

    // const char* keywords[] = { "images", "channels", "hist", "ranges", "scale", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "images"), images, ArgInfo("images", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "channels"), channels, ArgInfo("channels", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hist"), hist, ArgInfo("hist", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ranges"), ranges, ArgInfo("ranges", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calcBackProject(images, channels, hist, dst, ranges, scale), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    vector_UMat images;
    vector_int channels;
    UMat hist;
    UMat dst;
    vector_float ranges;
    double scale=0;

    // const char* keywords[] = { "images", "channels", "hist", "ranges", "scale", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "images"), images, ArgInfo("images", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "channels"), channels, ArgInfo("channels", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hist"), hist, ArgInfo("hist", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ranges"), ranges, ArgInfo("ranges", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calcBackProject(images, channels, hist, dst, ranges, scale), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_calcCovarMatrix(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat samples;
    Mat covar;
    Mat mean;
    int flags=0;
    int ctype=CV_64F;

    // const char* keywords[] = { "samples", "mean", "flags", "covar", "ctype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "samples"), samples, ArgInfo("samples", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "covar"), covar, ArgInfo("covar", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ctype"), ctype, ArgInfo("ctype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calcCovarMatrix(samples, covar, mean, flags, ctype), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, covar), evision_from(env, mean));
        }
    }

    }
    

    {
    UMat samples;
    UMat covar;
    UMat mean;
    int flags=0;
    int ctype=CV_64F;

    // const char* keywords[] = { "samples", "mean", "flags", "covar", "ctype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "samples"), samples, ArgInfo("samples", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "covar"), covar, ArgInfo("covar", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ctype"), ctype, ArgInfo("ctype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calcCovarMatrix(samples, covar, mean, flags, ctype), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, covar), evision_from(env, mean));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_calcHist(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat images;
    vector_int channels;
    Mat mask;
    Mat hist;
    vector_int histSize;
    vector_float ranges;
    bool accumulate=false;

    // const char* keywords[] = { "images", "channels", "mask", "histSize", "ranges", "hist", "accumulate", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "images"), images, ArgInfo("images", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "channels"), channels, ArgInfo("channels", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hist"), hist, ArgInfo("hist", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "histSize"), histSize, ArgInfo("histSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ranges"), ranges, ArgInfo("ranges", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "accumulate"), accumulate, ArgInfo("accumulate", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calcHist(images, channels, mask, hist, histSize, ranges, accumulate), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, hist);
        }
    }

    }
    

    {
    vector_UMat images;
    vector_int channels;
    UMat mask;
    UMat hist;
    vector_int histSize;
    vector_float ranges;
    bool accumulate=false;

    // const char* keywords[] = { "images", "channels", "mask", "histSize", "ranges", "hist", "accumulate", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "images"), images, ArgInfo("images", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "channels"), channels, ArgInfo("channels", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hist"), hist, ArgInfo("hist", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "histSize"), histSize, ArgInfo("histSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ranges"), ranges, ArgInfo("ranges", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "accumulate"), accumulate, ArgInfo("accumulate", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calcHist(images, channels, mask, hist, histSize, ranges, accumulate), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, hist);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_calcOpticalFlowFarneback(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat prev;
    Mat next;
    Mat flow;
    double pyr_scale=0;
    int levels=0;
    int winsize=0;
    int iterations=0;
    int poly_n=0;
    double poly_sigma=0;
    int flags=0;

    // const char* keywords[] = { "prev", "next", "flow", "pyr_scale", "levels", "winsize", "iterations", "poly_n", "poly_sigma", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "prev"), prev, ArgInfo("prev", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "next"), next, ArgInfo("next", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flow"), flow, ArgInfo("flow", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pyr_scale"), pyr_scale, ArgInfo("pyr_scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "levels"), levels, ArgInfo("levels", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winsize"), winsize, ArgInfo("winsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterations"), iterations, ArgInfo("iterations", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "poly_n"), poly_n, ArgInfo("poly_n", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "poly_sigma"), poly_sigma, ArgInfo("poly_sigma", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calcOpticalFlowFarneback(prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, flow);
        }
    }

    }
    

    {
    UMat prev;
    UMat next;
    UMat flow;
    double pyr_scale=0;
    int levels=0;
    int winsize=0;
    int iterations=0;
    int poly_n=0;
    double poly_sigma=0;
    int flags=0;

    // const char* keywords[] = { "prev", "next", "flow", "pyr_scale", "levels", "winsize", "iterations", "poly_n", "poly_sigma", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "prev"), prev, ArgInfo("prev", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "next"), next, ArgInfo("next", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flow"), flow, ArgInfo("flow", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pyr_scale"), pyr_scale, ArgInfo("pyr_scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "levels"), levels, ArgInfo("levels", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winsize"), winsize, ArgInfo("winsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterations"), iterations, ArgInfo("iterations", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "poly_n"), poly_n, ArgInfo("poly_n", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "poly_sigma"), poly_sigma, ArgInfo("poly_sigma", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calcOpticalFlowFarneback(prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, flow);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_calcOpticalFlowPyrLK(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat prevImg;
    Mat nextImg;
    Mat prevPts;
    Mat nextPts;
    Mat status;
    Mat err;
    Size winSize=Size(21,21);
    int maxLevel=3;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01);
    int flags=0;
    double minEigThreshold=1e-4;

    // const char* keywords[] = { "prevImg", "nextImg", "prevPts", "nextPts", "status", "err", "winSize", "maxLevel", "criteria", "flags", "minEigThreshold", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "prevImg"), prevImg, ArgInfo("prevImg", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nextImg"), nextImg, ArgInfo("nextImg", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "prevPts"), prevPts, ArgInfo("prevPts", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nextPts"), nextPts, ArgInfo("nextPts", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "status"), status, ArgInfo("status", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "err"), err, ArgInfo("err", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winSize"), winSize, ArgInfo("winSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxLevel"), maxLevel, ArgInfo("maxLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minEigThreshold"), minEigThreshold, ArgInfo("minEigThreshold", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calcOpticalFlowPyrLK(prevImg, nextImg, prevPts, nextPts, status, err, winSize, maxLevel, criteria, flags, minEigThreshold), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, nextPts), evision_from(env, status), evision_from(env, err));
        }
    }

    }
    

    {
    UMat prevImg;
    UMat nextImg;
    UMat prevPts;
    UMat nextPts;
    UMat status;
    UMat err;
    Size winSize=Size(21,21);
    int maxLevel=3;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01);
    int flags=0;
    double minEigThreshold=1e-4;

    // const char* keywords[] = { "prevImg", "nextImg", "prevPts", "nextPts", "status", "err", "winSize", "maxLevel", "criteria", "flags", "minEigThreshold", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "prevImg"), prevImg, ArgInfo("prevImg", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nextImg"), nextImg, ArgInfo("nextImg", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "prevPts"), prevPts, ArgInfo("prevPts", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nextPts"), nextPts, ArgInfo("nextPts", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "status"), status, ArgInfo("status", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "err"), err, ArgInfo("err", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winSize"), winSize, ArgInfo("winSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxLevel"), maxLevel, ArgInfo("maxLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minEigThreshold"), minEigThreshold, ArgInfo("minEigThreshold", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calcOpticalFlowPyrLK(prevImg, nextImg, prevPts, nextPts, status, err, winSize, maxLevel, criteria, flags, minEigThreshold), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, nextPts), evision_from(env, status), evision_from(env, err));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_calibrateCamera(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat objectPoints;
    vector_Mat imagePoints;
    Size imageSize;
    Mat cameraMatrix;
    Mat distCoeffs;
    vector_Mat rvecs;
    vector_Mat tvecs;
    int flags=0;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs, tvecs, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple5(env, evision_from(env, retval), evision_from(env, cameraMatrix), evision_from(env, distCoeffs), evision_from(env, rvecs), evision_from(env, tvecs));
        }
    }

    }
    

    {
    vector_UMat objectPoints;
    vector_UMat imagePoints;
    Size imageSize;
    UMat cameraMatrix;
    UMat distCoeffs;
    vector_UMat rvecs;
    vector_UMat tvecs;
    int flags=0;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs, tvecs, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple5(env, evision_from(env, retval), evision_from(env, cameraMatrix), evision_from(env, distCoeffs), evision_from(env, rvecs), evision_from(env, tvecs));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_calibrateCameraExtended(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat objectPoints;
    vector_Mat imagePoints;
    Size imageSize;
    Mat cameraMatrix;
    Mat distCoeffs;
    vector_Mat rvecs;
    vector_Mat tvecs;
    Mat stdDeviationsIntrinsics;
    Mat stdDeviationsExtrinsics;
    Mat perViewErrors;
    int flags=0;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "stdDeviationsIntrinsics", "stdDeviationsExtrinsics", "perViewErrors", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stdDeviationsIntrinsics"), stdDeviationsIntrinsics, ArgInfo("stdDeviationsIntrinsics", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stdDeviationsExtrinsics"), stdDeviationsExtrinsics, ArgInfo("stdDeviationsExtrinsics", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "perViewErrors"), perViewErrors, ArgInfo("perViewErrors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs, tvecs, stdDeviationsIntrinsics, stdDeviationsExtrinsics, perViewErrors, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple8(env, evision_from(env, retval), evision_from(env, cameraMatrix), evision_from(env, distCoeffs), evision_from(env, rvecs), evision_from(env, tvecs), evision_from(env, stdDeviationsIntrinsics), evision_from(env, stdDeviationsExtrinsics), evision_from(env, perViewErrors));
        }
    }

    }
    

    {
    vector_UMat objectPoints;
    vector_UMat imagePoints;
    Size imageSize;
    UMat cameraMatrix;
    UMat distCoeffs;
    vector_UMat rvecs;
    vector_UMat tvecs;
    UMat stdDeviationsIntrinsics;
    UMat stdDeviationsExtrinsics;
    UMat perViewErrors;
    int flags=0;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "stdDeviationsIntrinsics", "stdDeviationsExtrinsics", "perViewErrors", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stdDeviationsIntrinsics"), stdDeviationsIntrinsics, ArgInfo("stdDeviationsIntrinsics", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stdDeviationsExtrinsics"), stdDeviationsExtrinsics, ArgInfo("stdDeviationsExtrinsics", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "perViewErrors"), perViewErrors, ArgInfo("perViewErrors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs, tvecs, stdDeviationsIntrinsics, stdDeviationsExtrinsics, perViewErrors, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple8(env, evision_from(env, retval), evision_from(env, cameraMatrix), evision_from(env, distCoeffs), evision_from(env, rvecs), evision_from(env, tvecs), evision_from(env, stdDeviationsIntrinsics), evision_from(env, stdDeviationsExtrinsics), evision_from(env, perViewErrors));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_calibrateCameraRO(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat objectPoints;
    vector_Mat imagePoints;
    Size imageSize;
    int iFixedPoint=0;
    Mat cameraMatrix;
    Mat distCoeffs;
    vector_Mat rvecs;
    vector_Mat tvecs;
    Mat newObjPoints;
    int flags=0;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "iFixedPoint", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "newObjPoints", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iFixedPoint"), iFixedPoint, ArgInfo("iFixedPoint", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newObjPoints"), newObjPoints, ArgInfo("newObjPoints", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::calibrateCameraRO(objectPoints, imagePoints, imageSize, iFixedPoint, cameraMatrix, distCoeffs, rvecs, tvecs, newObjPoints, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple6(env, evision_from(env, retval), evision_from(env, cameraMatrix), evision_from(env, distCoeffs), evision_from(env, rvecs), evision_from(env, tvecs), evision_from(env, newObjPoints));
        }
    }

    }
    

    {
    vector_UMat objectPoints;
    vector_UMat imagePoints;
    Size imageSize;
    int iFixedPoint=0;
    UMat cameraMatrix;
    UMat distCoeffs;
    vector_UMat rvecs;
    vector_UMat tvecs;
    UMat newObjPoints;
    int flags=0;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "iFixedPoint", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "newObjPoints", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iFixedPoint"), iFixedPoint, ArgInfo("iFixedPoint", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newObjPoints"), newObjPoints, ArgInfo("newObjPoints", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::calibrateCameraRO(objectPoints, imagePoints, imageSize, iFixedPoint, cameraMatrix, distCoeffs, rvecs, tvecs, newObjPoints, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple6(env, evision_from(env, retval), evision_from(env, cameraMatrix), evision_from(env, distCoeffs), evision_from(env, rvecs), evision_from(env, tvecs), evision_from(env, newObjPoints));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_calibrateCameraROExtended(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat objectPoints;
    vector_Mat imagePoints;
    Size imageSize;
    int iFixedPoint=0;
    Mat cameraMatrix;
    Mat distCoeffs;
    vector_Mat rvecs;
    vector_Mat tvecs;
    Mat newObjPoints;
    Mat stdDeviationsIntrinsics;
    Mat stdDeviationsExtrinsics;
    Mat stdDeviationsObjPoints;
    Mat perViewErrors;
    int flags=0;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "iFixedPoint", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "newObjPoints", "stdDeviationsIntrinsics", "stdDeviationsExtrinsics", "stdDeviationsObjPoints", "perViewErrors", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iFixedPoint"), iFixedPoint, ArgInfo("iFixedPoint", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newObjPoints"), newObjPoints, ArgInfo("newObjPoints", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stdDeviationsIntrinsics"), stdDeviationsIntrinsics, ArgInfo("stdDeviationsIntrinsics", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stdDeviationsExtrinsics"), stdDeviationsExtrinsics, ArgInfo("stdDeviationsExtrinsics", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stdDeviationsObjPoints"), stdDeviationsObjPoints, ArgInfo("stdDeviationsObjPoints", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "perViewErrors"), perViewErrors, ArgInfo("perViewErrors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::calibrateCameraRO(objectPoints, imagePoints, imageSize, iFixedPoint, cameraMatrix, distCoeffs, rvecs, tvecs, newObjPoints, stdDeviationsIntrinsics, stdDeviationsExtrinsics, stdDeviationsObjPoints, perViewErrors, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            ERL_NIF_TERM arr[] = {evision_from(env, retval),
                evision_from(env, cameraMatrix),
                evision_from(env, distCoeffs),
                evision_from(env, rvecs),
                evision_from(env, tvecs),
                evision_from(env, newObjPoints),
                evision_from(env, stdDeviationsIntrinsics),
                evision_from(env, stdDeviationsExtrinsics),
                evision_from(env, stdDeviationsObjPoints),
                evision_from(env, perViewErrors)};
            return enif_make_tuple_from_array(env, arr, 10);
        }
    }

    }
    

    {
    vector_UMat objectPoints;
    vector_UMat imagePoints;
    Size imageSize;
    int iFixedPoint=0;
    UMat cameraMatrix;
    UMat distCoeffs;
    vector_UMat rvecs;
    vector_UMat tvecs;
    UMat newObjPoints;
    UMat stdDeviationsIntrinsics;
    UMat stdDeviationsExtrinsics;
    UMat stdDeviationsObjPoints;
    UMat perViewErrors;
    int flags=0;
    TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "iFixedPoint", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "newObjPoints", "stdDeviationsIntrinsics", "stdDeviationsExtrinsics", "stdDeviationsObjPoints", "perViewErrors", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iFixedPoint"), iFixedPoint, ArgInfo("iFixedPoint", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newObjPoints"), newObjPoints, ArgInfo("newObjPoints", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stdDeviationsIntrinsics"), stdDeviationsIntrinsics, ArgInfo("stdDeviationsIntrinsics", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stdDeviationsExtrinsics"), stdDeviationsExtrinsics, ArgInfo("stdDeviationsExtrinsics", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stdDeviationsObjPoints"), stdDeviationsObjPoints, ArgInfo("stdDeviationsObjPoints", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "perViewErrors"), perViewErrors, ArgInfo("perViewErrors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::calibrateCameraRO(objectPoints, imagePoints, imageSize, iFixedPoint, cameraMatrix, distCoeffs, rvecs, tvecs, newObjPoints, stdDeviationsIntrinsics, stdDeviationsExtrinsics, stdDeviationsObjPoints, perViewErrors, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            ERL_NIF_TERM arr[] = {evision_from(env, retval),
                evision_from(env, cameraMatrix),
                evision_from(env, distCoeffs),
                evision_from(env, rvecs),
                evision_from(env, tvecs),
                evision_from(env, newObjPoints),
                evision_from(env, stdDeviationsIntrinsics),
                evision_from(env, stdDeviationsExtrinsics),
                evision_from(env, stdDeviationsObjPoints),
                evision_from(env, perViewErrors)};
            return enif_make_tuple_from_array(env, arr, 10);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_calibrateHandEye(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat R_gripper2base;
    vector_Mat t_gripper2base;
    vector_Mat R_target2cam;
    vector_Mat t_target2cam;
    Mat R_cam2gripper;
    Mat t_cam2gripper;
    std::underlying_type_t<HandEyeCalibrationMethod> method=static_cast<std::underlying_type_t<HandEyeCalibrationMethod>>(CALIB_HAND_EYE_TSAI);

    // const char* keywords[] = { "R_gripper2base", "t_gripper2base", "R_target2cam", "t_target2cam", "R_cam2gripper", "t_cam2gripper", "method", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "r_gripper2base"), R_gripper2base, ArgInfo("R_gripper2base", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_gripper2base"), t_gripper2base, ArgInfo("t_gripper2base", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r_target2cam"), R_target2cam, ArgInfo("R_target2cam", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_target2cam"), t_target2cam, ArgInfo("t_target2cam", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r_cam2gripper"), R_cam2gripper, ArgInfo("R_cam2gripper", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_cam2gripper"), t_cam2gripper, ArgInfo("t_cam2gripper", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calibrateHandEye(R_gripper2base, t_gripper2base, R_target2cam, t_target2cam, R_cam2gripper, t_cam2gripper, static_cast<HandEyeCalibrationMethod>(method)), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, R_cam2gripper), evision_from(env, t_cam2gripper));
        }
    }

    }
    

    {
    vector_UMat R_gripper2base;
    vector_UMat t_gripper2base;
    vector_UMat R_target2cam;
    vector_UMat t_target2cam;
    UMat R_cam2gripper;
    UMat t_cam2gripper;
    std::underlying_type_t<HandEyeCalibrationMethod> method=static_cast<std::underlying_type_t<HandEyeCalibrationMethod>>(CALIB_HAND_EYE_TSAI);

    // const char* keywords[] = { "R_gripper2base", "t_gripper2base", "R_target2cam", "t_target2cam", "R_cam2gripper", "t_cam2gripper", "method", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "r_gripper2base"), R_gripper2base, ArgInfo("R_gripper2base", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_gripper2base"), t_gripper2base, ArgInfo("t_gripper2base", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r_target2cam"), R_target2cam, ArgInfo("R_target2cam", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_target2cam"), t_target2cam, ArgInfo("t_target2cam", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r_cam2gripper"), R_cam2gripper, ArgInfo("R_cam2gripper", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_cam2gripper"), t_cam2gripper, ArgInfo("t_cam2gripper", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calibrateHandEye(R_gripper2base, t_gripper2base, R_target2cam, t_target2cam, R_cam2gripper, t_cam2gripper, static_cast<HandEyeCalibrationMethod>(method)), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, R_cam2gripper), evision_from(env, t_cam2gripper));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_calibrateRobotWorldHandEye(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat R_world2cam;
    vector_Mat t_world2cam;
    vector_Mat R_base2gripper;
    vector_Mat t_base2gripper;
    Mat R_base2world;
    Mat t_base2world;
    Mat R_gripper2cam;
    Mat t_gripper2cam;
    std::underlying_type_t<RobotWorldHandEyeCalibrationMethod> method=static_cast<std::underlying_type_t<RobotWorldHandEyeCalibrationMethod>>(CALIB_ROBOT_WORLD_HAND_EYE_SHAH);

    // const char* keywords[] = { "R_world2cam", "t_world2cam", "R_base2gripper", "t_base2gripper", "R_base2world", "t_base2world", "R_gripper2cam", "t_gripper2cam", "method", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "r_world2cam"), R_world2cam, ArgInfo("R_world2cam", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_world2cam"), t_world2cam, ArgInfo("t_world2cam", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r_base2gripper"), R_base2gripper, ArgInfo("R_base2gripper", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_base2gripper"), t_base2gripper, ArgInfo("t_base2gripper", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r_base2world"), R_base2world, ArgInfo("R_base2world", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_base2world"), t_base2world, ArgInfo("t_base2world", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r_gripper2cam"), R_gripper2cam, ArgInfo("R_gripper2cam", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_gripper2cam"), t_gripper2cam, ArgInfo("t_gripper2cam", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calibrateRobotWorldHandEye(R_world2cam, t_world2cam, R_base2gripper, t_base2gripper, R_base2world, t_base2world, R_gripper2cam, t_gripper2cam, static_cast<RobotWorldHandEyeCalibrationMethod>(method)), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, R_base2world), evision_from(env, t_base2world), evision_from(env, R_gripper2cam), evision_from(env, t_gripper2cam));
        }
    }

    }
    

    {
    vector_UMat R_world2cam;
    vector_UMat t_world2cam;
    vector_UMat R_base2gripper;
    vector_UMat t_base2gripper;
    UMat R_base2world;
    UMat t_base2world;
    UMat R_gripper2cam;
    UMat t_gripper2cam;
    std::underlying_type_t<RobotWorldHandEyeCalibrationMethod> method=static_cast<std::underlying_type_t<RobotWorldHandEyeCalibrationMethod>>(CALIB_ROBOT_WORLD_HAND_EYE_SHAH);

    // const char* keywords[] = { "R_world2cam", "t_world2cam", "R_base2gripper", "t_base2gripper", "R_base2world", "t_base2world", "R_gripper2cam", "t_gripper2cam", "method", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "r_world2cam"), R_world2cam, ArgInfo("R_world2cam", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_world2cam"), t_world2cam, ArgInfo("t_world2cam", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r_base2gripper"), R_base2gripper, ArgInfo("R_base2gripper", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_base2gripper"), t_base2gripper, ArgInfo("t_base2gripper", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r_base2world"), R_base2world, ArgInfo("R_base2world", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_base2world"), t_base2world, ArgInfo("t_base2world", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r_gripper2cam"), R_gripper2cam, ArgInfo("R_gripper2cam", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t_gripper2cam"), t_gripper2cam, ArgInfo("t_gripper2cam", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calibrateRobotWorldHandEye(R_world2cam, t_world2cam, R_base2gripper, t_base2gripper, R_base2world, t_base2world, R_gripper2cam, t_gripper2cam, static_cast<RobotWorldHandEyeCalibrationMethod>(method)), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, R_base2world), evision_from(env, t_base2world), evision_from(env, R_gripper2cam), evision_from(env, t_gripper2cam));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_calibrationMatrixValues(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat cameraMatrix;
    Size imageSize;
    double apertureWidth=0;
    double apertureHeight=0;
    double fovx;
    double fovy;
    double focalLength;
    Point2d principalPoint;
    double aspectRatio;

    // const char* keywords[] = { "cameraMatrix", "imageSize", "apertureWidth", "apertureHeight", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "apertureWidth"), apertureWidth, ArgInfo("apertureWidth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "apertureHeight"), apertureHeight, ArgInfo("apertureHeight", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calibrationMatrixValues(cameraMatrix, imageSize, apertureWidth, apertureHeight, fovx, fovy, focalLength, principalPoint, aspectRatio), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple5(env, evision_from(env, fovx), evision_from(env, fovy), evision_from(env, focalLength), evision_from(env, principalPoint), evision_from(env, aspectRatio));
        }
    }

    }
    

    {
    UMat cameraMatrix;
    Size imageSize;
    double apertureWidth=0;
    double apertureHeight=0;
    double fovx;
    double fovy;
    double focalLength;
    Point2d principalPoint;
    double aspectRatio;

    // const char* keywords[] = { "cameraMatrix", "imageSize", "apertureWidth", "apertureHeight", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "apertureWidth"), apertureWidth, ArgInfo("apertureWidth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "apertureHeight"), apertureHeight, ArgInfo("apertureHeight", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::calibrationMatrixValues(cameraMatrix, imageSize, apertureWidth, apertureHeight, fovx, fovy, focalLength, principalPoint, aspectRatio), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple5(env, evision_from(env, fovx), evision_from(env, fovy), evision_from(env, focalLength), evision_from(env, principalPoint), evision_from(env, aspectRatio));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cartToPolar(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat x;
    Mat y;
    Mat magnitude;
    Mat angle;
    bool angleInDegrees=false;

    // const char* keywords[] = { "x", "y", "magnitude", "angle", "angleInDegrees", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "x"), x, ArgInfo("x", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "y"), y, ArgInfo("y", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "magnitude"), magnitude, ArgInfo("magnitude", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angle"), angle, ArgInfo("angle", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angleInDegrees"), angleInDegrees, ArgInfo("angleInDegrees", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cartToPolar(x, y, magnitude, angle, angleInDegrees), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, magnitude), evision_from(env, angle));
        }
    }

    }
    

    {
    UMat x;
    UMat y;
    UMat magnitude;
    UMat angle;
    bool angleInDegrees=false;

    // const char* keywords[] = { "x", "y", "magnitude", "angle", "angleInDegrees", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "x"), x, ArgInfo("x", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "y"), y, ArgInfo("y", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "magnitude"), magnitude, ArgInfo("magnitude", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angle"), angle, ArgInfo("angle", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angleInDegrees"), angleInDegrees, ArgInfo("angleInDegrees", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cartToPolar(x, y, magnitude, angle, angleInDegrees), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, magnitude), evision_from(env, angle));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_checkChessboard(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    Size size;
    bool retval;

    // const char* keywords[] = { "img", "size", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::checkChessboard(img, size), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat img;
    Size size;
    bool retval;

    // const char* keywords[] = { "img", "size", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::checkChessboard(img, size), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_checkHardwareSupport(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int feature=0;
    bool retval;

    // const char* keywords[] = { "feature", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "feature"), feature, ArgInfo("feature", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::checkHardwareSupport(feature), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_checkRange(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat a;
    bool quiet=true;
    Point pos;
    double minVal=-DBL_MAX;
    double maxVal=DBL_MAX;
    bool retval;

    // const char* keywords[] = { "a", "quiet", "minVal", "maxVal", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "a"), a, ArgInfo("a", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "quiet"), quiet, ArgInfo("quiet", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minVal"), minVal, ArgInfo("minVal", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxVal"), maxVal, ArgInfo("maxVal", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::checkRange(a, quiet, &pos, minVal, maxVal), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, pos);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat a;
    bool quiet=true;
    Point pos;
    double minVal=-DBL_MAX;
    double maxVal=DBL_MAX;
    bool retval;

    // const char* keywords[] = { "a", "quiet", "minVal", "maxVal", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "a"), a, ArgInfo("a", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "quiet"), quiet, ArgInfo("quiet", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minVal"), minVal, ArgInfo("minVal", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxVal"), maxVal, ArgInfo("maxVal", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::checkRange(a, quiet, &pos, minVal, maxVal), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, pos);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_circle(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    Point center;
    int radius=0;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "center", "radius", "color", "thickness", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "radius"), radius, ArgInfo("radius", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::circle(img, center, radius, color, thickness, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    UMat img;
    Point center;
    int radius=0;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "center", "radius", "color", "thickness", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "radius"), radius, ArgInfo("radius", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::circle(img, center, radius, color, thickness, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_clipLine(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Rect imgRect;
    Point pt1;
    Point pt2;
    bool retval;

    // const char* keywords[] = { "imgRect", "pt1", "pt2", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "imgRect"), imgRect, ArgInfo("imgRect", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt1"), pt1, ArgInfo("pt1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt2"), pt2, ArgInfo("pt2", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::clipLine(imgRect, pt1, pt2), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_2_to_10_tuple_except_bool
                return enif_make_tuple2(env, evision_from(env, pt1), evision_from(env, pt2));
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_colorChange(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat mask;
    Mat dst;
    float red_mul=1.0f;
    float green_mul=1.0f;
    float blue_mul=1.0f;

    // const char* keywords[] = { "src", "mask", "dst", "red_mul", "green_mul", "blue_mul", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "red_mul"), red_mul, ArgInfo("red_mul", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "green_mul"), green_mul, ArgInfo("green_mul", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blue_mul"), blue_mul, ArgInfo("blue_mul", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::colorChange(src, mask, dst, red_mul, green_mul, blue_mul), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat mask;
    UMat dst;
    float red_mul=1.0f;
    float green_mul=1.0f;
    float blue_mul=1.0f;

    // const char* keywords[] = { "src", "mask", "dst", "red_mul", "green_mul", "blue_mul", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "red_mul"), red_mul, ArgInfo("red_mul", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "green_mul"), green_mul, ArgInfo("green_mul", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blue_mul"), blue_mul, ArgInfo("blue_mul", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::colorChange(src, mask, dst, red_mul, green_mul, blue_mul), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_compare(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;
    int cmpop=0;

    // const char* keywords[] = { "src1", "src2", "cmpop", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cmpop"), cmpop, ArgInfo("cmpop", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::compare(src1, src2, dst, cmpop), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;
    int cmpop=0;

    // const char* keywords[] = { "src1", "src2", "cmpop", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cmpop"), cmpop, ArgInfo("cmpop", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::compare(src1, src2, dst, cmpop), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_compareHist(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat H1;
    Mat H2;
    int method=0;
    double retval;

    // const char* keywords[] = { "H1", "H2", "method", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "h1"), H1, ArgInfo("H1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h2"), H2, ArgInfo("H2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::compareHist(H1, H2, method), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat H1;
    UMat H2;
    int method=0;
    double retval;

    // const char* keywords[] = { "H1", "H2", "method", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "h1"), H1, ArgInfo("H1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h2"), H2, ArgInfo("H2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::compareHist(H1, H2, method), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_completeSymm(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat m;
    bool lowerToUpper=false;

    // const char* keywords[] = { "m", "lowerToUpper", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), m, ArgInfo("m", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lowerToUpper"), lowerToUpper, ArgInfo("lowerToUpper", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::completeSymm(m, lowerToUpper), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, m);
        }
    }

    }
    

    {
    UMat m;
    bool lowerToUpper=false;

    // const char* keywords[] = { "m", "lowerToUpper", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), m, ArgInfo("m", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lowerToUpper"), lowerToUpper, ArgInfo("lowerToUpper", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::completeSymm(m, lowerToUpper), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, m);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_composeRT(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat rvec1;
    Mat tvec1;
    Mat rvec2;
    Mat tvec2;
    Mat rvec3;
    Mat tvec3;
    Mat dr3dr1;
    Mat dr3dt1;
    Mat dr3dr2;
    Mat dr3dt2;
    Mat dt3dr1;
    Mat dt3dt1;
    Mat dt3dr2;
    Mat dt3dt2;

    // const char* keywords[] = { "rvec1", "tvec1", "rvec2", "tvec2", "rvec3", "tvec3", "dr3dr1", "dr3dt1", "dr3dr2", "dr3dt2", "dt3dr1", "dt3dt1", "dt3dr2", "dt3dt2", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec1"), rvec1, ArgInfo("rvec1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec1"), tvec1, ArgInfo("tvec1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec2"), rvec2, ArgInfo("rvec2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec2"), tvec2, ArgInfo("tvec2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec3"), rvec3, ArgInfo("rvec3", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec3"), tvec3, ArgInfo("tvec3", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dr3dr1"), dr3dr1, ArgInfo("dr3dr1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dr3dt1"), dr3dt1, ArgInfo("dr3dt1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dr3dr2"), dr3dr2, ArgInfo("dr3dr2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dr3dt2"), dr3dt2, ArgInfo("dr3dt2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dt3dr1"), dt3dr1, ArgInfo("dt3dr1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dt3dt1"), dt3dt1, ArgInfo("dt3dt1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dt3dr2"), dt3dr2, ArgInfo("dt3dr2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dt3dt2"), dt3dt2, ArgInfo("dt3dt2", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::composeRT(rvec1, tvec1, rvec2, tvec2, rvec3, tvec3, dr3dr1, dr3dt1, dr3dr2, dr3dt2, dt3dr1, dt3dt1, dt3dr2, dt3dt2), env, error_flag, error_term);
        if (!error_flag) {
            ERL_NIF_TERM arr[] = {evision_from(env, rvec3),
                evision_from(env, tvec3),
                evision_from(env, dr3dr1),
                evision_from(env, dr3dt1),
                evision_from(env, dr3dr2),
                evision_from(env, dr3dt2),
                evision_from(env, dt3dr1),
                evision_from(env, dt3dt1),
                evision_from(env, dt3dr2),
                evision_from(env, dt3dt2)};
            return enif_make_tuple_from_array(env, arr, 10);
        }
    }

    }
    

    {
    UMat rvec1;
    UMat tvec1;
    UMat rvec2;
    UMat tvec2;
    UMat rvec3;
    UMat tvec3;
    UMat dr3dr1;
    UMat dr3dt1;
    UMat dr3dr2;
    UMat dr3dt2;
    UMat dt3dr1;
    UMat dt3dt1;
    UMat dt3dr2;
    UMat dt3dt2;

    // const char* keywords[] = { "rvec1", "tvec1", "rvec2", "tvec2", "rvec3", "tvec3", "dr3dr1", "dr3dt1", "dr3dr2", "dr3dt2", "dt3dr1", "dt3dt1", "dt3dr2", "dt3dt2", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec1"), rvec1, ArgInfo("rvec1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec1"), tvec1, ArgInfo("tvec1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec2"), rvec2, ArgInfo("rvec2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec2"), tvec2, ArgInfo("tvec2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec3"), rvec3, ArgInfo("rvec3", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec3"), tvec3, ArgInfo("tvec3", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dr3dr1"), dr3dr1, ArgInfo("dr3dr1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dr3dt1"), dr3dt1, ArgInfo("dr3dt1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dr3dr2"), dr3dr2, ArgInfo("dr3dr2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dr3dt2"), dr3dt2, ArgInfo("dr3dt2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dt3dr1"), dt3dr1, ArgInfo("dt3dr1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dt3dt1"), dt3dt1, ArgInfo("dt3dt1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dt3dr2"), dt3dr2, ArgInfo("dt3dr2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dt3dt2"), dt3dt2, ArgInfo("dt3dt2", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::composeRT(rvec1, tvec1, rvec2, tvec2, rvec3, tvec3, dr3dr1, dr3dt1, dr3dr2, dr3dt2, dt3dr1, dt3dt1, dt3dr2, dt3dt2), env, error_flag, error_term);
        if (!error_flag) {
            ERL_NIF_TERM arr[] = {evision_from(env, rvec3),
                evision_from(env, tvec3),
                evision_from(env, dr3dr1),
                evision_from(env, dr3dt1),
                evision_from(env, dr3dr2),
                evision_from(env, dr3dt2),
                evision_from(env, dt3dr1),
                evision_from(env, dt3dt1),
                evision_from(env, dt3dr2),
                evision_from(env, dt3dt2)};
            return enif_make_tuple_from_array(env, arr, 10);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_computeCorrespondEpilines(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat points;
    int whichImage=0;
    Mat F;
    Mat lines;

    // const char* keywords[] = { "points", "whichImage", "F", "lines", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "whichImage"), whichImage, ArgInfo("whichImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f"), F, ArgInfo("F", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lines"), lines, ArgInfo("lines", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::computeCorrespondEpilines(points, whichImage, F, lines), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, lines);
        }
    }

    }
    

    {
    UMat points;
    int whichImage=0;
    UMat F;
    UMat lines;

    // const char* keywords[] = { "points", "whichImage", "F", "lines", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "whichImage"), whichImage, ArgInfo("whichImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f"), F, ArgInfo("F", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lines"), lines, ArgInfo("lines", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::computeCorrespondEpilines(points, whichImage, F, lines), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, lines);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_computeECC(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat templateImage;
    Mat inputImage;
    Mat inputMask;
    double retval;

    // const char* keywords[] = { "templateImage", "inputImage", "inputMask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "templateImage"), templateImage, ArgInfo("templateImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inputImage"), inputImage, ArgInfo("inputImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inputMask"), inputMask, ArgInfo("inputMask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::computeECC(templateImage, inputImage, inputMask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat templateImage;
    UMat inputImage;
    UMat inputMask;
    double retval;

    // const char* keywords[] = { "templateImage", "inputImage", "inputMask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "templateImage"), templateImage, ArgInfo("templateImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inputImage"), inputImage, ArgInfo("inputImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inputMask"), inputMask, ArgInfo("inputMask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::computeECC(templateImage, inputImage, inputMask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_connectedComponents(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat labels;
    int connectivity=8;
    int ltype=CV_32S;
    int retval;

    // const char* keywords[] = { "image", "labels", "connectivity", "ltype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "labels"), labels, ArgInfo("labels", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "connectivity"), connectivity, ArgInfo("connectivity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ltype"), ltype, ArgInfo("ltype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::connectedComponents(image, labels, connectivity, ltype), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, labels));
        }
    }

    }
    

    {
    UMat image;
    UMat labels;
    int connectivity=8;
    int ltype=CV_32S;
    int retval;

    // const char* keywords[] = { "image", "labels", "connectivity", "ltype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "labels"), labels, ArgInfo("labels", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "connectivity"), connectivity, ArgInfo("connectivity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ltype"), ltype, ArgInfo("ltype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::connectedComponents(image, labels, connectivity, ltype), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, labels));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_connectedComponentsWithAlgorithm(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat labels;
    int connectivity=0;
    int ltype=0;
    int ccltype=0;
    int retval;

    // const char* keywords[] = { "image", "connectivity", "ltype", "ccltype", "labels", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "labels"), labels, ArgInfo("labels", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "connectivity"), connectivity, ArgInfo("connectivity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ltype"), ltype, ArgInfo("ltype", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ccltype"), ccltype, ArgInfo("ccltype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::connectedComponents(image, labels, connectivity, ltype, ccltype), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, labels));
        }
    }

    }
    

    {
    UMat image;
    UMat labels;
    int connectivity=0;
    int ltype=0;
    int ccltype=0;
    int retval;

    // const char* keywords[] = { "image", "connectivity", "ltype", "ccltype", "labels", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "labels"), labels, ArgInfo("labels", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "connectivity"), connectivity, ArgInfo("connectivity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ltype"), ltype, ArgInfo("ltype", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ccltype"), ccltype, ArgInfo("ccltype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::connectedComponents(image, labels, connectivity, ltype, ccltype), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, labels));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_connectedComponentsWithStats(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat labels;
    Mat stats;
    Mat centroids;
    int connectivity=8;
    int ltype=CV_32S;
    int retval;

    // const char* keywords[] = { "image", "labels", "stats", "centroids", "connectivity", "ltype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "labels"), labels, ArgInfo("labels", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stats"), stats, ArgInfo("stats", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centroids"), centroids, ArgInfo("centroids", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "connectivity"), connectivity, ArgInfo("connectivity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ltype"), ltype, ArgInfo("ltype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::connectedComponentsWithStats(image, labels, stats, centroids, connectivity, ltype), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, labels), evision_from(env, stats), evision_from(env, centroids));
        }
    }

    }
    

    {
    UMat image;
    UMat labels;
    UMat stats;
    UMat centroids;
    int connectivity=8;
    int ltype=CV_32S;
    int retval;

    // const char* keywords[] = { "image", "labels", "stats", "centroids", "connectivity", "ltype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "labels"), labels, ArgInfo("labels", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stats"), stats, ArgInfo("stats", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centroids"), centroids, ArgInfo("centroids", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "connectivity"), connectivity, ArgInfo("connectivity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ltype"), ltype, ArgInfo("ltype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::connectedComponentsWithStats(image, labels, stats, centroids, connectivity, ltype), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, labels), evision_from(env, stats), evision_from(env, centroids));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_connectedComponentsWithStatsWithAlgorithm(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat labels;
    Mat stats;
    Mat centroids;
    int connectivity=0;
    int ltype=0;
    int ccltype=0;
    int retval;

    // const char* keywords[] = { "image", "connectivity", "ltype", "ccltype", "labels", "stats", "centroids", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "labels"), labels, ArgInfo("labels", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stats"), stats, ArgInfo("stats", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centroids"), centroids, ArgInfo("centroids", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "connectivity"), connectivity, ArgInfo("connectivity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ltype"), ltype, ArgInfo("ltype", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ccltype"), ccltype, ArgInfo("ccltype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::connectedComponentsWithStats(image, labels, stats, centroids, connectivity, ltype, ccltype), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, labels), evision_from(env, stats), evision_from(env, centroids));
        }
    }

    }
    

    {
    UMat image;
    UMat labels;
    UMat stats;
    UMat centroids;
    int connectivity=0;
    int ltype=0;
    int ccltype=0;
    int retval;

    // const char* keywords[] = { "image", "connectivity", "ltype", "ccltype", "labels", "stats", "centroids", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "labels"), labels, ArgInfo("labels", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stats"), stats, ArgInfo("stats", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centroids"), centroids, ArgInfo("centroids", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "connectivity"), connectivity, ArgInfo("connectivity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ltype"), ltype, ArgInfo("ltype", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ccltype"), ccltype, ArgInfo("ccltype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::connectedComponentsWithStats(image, labels, stats, centroids, connectivity, ltype, ccltype), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, labels), evision_from(env, stats), evision_from(env, centroids));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_contourArea(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat contour;
    bool oriented=false;
    double retval;

    // const char* keywords[] = { "contour", "oriented", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "contour"), contour, ArgInfo("contour", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "oriented"), oriented, ArgInfo("oriented", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::contourArea(contour, oriented), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat contour;
    bool oriented=false;
    double retval;

    // const char* keywords[] = { "contour", "oriented", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "contour"), contour, ArgInfo("contour", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "oriented"), oriented, ArgInfo("oriented", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::contourArea(contour, oriented), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_convertFp16(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convertFp16(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convertFp16(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_convertMaps(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat map1;
    Mat map2;
    Mat dstmap1;
    Mat dstmap2;
    int dstmap1type=0;
    bool nninterpolation=false;

    // const char* keywords[] = { "map1", "map2", "dstmap1type", "dstmap1", "dstmap2", "nninterpolation", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "map1"), map1, ArgInfo("map1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map2"), map2, ArgInfo("map2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstmap1"), dstmap1, ArgInfo("dstmap1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstmap2"), dstmap2, ArgInfo("dstmap2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstmap1type"), dstmap1type, ArgInfo("dstmap1type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nninterpolation"), nninterpolation, ArgInfo("nninterpolation", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convertMaps(map1, map2, dstmap1, dstmap2, dstmap1type, nninterpolation), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dstmap1), evision_from(env, dstmap2));
        }
    }

    }
    

    {
    UMat map1;
    UMat map2;
    UMat dstmap1;
    UMat dstmap2;
    int dstmap1type=0;
    bool nninterpolation=false;

    // const char* keywords[] = { "map1", "map2", "dstmap1type", "dstmap1", "dstmap2", "nninterpolation", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "map1"), map1, ArgInfo("map1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map2"), map2, ArgInfo("map2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstmap1"), dstmap1, ArgInfo("dstmap1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstmap2"), dstmap2, ArgInfo("dstmap2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstmap1type"), dstmap1type, ArgInfo("dstmap1type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nninterpolation"), nninterpolation, ArgInfo("nninterpolation", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convertMaps(map1, map2, dstmap1, dstmap2, dstmap1type, nninterpolation), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dstmap1), evision_from(env, dstmap2));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_convertPointsFromHomogeneous(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convertPointsFromHomogeneous(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convertPointsFromHomogeneous(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_convertPointsToHomogeneous(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convertPointsToHomogeneous(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convertPointsToHomogeneous(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_convertScaleAbs(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    double alpha=1;
    double beta=0;

    // const char* keywords[] = { "src", "dst", "alpha", "beta", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "beta"), beta, ArgInfo("beta", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convertScaleAbs(src, dst, alpha, beta), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    double alpha=1;
    double beta=0;

    // const char* keywords[] = { "src", "dst", "alpha", "beta", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "beta"), beta, ArgInfo("beta", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convertScaleAbs(src, dst, alpha, beta), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_convexHull(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat points;
    Mat hull;
    bool clockwise=false;
    bool returnPoints=true;

    // const char* keywords[] = { "points", "hull", "clockwise", "returnPoints", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hull"), hull, ArgInfo("hull", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "clockwise"), clockwise, ArgInfo("clockwise", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "returnPoints"), returnPoints, ArgInfo("returnPoints", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convexHull(points, hull, clockwise, returnPoints), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, hull);
        }
    }

    }
    

    {
    UMat points;
    UMat hull;
    bool clockwise=false;
    bool returnPoints=true;

    // const char* keywords[] = { "points", "hull", "clockwise", "returnPoints", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hull"), hull, ArgInfo("hull", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "clockwise"), clockwise, ArgInfo("clockwise", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "returnPoints"), returnPoints, ArgInfo("returnPoints", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convexHull(points, hull, clockwise, returnPoints), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, hull);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_convexityDefects(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat contour;
    Mat convexhull;
    Mat convexityDefects;

    // const char* keywords[] = { "contour", "convexhull", "convexityDefects", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "contour"), contour, ArgInfo("contour", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "convexhull"), convexhull, ArgInfo("convexhull", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "convexityDefects"), convexityDefects, ArgInfo("convexityDefects", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convexityDefects(contour, convexhull, convexityDefects), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, convexityDefects);
        }
    }

    }
    

    {
    UMat contour;
    UMat convexhull;
    UMat convexityDefects;

    // const char* keywords[] = { "contour", "convexhull", "convexityDefects", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "contour"), contour, ArgInfo("contour", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "convexhull"), convexhull, ArgInfo("convexhull", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "convexityDefects"), convexityDefects, ArgInfo("convexityDefects", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::convexityDefects(contour, convexhull, convexityDefects), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, convexityDefects);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_copyMakeBorder(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int top=0;
    int bottom=0;
    int left=0;
    int right=0;
    int borderType=0;
    Scalar value;

    // const char* keywords[] = { "src", "top", "bottom", "left", "right", "borderType", "dst", "value", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "top"), top, ArgInfo("top", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bottom"), bottom, ArgInfo("bottom", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "left"), left, ArgInfo("left", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "right"), right, ArgInfo("right", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "value"), value, ArgInfo("value", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::copyMakeBorder(src, dst, top, bottom, left, right, borderType, value), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int top=0;
    int bottom=0;
    int left=0;
    int right=0;
    int borderType=0;
    Scalar value;

    // const char* keywords[] = { "src", "top", "bottom", "left", "right", "borderType", "dst", "value", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "top"), top, ArgInfo("top", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bottom"), bottom, ArgInfo("bottom", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "left"), left, ArgInfo("left", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "right"), right, ArgInfo("right", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "value"), value, ArgInfo("value", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::copyMakeBorder(src, dst, top, bottom, left, right, borderType, value), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_copyTo(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat mask;

    // const char* keywords[] = { "src", "mask", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::copyTo(src, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat mask;

    // const char* keywords[] = { "src", "mask", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::copyTo(src, dst, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cornerEigenValsAndVecs(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int blockSize=0;
    int ksize=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "blockSize", "ksize", "dst", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cornerEigenValsAndVecs(src, dst, blockSize, ksize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int blockSize=0;
    int ksize=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "blockSize", "ksize", "dst", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cornerEigenValsAndVecs(src, dst, blockSize, ksize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cornerHarris(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int blockSize=0;
    int ksize=0;
    double k=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "blockSize", "ksize", "k", "dst", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), k, ArgInfo("k", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cornerHarris(src, dst, blockSize, ksize, k, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int blockSize=0;
    int ksize=0;
    double k=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "blockSize", "ksize", "k", "dst", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), k, ArgInfo("k", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cornerHarris(src, dst, blockSize, ksize, k, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cornerMinEigenVal(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int blockSize=0;
    int ksize=3;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "blockSize", "dst", "ksize", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cornerMinEigenVal(src, dst, blockSize, ksize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int blockSize=0;
    int ksize=3;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "blockSize", "dst", "ksize", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cornerMinEigenVal(src, dst, blockSize, ksize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cornerSubPix(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat corners;
    Size winSize;
    Size zeroZone;
    TermCriteria criteria;

    // const char* keywords[] = { "image", "corners", "winSize", "zeroZone", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winSize"), winSize, ArgInfo("winSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "zeroZone"), zeroZone, ArgInfo("zeroZone", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cornerSubPix(image, corners, winSize, zeroZone, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, corners);
        }
    }

    }
    

    {
    UMat image;
    UMat corners;
    Size winSize;
    Size zeroZone;
    TermCriteria criteria;

    // const char* keywords[] = { "image", "corners", "winSize", "zeroZone", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winSize"), winSize, ArgInfo("winSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "zeroZone"), zeroZone, ArgInfo("zeroZone", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cornerSubPix(image, corners, winSize, zeroZone, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, corners);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_correctMatches(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat F;
    Mat points1;
    Mat points2;
    Mat newPoints1;
    Mat newPoints2;

    // const char* keywords[] = { "F", "points1", "points2", "newPoints1", "newPoints2", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "f"), F, ArgInfo("F", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newPoints1"), newPoints1, ArgInfo("newPoints1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newPoints2"), newPoints2, ArgInfo("newPoints2", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::correctMatches(F, points1, points2, newPoints1, newPoints2), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, newPoints1), evision_from(env, newPoints2));
        }
    }

    }
    

    {
    UMat F;
    UMat points1;
    UMat points2;
    UMat newPoints1;
    UMat newPoints2;

    // const char* keywords[] = { "F", "points1", "points2", "newPoints1", "newPoints2", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "f"), F, ArgInfo("F", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newPoints1"), newPoints1, ArgInfo("newPoints1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newPoints2"), newPoints2, ArgInfo("newPoints2", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::correctMatches(F, points1, points2, newPoints1, newPoints2), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, newPoints1), evision_from(env, newPoints2));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_countNonZero(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    int retval;

    // const char* keywords[] = { "src", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::countNonZero(src), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat src;
    int retval;

    // const char* keywords[] = { "src", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::countNonZero(src), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createAlignMTB(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int max_bits=6;
    int exclude_range=4;
    bool cut=true;
    Ptr<AlignMTB> retval;

    // const char* keywords[] = { "max_bits", "exclude_range", "cut", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "max_bits"), max_bits, ArgInfo("max_bits", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "exclude_range"), exclude_range, ArgInfo("exclude_range", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cut"), cut, ArgInfo("cut", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createAlignMTB(max_bits, exclude_range, cut), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createBackgroundSubtractorKNN(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int history=500;
    double dist2Threshold=400.0;
    bool detectShadows=true;
    Ptr<BackgroundSubtractorKNN> retval;

    // const char* keywords[] = { "history", "dist2Threshold", "detectShadows", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "history"), history, ArgInfo("history", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dist2Threshold"), dist2Threshold, ArgInfo("dist2Threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "detectShadows"), detectShadows, ArgInfo("detectShadows", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createBackgroundSubtractorKNN(history, dist2Threshold, detectShadows), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createBackgroundSubtractorMOG2(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int history=500;
    double varThreshold=16;
    bool detectShadows=true;
    Ptr<BackgroundSubtractorMOG2> retval;

    // const char* keywords[] = { "history", "varThreshold", "detectShadows", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "history"), history, ArgInfo("history", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "varThreshold"), varThreshold, ArgInfo("varThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "detectShadows"), detectShadows, ArgInfo("detectShadows", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createBackgroundSubtractorMOG2(history, varThreshold, detectShadows), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createCLAHE(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    double clipLimit=40.0;
    Size tileGridSize=Size(8, 8);
    Ptr<CLAHE> retval;

    // const char* keywords[] = { "clipLimit", "tileGridSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "clipLimit"), clipLimit, ArgInfo("clipLimit", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tileGridSize"), tileGridSize, ArgInfo("tileGridSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createCLAHE(clipLimit, tileGridSize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createCalibrateDebevec(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int samples=70;
    float lambda=10.0f;
    bool random=false;
    Ptr<CalibrateDebevec> retval;

    // const char* keywords[] = { "samples", "lambda", "random", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "samples"), samples, ArgInfo("samples", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lambda"), lambda, ArgInfo("lambda", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "random"), random, ArgInfo("random", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createCalibrateDebevec(samples, lambda, random), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createCalibrateRobertson(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int max_iter=30;
    float threshold=0.01f;
    Ptr<CalibrateRobertson> retval;

    // const char* keywords[] = { "max_iter", "threshold", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "max_iter"), max_iter, ArgInfo("max_iter", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createCalibrateRobertson(max_iter, threshold), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createGeneralizedHoughBallard(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<GeneralizedHoughBallard> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createGeneralizedHoughBallard(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createGeneralizedHoughGuil(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<GeneralizedHoughGuil> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createGeneralizedHoughGuil(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createHanningWindow(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat dst;
    Size winSize;
    int type=0;

    // const char* keywords[] = { "winSize", "type", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winSize"), winSize, ArgInfo("winSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::createHanningWindow(dst, winSize, type), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat dst;
    Size winSize;
    int type=0;

    // const char* keywords[] = { "winSize", "type", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winSize"), winSize, ArgInfo("winSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::createHanningWindow(dst, winSize, type), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createLineSegmentDetector(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int refine=LSD_REFINE_STD;
    double scale=0.8;
    double sigma_scale=0.6;
    double quant=2.0;
    double ang_th=22.5;
    double log_eps=0;
    double density_th=0.7;
    int n_bins=1024;
    Ptr<LineSegmentDetector> retval;

    // const char* keywords[] = { "refine", "scale", "sigma_scale", "quant", "ang_th", "log_eps", "density_th", "n_bins", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "refine"), refine, ArgInfo("refine", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_scale"), sigma_scale, ArgInfo("sigma_scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "quant"), quant, ArgInfo("quant", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ang_th"), ang_th, ArgInfo("ang_th", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "log_eps"), log_eps, ArgInfo("log_eps", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "density_th"), density_th, ArgInfo("density_th", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "n_bins"), n_bins, ArgInfo("n_bins", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createLineSegmentDetector(refine, scale, sigma_scale, quant, ang_th, log_eps, density_th, n_bins), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createMergeDebevec(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<MergeDebevec> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createMergeDebevec(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createMergeMertens(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    float contrast_weight=1.0f;
    float saturation_weight=1.0f;
    float exposure_weight=0.0f;
    Ptr<MergeMertens> retval;

    // const char* keywords[] = { "contrast_weight", "saturation_weight", "exposure_weight", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "contrast_weight"), contrast_weight, ArgInfo("contrast_weight", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "saturation_weight"), saturation_weight, ArgInfo("saturation_weight", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "exposure_weight"), exposure_weight, ArgInfo("exposure_weight", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createMergeMertens(contrast_weight, saturation_weight, exposure_weight), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createMergeRobertson(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<MergeRobertson> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createMergeRobertson(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createTonemap(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    float gamma=1.0f;
    Ptr<Tonemap> retval;

    // const char* keywords[] = { "gamma", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "gamma"), gamma, ArgInfo("gamma", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createTonemap(gamma), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createTonemapDrago(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    float gamma=1.0f;
    float saturation=1.0f;
    float bias=0.85f;
    Ptr<TonemapDrago> retval;

    // const char* keywords[] = { "gamma", "saturation", "bias", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "gamma"), gamma, ArgInfo("gamma", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "saturation"), saturation, ArgInfo("saturation", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bias"), bias, ArgInfo("bias", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createTonemapDrago(gamma, saturation, bias), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createTonemapMantiuk(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    float gamma=1.0f;
    float scale=0.7f;
    float saturation=1.0f;
    Ptr<TonemapMantiuk> retval;

    // const char* keywords[] = { "gamma", "scale", "saturation", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "gamma"), gamma, ArgInfo("gamma", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "saturation"), saturation, ArgInfo("saturation", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createTonemapMantiuk(gamma, scale, saturation), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_createTonemapReinhard(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    float gamma=1.0f;
    float intensity=0.0f;
    float light_adapt=1.0f;
    float color_adapt=0.0f;
    Ptr<TonemapReinhard> retval;

    // const char* keywords[] = { "gamma", "intensity", "light_adapt", "color_adapt", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "gamma"), gamma, ArgInfo("gamma", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "intensity"), intensity, ArgInfo("intensity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "light_adapt"), light_adapt, ArgInfo("light_adapt", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color_adapt"), color_adapt, ArgInfo("color_adapt", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::createTonemapReinhard(gamma, intensity, light_adapt, color_adapt), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cubeRoot(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    float val=0.f;
    float retval;

    // const char* keywords[] = { "val", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "val"), val, ArgInfo("val", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::cubeRoot(val), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cvtColor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int code=0;
    int dstCn=0;

    // const char* keywords[] = { "src", "code", "dst", "dstCn", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "code"), code, ArgInfo("code", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstCn"), dstCn, ArgInfo("dstCn", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cvtColor(src, dst, code, dstCn), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int code=0;
    int dstCn=0;

    // const char* keywords[] = { "src", "code", "dst", "dstCn", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "code"), code, ArgInfo("code", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstCn"), dstCn, ArgInfo("dstCn", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cvtColor(src, dst, code, dstCn), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cvtColorTwoPlane(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;
    int code=0;

    // const char* keywords[] = { "src1", "src2", "code", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "code"), code, ArgInfo("code", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cvtColorTwoPlane(src1, src2, dst, code), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;
    int code=0;

    // const char* keywords[] = { "src1", "src2", "code", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "code"), code, ArgInfo("code", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cvtColorTwoPlane(src1, src2, dst, code), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dct(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int flags=0;

    // const char* keywords[] = { "src", "dst", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::dct(src, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int flags=0;

    // const char* keywords[] = { "src", "dst", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::dct(src, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_decolor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat grayscale;
    Mat color_boost;

    // const char* keywords[] = { "src", "grayscale", "color_boost", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "grayscale"), grayscale, ArgInfo("grayscale", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color_boost"), color_boost, ArgInfo("color_boost", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::decolor(src, grayscale, color_boost), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, grayscale), evision_from(env, color_boost));
        }
    }

    }
    

    {
    UMat src;
    UMat grayscale;
    UMat color_boost;

    // const char* keywords[] = { "src", "grayscale", "color_boost", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "grayscale"), grayscale, ArgInfo("grayscale", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color_boost"), color_boost, ArgInfo("color_boost", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::decolor(src, grayscale, color_boost), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, grayscale), evision_from(env, color_boost));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_decomposeEssentialMat(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat E;
    Mat R1;
    Mat R2;
    Mat t;

    // const char* keywords[] = { "E", "R1", "R2", "t", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r1"), R1, ArgInfo("R1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r2"), R2, ArgInfo("R2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), t, ArgInfo("t", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::decomposeEssentialMat(E, R1, R2, t), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, R1), evision_from(env, R2), evision_from(env, t));
        }
    }

    }
    

    {
    UMat E;
    UMat R1;
    UMat R2;
    UMat t;

    // const char* keywords[] = { "E", "R1", "R2", "t", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r1"), R1, ArgInfo("R1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r2"), R2, ArgInfo("R2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), t, ArgInfo("t", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::decomposeEssentialMat(E, R1, R2, t), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, R1), evision_from(env, R2), evision_from(env, t));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_decomposeHomographyMat(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat H;
    Mat K;
    vector_Mat rotations;
    vector_Mat translations;
    vector_Mat normals;
    int retval;

    // const char* keywords[] = { "H", "K", "rotations", "translations", "normals", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), H, ArgInfo("H", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rotations"), rotations, ArgInfo("rotations", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "translations"), translations, ArgInfo("translations", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normals"), normals, ArgInfo("normals", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::decomposeHomographyMat(H, K, rotations, translations, normals), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, rotations), evision_from(env, translations), evision_from(env, normals));
        }
    }

    }
    

    {
    UMat H;
    UMat K;
    vector_UMat rotations;
    vector_UMat translations;
    vector_UMat normals;
    int retval;

    // const char* keywords[] = { "H", "K", "rotations", "translations", "normals", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), H, ArgInfo("H", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rotations"), rotations, ArgInfo("rotations", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "translations"), translations, ArgInfo("translations", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normals"), normals, ArgInfo("normals", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::decomposeHomographyMat(H, K, rotations, translations, normals), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, rotations), evision_from(env, translations), evision_from(env, normals));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_decomposeProjectionMatrix(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat projMatrix;
    Mat cameraMatrix;
    Mat rotMatrix;
    Mat transVect;
    Mat rotMatrixX;
    Mat rotMatrixY;
    Mat rotMatrixZ;
    Mat eulerAngles;

    // const char* keywords[] = { "projMatrix", "cameraMatrix", "rotMatrix", "transVect", "rotMatrixX", "rotMatrixY", "rotMatrixZ", "eulerAngles", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "projMatrix"), projMatrix, ArgInfo("projMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rotMatrix"), rotMatrix, ArgInfo("rotMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "transVect"), transVect, ArgInfo("transVect", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rotMatrixX"), rotMatrixX, ArgInfo("rotMatrixX", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rotMatrixY"), rotMatrixY, ArgInfo("rotMatrixY", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rotMatrixZ"), rotMatrixZ, ArgInfo("rotMatrixZ", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eulerAngles"), eulerAngles, ArgInfo("eulerAngles", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::decomposeProjectionMatrix(projMatrix, cameraMatrix, rotMatrix, transVect, rotMatrixX, rotMatrixY, rotMatrixZ, eulerAngles), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple7(env, evision_from(env, cameraMatrix), evision_from(env, rotMatrix), evision_from(env, transVect), evision_from(env, rotMatrixX), evision_from(env, rotMatrixY), evision_from(env, rotMatrixZ), evision_from(env, eulerAngles));
        }
    }

    }
    

    {
    UMat projMatrix;
    UMat cameraMatrix;
    UMat rotMatrix;
    UMat transVect;
    UMat rotMatrixX;
    UMat rotMatrixY;
    UMat rotMatrixZ;
    UMat eulerAngles;

    // const char* keywords[] = { "projMatrix", "cameraMatrix", "rotMatrix", "transVect", "rotMatrixX", "rotMatrixY", "rotMatrixZ", "eulerAngles", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "projMatrix"), projMatrix, ArgInfo("projMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rotMatrix"), rotMatrix, ArgInfo("rotMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "transVect"), transVect, ArgInfo("transVect", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rotMatrixX"), rotMatrixX, ArgInfo("rotMatrixX", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rotMatrixY"), rotMatrixY, ArgInfo("rotMatrixY", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rotMatrixZ"), rotMatrixZ, ArgInfo("rotMatrixZ", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eulerAngles"), eulerAngles, ArgInfo("eulerAngles", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::decomposeProjectionMatrix(projMatrix, cameraMatrix, rotMatrix, transVect, rotMatrixX, rotMatrixY, rotMatrixZ, eulerAngles), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple7(env, evision_from(env, cameraMatrix), evision_from(env, rotMatrix), evision_from(env, transVect), evision_from(env, rotMatrixX), evision_from(env, rotMatrixY), evision_from(env, rotMatrixZ), evision_from(env, eulerAngles));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_demosaicing(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int code=0;
    int dstCn=0;

    // const char* keywords[] = { "src", "code", "dst", "dstCn", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "code"), code, ArgInfo("code", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstCn"), dstCn, ArgInfo("dstCn", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::demosaicing(src, dst, code, dstCn), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int code=0;
    int dstCn=0;

    // const char* keywords[] = { "src", "code", "dst", "dstCn", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "code"), code, ArgInfo("code", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstCn"), dstCn, ArgInfo("dstCn", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::demosaicing(src, dst, code, dstCn), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_denoise_TVL1(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_Mat observations;
    Mat result;
    double lambda=1.0;
    int niters=30;

    // const char* keywords[] = { "observations", "result", "lambda", "niters", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "observations"), observations, ArgInfo("observations", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "result"), result, ArgInfo("result", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lambda"), lambda, ArgInfo("lambda", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "niters"), niters, ArgInfo("niters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::denoise_TVL1(observations, result, lambda, niters), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detailEnhance(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    float sigma_s=10;
    float sigma_r=0.15f;

    // const char* keywords[] = { "src", "dst", "sigma_s", "sigma_r", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_s"), sigma_s, ArgInfo("sigma_s", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_r"), sigma_r, ArgInfo("sigma_r", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detailEnhance(src, dst, sigma_s, sigma_r), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    float sigma_s=10;
    float sigma_r=0.15f;

    // const char* keywords[] = { "src", "dst", "sigma_s", "sigma_r", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_s"), sigma_s, ArgInfo("sigma_s", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_r"), sigma_r, ArgInfo("sigma_r", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detailEnhance(src, dst, sigma_s, sigma_r), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_determinant(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat mtx;
    double retval;

    // const char* keywords[] = { "mtx", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "mtx"), mtx, ArgInfo("mtx", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::determinant(mtx), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat mtx;
    double retval;

    // const char* keywords[] = { "mtx", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "mtx"), mtx, ArgInfo("mtx", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::determinant(mtx), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dft(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int flags=0;
    int nonzeroRows=0;

    // const char* keywords[] = { "src", "dst", "flags", "nonzeroRows", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nonzeroRows"), nonzeroRows, ArgInfo("nonzeroRows", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::dft(src, dst, flags, nonzeroRows), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int flags=0;
    int nonzeroRows=0;

    // const char* keywords[] = { "src", "dst", "flags", "nonzeroRows", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nonzeroRows"), nonzeroRows, ArgInfo("nonzeroRows", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::dft(src, dst, flags, nonzeroRows), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dilate(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat kernel;
    Point anchor=Point(-1,-1);
    int iterations=1;
    int borderType=BORDER_CONSTANT;
    Scalar borderValue=morphologyDefaultBorderValue();

    // const char* keywords[] = { "src", "kernel", "dst", "anchor", "iterations", "borderType", "borderValue", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernel"), kernel, ArgInfo("kernel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterations"), iterations, ArgInfo("iterations", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderValue"), borderValue, ArgInfo("borderValue", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::dilate(src, dst, kernel, anchor, iterations, borderType, borderValue), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat kernel;
    Point anchor=Point(-1,-1);
    int iterations=1;
    int borderType=BORDER_CONSTANT;
    Scalar borderValue=morphologyDefaultBorderValue();

    // const char* keywords[] = { "src", "kernel", "dst", "anchor", "iterations", "borderType", "borderValue", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernel"), kernel, ArgInfo("kernel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterations"), iterations, ArgInfo("iterations", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderValue"), borderValue, ArgInfo("borderValue", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::dilate(src, dst, kernel, anchor, iterations, borderType, borderValue), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_displayOverlay(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String winname;
    String text;
    int delayms=0;

    // const char* keywords[] = { "winname", "text", "delayms", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "text"), text, ArgInfo("text", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delayms"), delayms, ArgInfo("delayms", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::displayOverlay(winname, text, delayms), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_displayStatusBar(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String winname;
    String text;
    int delayms=0;

    // const char* keywords[] = { "winname", "text", "delayms", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "text"), text, ArgInfo("text", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delayms"), delayms, ArgInfo("delayms", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::displayStatusBar(winname, text, delayms), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_distanceTransform(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int distanceType=0;
    int maskSize=0;
    int dstType=CV_32F;

    // const char* keywords[] = { "src", "distanceType", "maskSize", "dst", "dstType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distanceType"), distanceType, ArgInfo("distanceType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maskSize"), maskSize, ArgInfo("maskSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstType"), dstType, ArgInfo("dstType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::distanceTransform(src, dst, distanceType, maskSize, dstType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int distanceType=0;
    int maskSize=0;
    int dstType=CV_32F;

    // const char* keywords[] = { "src", "distanceType", "maskSize", "dst", "dstType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distanceType"), distanceType, ArgInfo("distanceType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maskSize"), maskSize, ArgInfo("maskSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstType"), dstType, ArgInfo("dstType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::distanceTransform(src, dst, distanceType, maskSize, dstType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_distanceTransformWithLabels(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat labels;
    int distanceType=0;
    int maskSize=0;
    int labelType=DIST_LABEL_CCOMP;

    // const char* keywords[] = { "src", "distanceType", "maskSize", "dst", "labels", "labelType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "labels"), labels, ArgInfo("labels", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distanceType"), distanceType, ArgInfo("distanceType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maskSize"), maskSize, ArgInfo("maskSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "labelType"), labelType, ArgInfo("labelType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::distanceTransform(src, dst, labels, distanceType, maskSize, labelType), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dst), evision_from(env, labels));
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat labels;
    int distanceType=0;
    int maskSize=0;
    int labelType=DIST_LABEL_CCOMP;

    // const char* keywords[] = { "src", "distanceType", "maskSize", "dst", "labels", "labelType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "labels"), labels, ArgInfo("labels", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distanceType"), distanceType, ArgInfo("distanceType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maskSize"), maskSize, ArgInfo("maskSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "labelType"), labelType, ArgInfo("labelType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::distanceTransform(src, dst, labels, distanceType, maskSize, labelType), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dst), evision_from(env, labels));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_divSpectrums(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat a;
    Mat b;
    Mat c;
    int flags=0;
    bool conjB=false;

    // const char* keywords[] = { "a", "b", "flags", "c", "conjB", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "a"), a, ArgInfo("a", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "b"), b, ArgInfo("b", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "c"), c, ArgInfo("c", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "conjB"), conjB, ArgInfo("conjB", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::divSpectrums(a, b, c, flags, conjB), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, c);
        }
    }

    }
    

    {
    UMat a;
    UMat b;
    UMat c;
    int flags=0;
    bool conjB=false;

    // const char* keywords[] = { "a", "b", "flags", "c", "conjB", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "a"), a, ArgInfo("a", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "b"), b, ArgInfo("b", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "c"), c, ArgInfo("c", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "conjB"), conjB, ArgInfo("conjB", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::divSpectrums(a, b, c, flags, conjB), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, c);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_divide(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;
    double scale=1;
    int dtype=-1;

    // const char* keywords[] = { "src1", "src2", "dst", "scale", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::divide(src1, src2, dst, scale, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;
    double scale=1;
    int dtype=-1;

    // const char* keywords[] = { "src1", "src2", "dst", "scale", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::divide(src1, src2, dst, scale, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    double scale=0;
    Mat src2;
    Mat dst;
    int dtype=-1;

    // const char* keywords[] = { "scale", "src2", "dst", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::divide(scale, src2, dst, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    double scale=0;
    UMat src2;
    UMat dst;
    int dtype=-1;

    // const char* keywords[] = { "scale", "src2", "dst", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::divide(scale, src2, dst, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_drawChessboardCorners(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Size patternSize;
    Mat corners;
    bool patternWasFound=0;

    // const char* keywords[] = { "image", "patternSize", "corners", "patternWasFound", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternWasFound"), patternWasFound, ArgInfo("patternWasFound", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawChessboardCorners(image, patternSize, corners, patternWasFound), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, image);
        }
    }

    }
    

    {
    UMat image;
    Size patternSize;
    UMat corners;
    bool patternWasFound=0;

    // const char* keywords[] = { "image", "patternSize", "corners", "patternWasFound", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternWasFound"), patternWasFound, ArgInfo("patternWasFound", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawChessboardCorners(image, patternSize, corners, patternWasFound), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, image);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_drawContours(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    vector_Mat contours;
    int contourIdx=0;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    Mat hierarchy;
    int maxLevel=INT_MAX;
    Point offset;

    // const char* keywords[] = { "image", "contours", "contourIdx", "color", "thickness", "lineType", "hierarchy", "maxLevel", "offset", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "contours"), contours, ArgInfo("contours", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "contourIdx"), contourIdx, ArgInfo("contourIdx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hierarchy"), hierarchy, ArgInfo("hierarchy", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxLevel"), maxLevel, ArgInfo("maxLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "offset"), offset, ArgInfo("offset", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawContours(image, contours, contourIdx, color, thickness, lineType, hierarchy, maxLevel, offset), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, image);
        }
    }

    }
    

    {
    UMat image;
    vector_UMat contours;
    int contourIdx=0;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    UMat hierarchy;
    int maxLevel=INT_MAX;
    Point offset;

    // const char* keywords[] = { "image", "contours", "contourIdx", "color", "thickness", "lineType", "hierarchy", "maxLevel", "offset", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "contours"), contours, ArgInfo("contours", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "contourIdx"), contourIdx, ArgInfo("contourIdx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hierarchy"), hierarchy, ArgInfo("hierarchy", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxLevel"), maxLevel, ArgInfo("maxLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "offset"), offset, ArgInfo("offset", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawContours(image, contours, contourIdx, color, thickness, lineType, hierarchy, maxLevel, offset), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, image);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_drawFrameAxes(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat cameraMatrix;
    Mat distCoeffs;
    Mat rvec;
    Mat tvec;
    float length=0.f;
    int thickness=3;

    // const char* keywords[] = { "image", "cameraMatrix", "distCoeffs", "rvec", "tvec", "length", "thickness", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "length"), length, ArgInfo("length", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawFrameAxes(image, cameraMatrix, distCoeffs, rvec, tvec, length, thickness), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, image);
        }
    }

    }
    

    {
    UMat image;
    UMat cameraMatrix;
    UMat distCoeffs;
    UMat rvec;
    UMat tvec;
    float length=0.f;
    int thickness=3;

    // const char* keywords[] = { "image", "cameraMatrix", "distCoeffs", "rvec", "tvec", "length", "thickness", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "length"), length, ArgInfo("length", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawFrameAxes(image, cameraMatrix, distCoeffs, rvec, tvec, length, thickness), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, image);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_drawKeypoints(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    vector_KeyPoint keypoints;
    Mat outImage;
    Scalar color=Scalar::all(-1);
    std::underlying_type_t<DrawMatchesFlags> flags=static_cast<std::underlying_type_t<DrawMatchesFlags>>(DrawMatchesFlags::DEFAULT);

    // const char* keywords[] = { "image", "keypoints", "outImage", "color", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints"), keypoints, ArgInfo("keypoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "outImage"), outImage, ArgInfo("outImage", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawKeypoints(image, keypoints, outImage, color, static_cast<DrawMatchesFlags>(flags)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, outImage);
        }
    }

    }
    

    {
    UMat image;
    vector_KeyPoint keypoints;
    UMat outImage;
    Scalar color=Scalar::all(-1);
    std::underlying_type_t<DrawMatchesFlags> flags=static_cast<std::underlying_type_t<DrawMatchesFlags>>(DrawMatchesFlags::DEFAULT);

    // const char* keywords[] = { "image", "keypoints", "outImage", "color", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints"), keypoints, ArgInfo("keypoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "outImage"), outImage, ArgInfo("outImage", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawKeypoints(image, keypoints, outImage, color, static_cast<DrawMatchesFlags>(flags)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, outImage);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_drawMarker(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    Point position;
    Scalar color;
    int markerType=MARKER_CROSS;
    int markerSize=20;
    int thickness=1;
    int line_type=8;

    // const char* keywords[] = { "img", "position", "color", "markerType", "markerSize", "thickness", "line_type", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "position"), position, ArgInfo("position", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "markerType"), markerType, ArgInfo("markerType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "markerSize"), markerSize, ArgInfo("markerSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "line_type"), line_type, ArgInfo("line_type", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawMarker(img, position, color, markerType, markerSize, thickness, line_type), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    UMat img;
    Point position;
    Scalar color;
    int markerType=MARKER_CROSS;
    int markerSize=20;
    int thickness=1;
    int line_type=8;

    // const char* keywords[] = { "img", "position", "color", "markerType", "markerSize", "thickness", "line_type", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "position"), position, ArgInfo("position", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "markerType"), markerType, ArgInfo("markerType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "markerSize"), markerSize, ArgInfo("markerSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "line_type"), line_type, ArgInfo("line_type", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawMarker(img, position, color, markerType, markerSize, thickness, line_type), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_drawMatches(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img1;
    vector_KeyPoint keypoints1;
    Mat img2;
    vector_KeyPoint keypoints2;
    vector_DMatch matches1to2;
    Mat outImg;
    Scalar matchColor=Scalar::all(-1);
    Scalar singlePointColor=Scalar::all(-1);
    vector_char matchesMask=std::vector<char>();
    std::underlying_type_t<DrawMatchesFlags> flags=static_cast<std::underlying_type_t<DrawMatchesFlags>>(DrawMatchesFlags::DEFAULT);

    // const char* keywords[] = { "img1", "keypoints1", "img2", "keypoints2", "matches1to2", "outImg", "matchColor", "singlePointColor", "matchesMask", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img1"), img1, ArgInfo("img1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints1"), keypoints1, ArgInfo("keypoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img2"), img2, ArgInfo("img2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints2"), keypoints2, ArgInfo("keypoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matches1to2"), matches1to2, ArgInfo("matches1to2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "outImg"), outImg, ArgInfo("outImg", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchColor"), matchColor, ArgInfo("matchColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "singlePointColor"), singlePointColor, ArgInfo("singlePointColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchesMask"), matchesMask, ArgInfo("matchesMask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor, singlePointColor, matchesMask, static_cast<DrawMatchesFlags>(flags)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, outImg);
        }
    }

    }
    

    {
    UMat img1;
    vector_KeyPoint keypoints1;
    UMat img2;
    vector_KeyPoint keypoints2;
    vector_DMatch matches1to2;
    UMat outImg;
    Scalar matchColor=Scalar::all(-1);
    Scalar singlePointColor=Scalar::all(-1);
    vector_char matchesMask=std::vector<char>();
    std::underlying_type_t<DrawMatchesFlags> flags=static_cast<std::underlying_type_t<DrawMatchesFlags>>(DrawMatchesFlags::DEFAULT);

    // const char* keywords[] = { "img1", "keypoints1", "img2", "keypoints2", "matches1to2", "outImg", "matchColor", "singlePointColor", "matchesMask", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img1"), img1, ArgInfo("img1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints1"), keypoints1, ArgInfo("keypoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img2"), img2, ArgInfo("img2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints2"), keypoints2, ArgInfo("keypoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matches1to2"), matches1to2, ArgInfo("matches1to2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "outImg"), outImg, ArgInfo("outImg", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchColor"), matchColor, ArgInfo("matchColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "singlePointColor"), singlePointColor, ArgInfo("singlePointColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchesMask"), matchesMask, ArgInfo("matchesMask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor, singlePointColor, matchesMask, static_cast<DrawMatchesFlags>(flags)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, outImg);
        }
    }

    }
    

    {
    Mat img1;
    vector_KeyPoint keypoints1;
    Mat img2;
    vector_KeyPoint keypoints2;
    vector_DMatch matches1to2;
    Mat outImg;
    int matchesThickness=0;
    Scalar matchColor=Scalar::all(-1);
    Scalar singlePointColor=Scalar::all(-1);
    vector_char matchesMask=std::vector<char>();
    std::underlying_type_t<DrawMatchesFlags> flags=static_cast<std::underlying_type_t<DrawMatchesFlags>>(DrawMatchesFlags::DEFAULT);

    // const char* keywords[] = { "img1", "keypoints1", "img2", "keypoints2", "matches1to2", "outImg", "matchesThickness", "matchColor", "singlePointColor", "matchesMask", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img1"), img1, ArgInfo("img1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints1"), keypoints1, ArgInfo("keypoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img2"), img2, ArgInfo("img2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints2"), keypoints2, ArgInfo("keypoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matches1to2"), matches1to2, ArgInfo("matches1to2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "outImg"), outImg, ArgInfo("outImg", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchesThickness"), matchesThickness, ArgInfo("matchesThickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchColor"), matchColor, ArgInfo("matchColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "singlePointColor"), singlePointColor, ArgInfo("singlePointColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchesMask"), matchesMask, ArgInfo("matchesMask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchesThickness, matchColor, singlePointColor, matchesMask, static_cast<DrawMatchesFlags>(flags)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, outImg);
        }
    }

    }
    

    {
    UMat img1;
    vector_KeyPoint keypoints1;
    UMat img2;
    vector_KeyPoint keypoints2;
    vector_DMatch matches1to2;
    UMat outImg;
    int matchesThickness=0;
    Scalar matchColor=Scalar::all(-1);
    Scalar singlePointColor=Scalar::all(-1);
    vector_char matchesMask=std::vector<char>();
    std::underlying_type_t<DrawMatchesFlags> flags=static_cast<std::underlying_type_t<DrawMatchesFlags>>(DrawMatchesFlags::DEFAULT);

    // const char* keywords[] = { "img1", "keypoints1", "img2", "keypoints2", "matches1to2", "outImg", "matchesThickness", "matchColor", "singlePointColor", "matchesMask", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img1"), img1, ArgInfo("img1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints1"), keypoints1, ArgInfo("keypoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img2"), img2, ArgInfo("img2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints2"), keypoints2, ArgInfo("keypoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matches1to2"), matches1to2, ArgInfo("matches1to2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "outImg"), outImg, ArgInfo("outImg", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchesThickness"), matchesThickness, ArgInfo("matchesThickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchColor"), matchColor, ArgInfo("matchColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "singlePointColor"), singlePointColor, ArgInfo("singlePointColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchesMask"), matchesMask, ArgInfo("matchesMask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchesThickness, matchColor, singlePointColor, matchesMask, static_cast<DrawMatchesFlags>(flags)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, outImg);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_drawMatchesKnn(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img1;
    vector_KeyPoint keypoints1;
    Mat img2;
    vector_KeyPoint keypoints2;
    vector_vector_DMatch matches1to2;
    Mat outImg;
    Scalar matchColor=Scalar::all(-1);
    Scalar singlePointColor=Scalar::all(-1);
    vector_vector_char matchesMask=std::vector<std::vector<char> >();
    std::underlying_type_t<DrawMatchesFlags> flags=static_cast<std::underlying_type_t<DrawMatchesFlags>>(DrawMatchesFlags::DEFAULT);

    // const char* keywords[] = { "img1", "keypoints1", "img2", "keypoints2", "matches1to2", "outImg", "matchColor", "singlePointColor", "matchesMask", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img1"), img1, ArgInfo("img1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints1"), keypoints1, ArgInfo("keypoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img2"), img2, ArgInfo("img2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints2"), keypoints2, ArgInfo("keypoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matches1to2"), matches1to2, ArgInfo("matches1to2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "outImg"), outImg, ArgInfo("outImg", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchColor"), matchColor, ArgInfo("matchColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "singlePointColor"), singlePointColor, ArgInfo("singlePointColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchesMask"), matchesMask, ArgInfo("matchesMask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor, singlePointColor, matchesMask, static_cast<DrawMatchesFlags>(flags)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, outImg);
        }
    }

    }
    

    {
    UMat img1;
    vector_KeyPoint keypoints1;
    UMat img2;
    vector_KeyPoint keypoints2;
    vector_vector_DMatch matches1to2;
    UMat outImg;
    Scalar matchColor=Scalar::all(-1);
    Scalar singlePointColor=Scalar::all(-1);
    vector_vector_char matchesMask=std::vector<std::vector<char> >();
    std::underlying_type_t<DrawMatchesFlags> flags=static_cast<std::underlying_type_t<DrawMatchesFlags>>(DrawMatchesFlags::DEFAULT);

    // const char* keywords[] = { "img1", "keypoints1", "img2", "keypoints2", "matches1to2", "outImg", "matchColor", "singlePointColor", "matchesMask", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img1"), img1, ArgInfo("img1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints1"), keypoints1, ArgInfo("keypoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img2"), img2, ArgInfo("img2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "keypoints2"), keypoints2, ArgInfo("keypoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matches1to2"), matches1to2, ArgInfo("matches1to2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "outImg"), outImg, ArgInfo("outImg", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchColor"), matchColor, ArgInfo("matchColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "singlePointColor"), singlePointColor, ArgInfo("singlePointColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "matchesMask"), matchesMask, ArgInfo("matchesMask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor, singlePointColor, matchesMask, static_cast<DrawMatchesFlags>(flags)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, outImg);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_edgePreservingFilter(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int flags=1;
    float sigma_s=60;
    float sigma_r=0.4f;

    // const char* keywords[] = { "src", "dst", "flags", "sigma_s", "sigma_r", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_s"), sigma_s, ArgInfo("sigma_s", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_r"), sigma_r, ArgInfo("sigma_r", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::edgePreservingFilter(src, dst, flags, sigma_s, sigma_r), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int flags=1;
    float sigma_s=60;
    float sigma_r=0.4f;

    // const char* keywords[] = { "src", "dst", "flags", "sigma_s", "sigma_r", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_s"), sigma_s, ArgInfo("sigma_s", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_r"), sigma_r, ArgInfo("sigma_r", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::edgePreservingFilter(src, dst, flags, sigma_s, sigma_r), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_eigen(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat eigenvalues;
    Mat eigenvectors;
    bool retval;

    // const char* keywords[] = { "src", "eigenvalues", "eigenvectors", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvalues"), eigenvalues, ArgInfo("eigenvalues", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::eigen(src, eigenvalues, eigenvectors), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_2_to_10_tuple_except_bool
                return enif_make_tuple2(env, evision_from(env, eigenvalues), evision_from(env, eigenvectors));
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat src;
    UMat eigenvalues;
    UMat eigenvectors;
    bool retval;

    // const char* keywords[] = { "src", "eigenvalues", "eigenvectors", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvalues"), eigenvalues, ArgInfo("eigenvalues", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::eigen(src, eigenvalues, eigenvectors), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_2_to_10_tuple_except_bool
                return enif_make_tuple2(env, evision_from(env, eigenvalues), evision_from(env, eigenvectors));
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_eigenNonSymmetric(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat eigenvalues;
    Mat eigenvectors;

    // const char* keywords[] = { "src", "eigenvalues", "eigenvectors", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvalues"), eigenvalues, ArgInfo("eigenvalues", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::eigenNonSymmetric(src, eigenvalues, eigenvectors), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, eigenvalues), evision_from(env, eigenvectors));
        }
    }

    }
    

    {
    UMat src;
    UMat eigenvalues;
    UMat eigenvectors;

    // const char* keywords[] = { "src", "eigenvalues", "eigenvectors", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvalues"), eigenvalues, ArgInfo("eigenvalues", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eigenvectors"), eigenvectors, ArgInfo("eigenvectors", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::eigenNonSymmetric(src, eigenvalues, eigenvectors), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, eigenvalues), evision_from(env, eigenvectors));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ellipse(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    Point center;
    Size axes;
    double angle=0;
    double startAngle=0;
    double endAngle=0;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "center", "axes", "angle", "startAngle", "endAngle", "color", "thickness", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "axes"), axes, ArgInfo("axes", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angle"), angle, ArgInfo("angle", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "startAngle"), startAngle, ArgInfo("startAngle", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "endAngle"), endAngle, ArgInfo("endAngle", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::ellipse(img, center, axes, angle, startAngle, endAngle, color, thickness, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    UMat img;
    Point center;
    Size axes;
    double angle=0;
    double startAngle=0;
    double endAngle=0;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "center", "axes", "angle", "startAngle", "endAngle", "color", "thickness", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "axes"), axes, ArgInfo("axes", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angle"), angle, ArgInfo("angle", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "startAngle"), startAngle, ArgInfo("startAngle", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "endAngle"), endAngle, ArgInfo("endAngle", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::ellipse(img, center, axes, angle, startAngle, endAngle, color, thickness, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    Mat img;
    RotatedRect box;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;

    // const char* keywords[] = { "img", "box", "color", "thickness", "lineType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "box"), box, ArgInfo("box", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::ellipse(img, box, color, thickness, lineType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    UMat img;
    RotatedRect box;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;

    // const char* keywords[] = { "img", "box", "color", "thickness", "lineType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "box"), box, ArgInfo("box", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::ellipse(img, box, color, thickness, lineType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ellipse2Poly(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Point center;
    Size axes;
    int angle=0;
    int arcStart=0;
    int arcEnd=0;
    int delta=0;
    vector_Point pts;

    // const char* keywords[] = { "center", "axes", "angle", "arcStart", "arcEnd", "delta", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "axes"), axes, ArgInfo("axes", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angle"), angle, ArgInfo("angle", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "arcStart"), arcStart, ArgInfo("arcStart", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "arcEnd"), arcEnd, ArgInfo("arcEnd", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::ellipse2Poly(center, axes, angle, arcStart, arcEnd, delta, pts), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, pts);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_equalizeHist(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::equalizeHist(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::equalizeHist(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_erode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat kernel;
    Point anchor=Point(-1,-1);
    int iterations=1;
    int borderType=BORDER_CONSTANT;
    Scalar borderValue=morphologyDefaultBorderValue();

    // const char* keywords[] = { "src", "kernel", "dst", "anchor", "iterations", "borderType", "borderValue", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernel"), kernel, ArgInfo("kernel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterations"), iterations, ArgInfo("iterations", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderValue"), borderValue, ArgInfo("borderValue", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::erode(src, dst, kernel, anchor, iterations, borderType, borderValue), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat kernel;
    Point anchor=Point(-1,-1);
    int iterations=1;
    int borderType=BORDER_CONSTANT;
    Scalar borderValue=morphologyDefaultBorderValue();

    // const char* keywords[] = { "src", "kernel", "dst", "anchor", "iterations", "borderType", "borderValue", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernel"), kernel, ArgInfo("kernel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterations"), iterations, ArgInfo("iterations", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderValue"), borderValue, ArgInfo("borderValue", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::erode(src, dst, kernel, anchor, iterations, borderType, borderValue), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_estimateAffine2D(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat from;
    Mat to;
    Mat inliers;
    int method=RANSAC;
    double ransacReprojThreshold=3;
    size_t maxIters=2000;
    double confidence=0.99;
    size_t refineIters=10;
    cv::Mat retval;

    // const char* keywords[] = { "from", "to", "inliers", "method", "ransacReprojThreshold", "maxIters", "confidence", "refineIters", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "from"), from, ArgInfo("from", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "to"), to, ArgInfo("to", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacReprojThreshold"), ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "refineIters"), refineIters, ArgInfo("refineIters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateAffine2D(from, to, inliers, method, ransacReprojThreshold, maxIters, confidence, refineIters), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, inliers));
        }
    }

    }
    

    {
    UMat from;
    UMat to;
    UMat inliers;
    int method=RANSAC;
    double ransacReprojThreshold=3;
    size_t maxIters=2000;
    double confidence=0.99;
    size_t refineIters=10;
    cv::Mat retval;

    // const char* keywords[] = { "from", "to", "inliers", "method", "ransacReprojThreshold", "maxIters", "confidence", "refineIters", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "from"), from, ArgInfo("from", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "to"), to, ArgInfo("to", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacReprojThreshold"), ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "refineIters"), refineIters, ArgInfo("refineIters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateAffine2D(from, to, inliers, method, ransacReprojThreshold, maxIters, confidence, refineIters), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, inliers));
        }
    }

    }
    

    {
    Mat pts1;
    Mat pts2;
    Mat inliers;
    UsacParams params;
    cv::Mat retval;

    // const char* keywords[] = { "pts1", "pts2", "params", "inliers", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "pts1"), pts1, ArgInfo("pts1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pts2"), pts2, ArgInfo("pts2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateAffine2D(pts1, pts2, inliers, params), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, inliers));
        }
    }

    }
    

    {
    UMat pts1;
    UMat pts2;
    UMat inliers;
    UsacParams params;
    cv::Mat retval;

    // const char* keywords[] = { "pts1", "pts2", "params", "inliers", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "pts1"), pts1, ArgInfo("pts1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pts2"), pts2, ArgInfo("pts2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateAffine2D(pts1, pts2, inliers, params), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, inliers));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_estimateAffine3D(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat out;
    Mat inliers;
    double ransacThreshold=3;
    double confidence=0.99;
    int retval;

    // const char* keywords[] = { "src", "dst", "out", "inliers", "ransacThreshold", "confidence", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "out"), out, ArgInfo("out", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacThreshold"), ransacThreshold, ArgInfo("ransacThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateAffine3D(src, dst, out, inliers, ransacThreshold, confidence), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, retval), evision_from(env, out), evision_from(env, inliers));
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat out;
    UMat inliers;
    double ransacThreshold=3;
    double confidence=0.99;
    int retval;

    // const char* keywords[] = { "src", "dst", "out", "inliers", "ransacThreshold", "confidence", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "out"), out, ArgInfo("out", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacThreshold"), ransacThreshold, ArgInfo("ransacThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateAffine3D(src, dst, out, inliers, ransacThreshold, confidence), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, retval), evision_from(env, out), evision_from(env, inliers));
        }
    }

    }
    

    {
    Mat src;
    Mat dst;
    double scale;
    bool force_rotation=true;
    cv::Mat retval;

    // const char* keywords[] = { "src", "dst", "force_rotation", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "force_rotation"), force_rotation, ArgInfo("force_rotation", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateAffine3D(src, dst, &scale, force_rotation), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, scale));
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    double scale;
    bool force_rotation=true;
    cv::Mat retval;

    // const char* keywords[] = { "src", "dst", "force_rotation", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "force_rotation"), force_rotation, ArgInfo("force_rotation", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateAffine3D(src, dst, &scale, force_rotation), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, scale));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_estimateAffinePartial2D(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat from;
    Mat to;
    Mat inliers;
    int method=RANSAC;
    double ransacReprojThreshold=3;
    size_t maxIters=2000;
    double confidence=0.99;
    size_t refineIters=10;
    cv::Mat retval;

    // const char* keywords[] = { "from", "to", "inliers", "method", "ransacReprojThreshold", "maxIters", "confidence", "refineIters", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "from"), from, ArgInfo("from", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "to"), to, ArgInfo("to", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacReprojThreshold"), ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "refineIters"), refineIters, ArgInfo("refineIters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateAffinePartial2D(from, to, inliers, method, ransacReprojThreshold, maxIters, confidence, refineIters), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, inliers));
        }
    }

    }
    

    {
    UMat from;
    UMat to;
    UMat inliers;
    int method=RANSAC;
    double ransacReprojThreshold=3;
    size_t maxIters=2000;
    double confidence=0.99;
    size_t refineIters=10;
    cv::Mat retval;

    // const char* keywords[] = { "from", "to", "inliers", "method", "ransacReprojThreshold", "maxIters", "confidence", "refineIters", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "from"), from, ArgInfo("from", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "to"), to, ArgInfo("to", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacReprojThreshold"), ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "refineIters"), refineIters, ArgInfo("refineIters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateAffinePartial2D(from, to, inliers, method, ransacReprojThreshold, maxIters, confidence, refineIters), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, inliers));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_estimateChessboardSharpness(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Size patternSize;
    Mat corners;
    float rise_distance=0.8F;
    bool vertical=false;
    Mat sharpness;
    Scalar retval;

    // const char* keywords[] = { "image", "patternSize", "corners", "rise_distance", "vertical", "sharpness", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rise_distance"), rise_distance, ArgInfo("rise_distance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "vertical"), vertical, ArgInfo("vertical", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sharpness"), sharpness, ArgInfo("sharpness", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateChessboardSharpness(image, patternSize, corners, rise_distance, vertical, sharpness), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, sharpness));
        }
    }

    }
    

    {
    UMat image;
    Size patternSize;
    UMat corners;
    float rise_distance=0.8F;
    bool vertical=false;
    UMat sharpness;
    Scalar retval;

    // const char* keywords[] = { "image", "patternSize", "corners", "rise_distance", "vertical", "sharpness", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rise_distance"), rise_distance, ArgInfo("rise_distance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "vertical"), vertical, ArgInfo("vertical", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sharpness"), sharpness, ArgInfo("sharpness", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateChessboardSharpness(image, patternSize, corners, rise_distance, vertical, sharpness), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, sharpness));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_estimateTranslation3D(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat out;
    Mat inliers;
    double ransacThreshold=3;
    double confidence=0.99;
    int retval;

    // const char* keywords[] = { "src", "dst", "out", "inliers", "ransacThreshold", "confidence", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "out"), out, ArgInfo("out", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacThreshold"), ransacThreshold, ArgInfo("ransacThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateTranslation3D(src, dst, out, inliers, ransacThreshold, confidence), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, retval), evision_from(env, out), evision_from(env, inliers));
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat out;
    UMat inliers;
    double ransacThreshold=3;
    double confidence=0.99;
    int retval;

    // const char* keywords[] = { "src", "dst", "out", "inliers", "ransacThreshold", "confidence", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "out"), out, ArgInfo("out", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacThreshold"), ransacThreshold, ArgInfo("ransacThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::estimateTranslation3D(src, dst, out, inliers, ransacThreshold, confidence), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, retval), evision_from(env, out), evision_from(env, inliers));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_exp(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::exp(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::exp(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_extractChannel(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int coi=0;

    // const char* keywords[] = { "src", "coi", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "coi"), coi, ArgInfo("coi", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::extractChannel(src, dst, coi), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int coi=0;

    // const char* keywords[] = { "src", "coi", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "coi"), coi, ArgInfo("coi", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::extractChannel(src, dst, coi), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fastAtan2(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    float y=0.f;
    float x=0.f;
    float retval;

    // const char* keywords[] = { "y", "x", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "y"), y, ArgInfo("y", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "x"), x, ArgInfo("x", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::fastAtan2(y, x), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fastNlMeansDenoising(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    float h=3;
    int templateWindowSize=7;
    int searchWindowSize=21;

    // const char* keywords[] = { "src", "dst", "h", "templateWindowSize", "searchWindowSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templateWindowSize"), templateWindowSize, ArgInfo("templateWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "searchWindowSize"), searchWindowSize, ArgInfo("searchWindowSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fastNlMeansDenoising(src, dst, h, templateWindowSize, searchWindowSize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    float h=3;
    int templateWindowSize=7;
    int searchWindowSize=21;

    // const char* keywords[] = { "src", "dst", "h", "templateWindowSize", "searchWindowSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templateWindowSize"), templateWindowSize, ArgInfo("templateWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "searchWindowSize"), searchWindowSize, ArgInfo("searchWindowSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fastNlMeansDenoising(src, dst, h, templateWindowSize, searchWindowSize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    Mat src;
    Mat dst;
    vector_float h;
    int templateWindowSize=7;
    int searchWindowSize=21;
    int normType=NORM_L2;

    // const char* keywords[] = { "src", "h", "dst", "templateWindowSize", "searchWindowSize", "normType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templateWindowSize"), templateWindowSize, ArgInfo("templateWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "searchWindowSize"), searchWindowSize, ArgInfo("searchWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normType"), normType, ArgInfo("normType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fastNlMeansDenoising(src, dst, h, templateWindowSize, searchWindowSize, normType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    vector_float h;
    int templateWindowSize=7;
    int searchWindowSize=21;
    int normType=NORM_L2;

    // const char* keywords[] = { "src", "h", "dst", "templateWindowSize", "searchWindowSize", "normType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templateWindowSize"), templateWindowSize, ArgInfo("templateWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "searchWindowSize"), searchWindowSize, ArgInfo("searchWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normType"), normType, ArgInfo("normType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fastNlMeansDenoising(src, dst, h, templateWindowSize, searchWindowSize, normType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fastNlMeansDenoisingColored(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    float h=3;
    float hColor=3;
    int templateWindowSize=7;
    int searchWindowSize=21;

    // const char* keywords[] = { "src", "dst", "h", "hColor", "templateWindowSize", "searchWindowSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hColor"), hColor, ArgInfo("hColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templateWindowSize"), templateWindowSize, ArgInfo("templateWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "searchWindowSize"), searchWindowSize, ArgInfo("searchWindowSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fastNlMeansDenoisingColored(src, dst, h, hColor, templateWindowSize, searchWindowSize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    float h=3;
    float hColor=3;
    int templateWindowSize=7;
    int searchWindowSize=21;

    // const char* keywords[] = { "src", "dst", "h", "hColor", "templateWindowSize", "searchWindowSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hColor"), hColor, ArgInfo("hColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templateWindowSize"), templateWindowSize, ArgInfo("templateWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "searchWindowSize"), searchWindowSize, ArgInfo("searchWindowSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fastNlMeansDenoisingColored(src, dst, h, hColor, templateWindowSize, searchWindowSize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fastNlMeansDenoisingColoredMulti(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat srcImgs;
    Mat dst;
    int imgToDenoiseIndex=0;
    int temporalWindowSize=0;
    float h=3;
    float hColor=3;
    int templateWindowSize=7;
    int searchWindowSize=21;

    // const char* keywords[] = { "srcImgs", "imgToDenoiseIndex", "temporalWindowSize", "dst", "h", "hColor", "templateWindowSize", "searchWindowSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "srcImgs"), srcImgs, ArgInfo("srcImgs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgToDenoiseIndex"), imgToDenoiseIndex, ArgInfo("imgToDenoiseIndex", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "temporalWindowSize"), temporalWindowSize, ArgInfo("temporalWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hColor"), hColor, ArgInfo("hColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templateWindowSize"), templateWindowSize, ArgInfo("templateWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "searchWindowSize"), searchWindowSize, ArgInfo("searchWindowSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fastNlMeansDenoisingColoredMulti(srcImgs, dst, imgToDenoiseIndex, temporalWindowSize, h, hColor, templateWindowSize, searchWindowSize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    vector_UMat srcImgs;
    UMat dst;
    int imgToDenoiseIndex=0;
    int temporalWindowSize=0;
    float h=3;
    float hColor=3;
    int templateWindowSize=7;
    int searchWindowSize=21;

    // const char* keywords[] = { "srcImgs", "imgToDenoiseIndex", "temporalWindowSize", "dst", "h", "hColor", "templateWindowSize", "searchWindowSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "srcImgs"), srcImgs, ArgInfo("srcImgs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgToDenoiseIndex"), imgToDenoiseIndex, ArgInfo("imgToDenoiseIndex", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "temporalWindowSize"), temporalWindowSize, ArgInfo("temporalWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hColor"), hColor, ArgInfo("hColor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templateWindowSize"), templateWindowSize, ArgInfo("templateWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "searchWindowSize"), searchWindowSize, ArgInfo("searchWindowSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fastNlMeansDenoisingColoredMulti(srcImgs, dst, imgToDenoiseIndex, temporalWindowSize, h, hColor, templateWindowSize, searchWindowSize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fastNlMeansDenoisingMulti(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat srcImgs;
    Mat dst;
    int imgToDenoiseIndex=0;
    int temporalWindowSize=0;
    float h=3;
    int templateWindowSize=7;
    int searchWindowSize=21;

    // const char* keywords[] = { "srcImgs", "imgToDenoiseIndex", "temporalWindowSize", "dst", "h", "templateWindowSize", "searchWindowSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "srcImgs"), srcImgs, ArgInfo("srcImgs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgToDenoiseIndex"), imgToDenoiseIndex, ArgInfo("imgToDenoiseIndex", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "temporalWindowSize"), temporalWindowSize, ArgInfo("temporalWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templateWindowSize"), templateWindowSize, ArgInfo("templateWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "searchWindowSize"), searchWindowSize, ArgInfo("searchWindowSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fastNlMeansDenoisingMulti(srcImgs, dst, imgToDenoiseIndex, temporalWindowSize, h, templateWindowSize, searchWindowSize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    vector_UMat srcImgs;
    UMat dst;
    int imgToDenoiseIndex=0;
    int temporalWindowSize=0;
    float h=3;
    int templateWindowSize=7;
    int searchWindowSize=21;

    // const char* keywords[] = { "srcImgs", "imgToDenoiseIndex", "temporalWindowSize", "dst", "h", "templateWindowSize", "searchWindowSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "srcImgs"), srcImgs, ArgInfo("srcImgs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgToDenoiseIndex"), imgToDenoiseIndex, ArgInfo("imgToDenoiseIndex", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "temporalWindowSize"), temporalWindowSize, ArgInfo("temporalWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templateWindowSize"), templateWindowSize, ArgInfo("templateWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "searchWindowSize"), searchWindowSize, ArgInfo("searchWindowSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fastNlMeansDenoisingMulti(srcImgs, dst, imgToDenoiseIndex, temporalWindowSize, h, templateWindowSize, searchWindowSize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    vector_Mat srcImgs;
    Mat dst;
    int imgToDenoiseIndex=0;
    int temporalWindowSize=0;
    vector_float h;
    int templateWindowSize=7;
    int searchWindowSize=21;
    int normType=NORM_L2;

    // const char* keywords[] = { "srcImgs", "imgToDenoiseIndex", "temporalWindowSize", "h", "dst", "templateWindowSize", "searchWindowSize", "normType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "srcImgs"), srcImgs, ArgInfo("srcImgs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgToDenoiseIndex"), imgToDenoiseIndex, ArgInfo("imgToDenoiseIndex", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "temporalWindowSize"), temporalWindowSize, ArgInfo("temporalWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templateWindowSize"), templateWindowSize, ArgInfo("templateWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "searchWindowSize"), searchWindowSize, ArgInfo("searchWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normType"), normType, ArgInfo("normType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fastNlMeansDenoisingMulti(srcImgs, dst, imgToDenoiseIndex, temporalWindowSize, h, templateWindowSize, searchWindowSize, normType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    vector_UMat srcImgs;
    UMat dst;
    int imgToDenoiseIndex=0;
    int temporalWindowSize=0;
    vector_float h;
    int templateWindowSize=7;
    int searchWindowSize=21;
    int normType=NORM_L2;

    // const char* keywords[] = { "srcImgs", "imgToDenoiseIndex", "temporalWindowSize", "h", "dst", "templateWindowSize", "searchWindowSize", "normType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "srcImgs"), srcImgs, ArgInfo("srcImgs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgToDenoiseIndex"), imgToDenoiseIndex, ArgInfo("imgToDenoiseIndex", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "temporalWindowSize"), temporalWindowSize, ArgInfo("temporalWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templateWindowSize"), templateWindowSize, ArgInfo("templateWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "searchWindowSize"), searchWindowSize, ArgInfo("searchWindowSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normType"), normType, ArgInfo("normType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fastNlMeansDenoisingMulti(srcImgs, dst, imgToDenoiseIndex, temporalWindowSize, h, templateWindowSize, searchWindowSize, normType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fillConvexPoly(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    Mat points;
    Scalar color;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "points", "color", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fillConvexPoly(img, points, color, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    UMat img;
    UMat points;
    Scalar color;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "points", "color", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fillConvexPoly(img, points, color, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fillPoly(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    vector_Mat pts;
    Scalar color;
    int lineType=LINE_8;
    int shift=0;
    Point offset;

    // const char* keywords[] = { "img", "pts", "color", "lineType", "shift", "offset", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pts"), pts, ArgInfo("pts", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "offset"), offset, ArgInfo("offset", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fillPoly(img, pts, color, lineType, shift, offset), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    UMat img;
    vector_UMat pts;
    Scalar color;
    int lineType=LINE_8;
    int shift=0;
    Point offset;

    // const char* keywords[] = { "img", "pts", "color", "lineType", "shift", "offset", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pts"), pts, ArgInfo("pts", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "offset"), offset, ArgInfo("offset", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fillPoly(img, pts, color, lineType, shift, offset), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_filter2D(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int ddepth=0;
    Mat kernel;
    Point anchor=Point(-1,-1);
    double delta=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "kernel", "dst", "anchor", "delta", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernel"), kernel, ArgInfo("kernel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::filter2D(src, dst, ddepth, kernel, anchor, delta, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int ddepth=0;
    UMat kernel;
    Point anchor=Point(-1,-1);
    double delta=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "kernel", "dst", "anchor", "delta", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernel"), kernel, ArgInfo("kernel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::filter2D(src, dst, ddepth, kernel, anchor, delta, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_filterHomographyDecompByVisibleRefpoints(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat rotations;
    vector_Mat normals;
    Mat beforePoints;
    Mat afterPoints;
    Mat possibleSolutions;
    Mat pointsMask;

    // const char* keywords[] = { "rotations", "normals", "beforePoints", "afterPoints", "possibleSolutions", "pointsMask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rotations"), rotations, ArgInfo("rotations", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normals"), normals, ArgInfo("normals", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "beforePoints"), beforePoints, ArgInfo("beforePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "afterPoints"), afterPoints, ArgInfo("afterPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "possibleSolutions"), possibleSolutions, ArgInfo("possibleSolutions", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pointsMask"), pointsMask, ArgInfo("pointsMask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::filterHomographyDecompByVisibleRefpoints(rotations, normals, beforePoints, afterPoints, possibleSolutions, pointsMask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, possibleSolutions);
        }
    }

    }
    

    {
    vector_UMat rotations;
    vector_UMat normals;
    UMat beforePoints;
    UMat afterPoints;
    UMat possibleSolutions;
    UMat pointsMask;

    // const char* keywords[] = { "rotations", "normals", "beforePoints", "afterPoints", "possibleSolutions", "pointsMask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rotations"), rotations, ArgInfo("rotations", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normals"), normals, ArgInfo("normals", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "beforePoints"), beforePoints, ArgInfo("beforePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "afterPoints"), afterPoints, ArgInfo("afterPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "possibleSolutions"), possibleSolutions, ArgInfo("possibleSolutions", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pointsMask"), pointsMask, ArgInfo("pointsMask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::filterHomographyDecompByVisibleRefpoints(rotations, normals, beforePoints, afterPoints, possibleSolutions, pointsMask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, possibleSolutions);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_filterSpeckles(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    double newVal=0;
    int maxSpeckleSize=0;
    double maxDiff=0;
    Mat buf;

    // const char* keywords[] = { "img", "newVal", "maxSpeckleSize", "maxDiff", "buf", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newVal"), newVal, ArgInfo("newVal", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxSpeckleSize"), maxSpeckleSize, ArgInfo("maxSpeckleSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxDiff"), maxDiff, ArgInfo("maxDiff", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "buf"), buf, ArgInfo("buf", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::filterSpeckles(img, newVal, maxSpeckleSize, maxDiff, buf), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, img), evision_from(env, buf));
        }
    }

    }
    

    {
    UMat img;
    double newVal=0;
    int maxSpeckleSize=0;
    double maxDiff=0;
    UMat buf;

    // const char* keywords[] = { "img", "newVal", "maxSpeckleSize", "maxDiff", "buf", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newVal"), newVal, ArgInfo("newVal", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxSpeckleSize"), maxSpeckleSize, ArgInfo("maxSpeckleSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxDiff"), maxDiff, ArgInfo("maxDiff", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "buf"), buf, ArgInfo("buf", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::filterSpeckles(img, newVal, maxSpeckleSize, maxDiff, buf), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, img), evision_from(env, buf));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_find4QuadCornerSubpix(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    Mat corners;
    Size region_size;
    bool retval;

    // const char* keywords[] = { "img", "corners", "region_size", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "region_size"), region_size, ArgInfo("region_size", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::find4QuadCornerSubpix(img, corners, region_size), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, corners);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat img;
    UMat corners;
    Size region_size;
    bool retval;

    // const char* keywords[] = { "img", "corners", "region_size", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "region_size"), region_size, ArgInfo("region_size", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::find4QuadCornerSubpix(img, corners, region_size), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, corners);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_findChessboardCorners(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Size patternSize;
    Mat corners;
    int flags=CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE;
    bool retval;

    // const char* keywords[] = { "image", "patternSize", "corners", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findChessboardCorners(image, patternSize, corners, flags), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, corners);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat image;
    Size patternSize;
    UMat corners;
    int flags=CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE;
    bool retval;

    // const char* keywords[] = { "image", "patternSize", "corners", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findChessboardCorners(image, patternSize, corners, flags), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, corners);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_findChessboardCornersSB(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Size patternSize;
    Mat corners;
    int flags=0;
    bool retval;

    // const char* keywords[] = { "image", "patternSize", "corners", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findChessboardCornersSB(image, patternSize, corners, flags), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, corners);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat image;
    Size patternSize;
    UMat corners;
    int flags=0;
    bool retval;

    // const char* keywords[] = { "image", "patternSize", "corners", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findChessboardCornersSB(image, patternSize, corners, flags), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, corners);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_findChessboardCornersSBWithMeta(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Size patternSize;
    Mat corners;
    int flags=0;
    Mat meta;
    bool retval;

    // const char* keywords[] = { "image", "patternSize", "flags", "corners", "meta", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "meta"), meta, ArgInfo("meta", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findChessboardCornersSB(image, patternSize, corners, flags, meta), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_2_to_10_tuple_except_bool
                return enif_make_tuple2(env, evision_from(env, corners), evision_from(env, meta));
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat image;
    Size patternSize;
    UMat corners;
    int flags=0;
    UMat meta;
    bool retval;

    // const char* keywords[] = { "image", "patternSize", "flags", "corners", "meta", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "meta"), meta, ArgInfo("meta", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findChessboardCornersSB(image, patternSize, corners, flags, meta), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_2_to_10_tuple_except_bool
                return enif_make_tuple2(env, evision_from(env, corners), evision_from(env, meta));
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_findCirclesGrid(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Size patternSize;
    Mat centers;
    int flags=0;
    Ptr<FeatureDetector> blobDetector;
    CirclesGridFinderParameters parameters;
    bool retval;

    // const char* keywords[] = { "image", "patternSize", "flags", "blobDetector", "parameters", "centers", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centers"), centers, ArgInfo("centers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blobDetector"), blobDetector, ArgInfo("blobDetector", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "parameters"), parameters, ArgInfo("parameters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findCirclesGrid(image, patternSize, centers, flags, blobDetector, parameters), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, centers);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat image;
    Size patternSize;
    UMat centers;
    int flags=0;
    Ptr<FeatureDetector> blobDetector;
    CirclesGridFinderParameters parameters;
    bool retval;

    // const char* keywords[] = { "image", "patternSize", "flags", "blobDetector", "parameters", "centers", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centers"), centers, ArgInfo("centers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blobDetector"), blobDetector, ArgInfo("blobDetector", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "parameters"), parameters, ArgInfo("parameters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findCirclesGrid(image, patternSize, centers, flags, blobDetector, parameters), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, centers);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    Mat image;
    Size patternSize;
    Mat centers;
    int flags=CALIB_CB_SYMMETRIC_GRID;
    Ptr<FeatureDetector> blobDetector=SimpleBlobDetector::create();
    bool retval;

    // const char* keywords[] = { "image", "patternSize", "centers", "flags", "blobDetector", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centers"), centers, ArgInfo("centers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blobDetector"), blobDetector, ArgInfo("blobDetector", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findCirclesGrid(image, patternSize, centers, flags, blobDetector), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, centers);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat image;
    Size patternSize;
    UMat centers;
    int flags=CALIB_CB_SYMMETRIC_GRID;
    Ptr<FeatureDetector> blobDetector=SimpleBlobDetector::create();
    bool retval;

    // const char* keywords[] = { "image", "patternSize", "centers", "flags", "blobDetector", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patternSize"), patternSize, ArgInfo("patternSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centers"), centers, ArgInfo("centers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blobDetector"), blobDetector, ArgInfo("blobDetector", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findCirclesGrid(image, patternSize, centers, flags, blobDetector), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, centers);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_findContours(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    vector_Mat contours;
    Mat hierarchy;
    int mode=0;
    int method=0;
    Point offset;

    // const char* keywords[] = { "image", "mode", "method", "contours", "hierarchy", "offset", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "contours"), contours, ArgInfo("contours", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hierarchy"), hierarchy, ArgInfo("hierarchy", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mode"), mode, ArgInfo("mode", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "offset"), offset, ArgInfo("offset", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::findContours(image, contours, hierarchy, mode, method, offset), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, contours), evision_from(env, hierarchy));
        }
    }

    }
    

    {
    UMat image;
    vector_UMat contours;
    UMat hierarchy;
    int mode=0;
    int method=0;
    Point offset;

    // const char* keywords[] = { "image", "mode", "method", "contours", "hierarchy", "offset", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "contours"), contours, ArgInfo("contours", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "hierarchy"), hierarchy, ArgInfo("hierarchy", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mode"), mode, ArgInfo("mode", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "offset"), offset, ArgInfo("offset", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::findContours(image, contours, hierarchy, mode, method, offset), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, contours), evision_from(env, hierarchy));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_findEssentialMat(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat points1;
    Mat points2;
    Mat cameraMatrix;
    int method=RANSAC;
    double prob=0.999;
    double threshold=1.0;
    int maxIters=1000;
    Mat mask;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "cameraMatrix", "method", "prob", "threshold", "maxIters", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "prob"), prob, ArgInfo("prob", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, cameraMatrix, method, prob, threshold, maxIters, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    UMat points1;
    UMat points2;
    UMat cameraMatrix;
    int method=RANSAC;
    double prob=0.999;
    double threshold=1.0;
    int maxIters=1000;
    UMat mask;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "cameraMatrix", "method", "prob", "threshold", "maxIters", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "prob"), prob, ArgInfo("prob", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, cameraMatrix, method, prob, threshold, maxIters, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    Mat points1;
    Mat points2;
    double focal=1.0;
    Point2d pp=Point2d(0, 0);
    int method=RANSAC;
    double prob=0.999;
    double threshold=1.0;
    int maxIters=1000;
    Mat mask;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "focal", "pp", "method", "prob", "threshold", "maxIters", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "focal"), focal, ArgInfo("focal", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pp"), pp, ArgInfo("pp", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "prob"), prob, ArgInfo("prob", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, focal, pp, method, prob, threshold, maxIters, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    UMat points1;
    UMat points2;
    double focal=1.0;
    Point2d pp=Point2d(0, 0);
    int method=RANSAC;
    double prob=0.999;
    double threshold=1.0;
    int maxIters=1000;
    UMat mask;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "focal", "pp", "method", "prob", "threshold", "maxIters", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "focal"), focal, ArgInfo("focal", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pp"), pp, ArgInfo("pp", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "prob"), prob, ArgInfo("prob", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, focal, pp, method, prob, threshold, maxIters, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    Mat points1;
    Mat points2;
    Mat cameraMatrix1;
    Mat distCoeffs1;
    Mat cameraMatrix2;
    Mat distCoeffs2;
    int method=RANSAC;
    double prob=0.999;
    double threshold=1.0;
    Mat mask;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "method", "prob", "threshold", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs1"), distCoeffs1, ArgInfo("distCoeffs1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs2"), distCoeffs2, ArgInfo("distCoeffs2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "prob"), prob, ArgInfo("prob", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, method, prob, threshold, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    UMat points1;
    UMat points2;
    UMat cameraMatrix1;
    UMat distCoeffs1;
    UMat cameraMatrix2;
    UMat distCoeffs2;
    int method=RANSAC;
    double prob=0.999;
    double threshold=1.0;
    UMat mask;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "method", "prob", "threshold", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs1"), distCoeffs1, ArgInfo("distCoeffs1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs2"), distCoeffs2, ArgInfo("distCoeffs2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "prob"), prob, ArgInfo("prob", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, method, prob, threshold, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    Mat points1;
    Mat points2;
    Mat cameraMatrix1;
    Mat cameraMatrix2;
    Mat dist_coeff1;
    Mat dist_coeff2;
    Mat mask;
    UsacParams params;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "cameraMatrix1", "cameraMatrix2", "dist_coeff1", "dist_coeff2", "params", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dist_coeff1"), dist_coeff1, ArgInfo("dist_coeff1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dist_coeff2"), dist_coeff2, ArgInfo("dist_coeff2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, cameraMatrix1, cameraMatrix2, dist_coeff1, dist_coeff2, mask, params), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    UMat points1;
    UMat points2;
    UMat cameraMatrix1;
    UMat cameraMatrix2;
    UMat dist_coeff1;
    UMat dist_coeff2;
    UMat mask;
    UsacParams params;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "cameraMatrix1", "cameraMatrix2", "dist_coeff1", "dist_coeff2", "params", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dist_coeff1"), dist_coeff1, ArgInfo("dist_coeff1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dist_coeff2"), dist_coeff2, ArgInfo("dist_coeff2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findEssentialMat(points1, points2, cameraMatrix1, cameraMatrix2, dist_coeff1, dist_coeff2, mask, params), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_findFundamentalMat(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat points1;
    Mat points2;
    int method=0;
    double ransacReprojThreshold=0;
    double confidence=0;
    int maxIters=0;
    Mat mask;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "method", "ransacReprojThreshold", "confidence", "maxIters", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacReprojThreshold"), ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findFundamentalMat(points1, points2, method, ransacReprojThreshold, confidence, maxIters, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    UMat points1;
    UMat points2;
    int method=0;
    double ransacReprojThreshold=0;
    double confidence=0;
    int maxIters=0;
    UMat mask;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "method", "ransacReprojThreshold", "confidence", "maxIters", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacReprojThreshold"), ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findFundamentalMat(points1, points2, method, ransacReprojThreshold, confidence, maxIters, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    Mat points1;
    Mat points2;
    int method=FM_RANSAC;
    double ransacReprojThreshold=3.;
    double confidence=0.99;
    Mat mask;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "method", "ransacReprojThreshold", "confidence", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacReprojThreshold"), ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findFundamentalMat(points1, points2, method, ransacReprojThreshold, confidence, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    UMat points1;
    UMat points2;
    int method=FM_RANSAC;
    double ransacReprojThreshold=3.;
    double confidence=0.99;
    UMat mask;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "method", "ransacReprojThreshold", "confidence", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacReprojThreshold"), ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findFundamentalMat(points1, points2, method, ransacReprojThreshold, confidence, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    Mat points1;
    Mat points2;
    Mat mask;
    UsacParams params;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "params", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findFundamentalMat(points1, points2, mask, params), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    UMat points1;
    UMat points2;
    UMat mask;
    UsacParams params;
    Mat retval;

    // const char* keywords[] = { "points1", "points2", "params", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findFundamentalMat(points1, points2, mask, params), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_findHomography(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat srcPoints;
    Mat dstPoints;
    int method=0;
    double ransacReprojThreshold=3;
    Mat mask;
    int maxIters=2000;
    double confidence=0.995;
    Mat retval;

    // const char* keywords[] = { "srcPoints", "dstPoints", "method", "ransacReprojThreshold", "mask", "maxIters", "confidence", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "srcPoints"), srcPoints, ArgInfo("srcPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstPoints"), dstPoints, ArgInfo("dstPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacReprojThreshold"), ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findHomography(srcPoints, dstPoints, method, ransacReprojThreshold, mask, maxIters, confidence), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    UMat srcPoints;
    UMat dstPoints;
    int method=0;
    double ransacReprojThreshold=3;
    UMat mask;
    int maxIters=2000;
    double confidence=0.995;
    Mat retval;

    // const char* keywords[] = { "srcPoints", "dstPoints", "method", "ransacReprojThreshold", "mask", "maxIters", "confidence", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "srcPoints"), srcPoints, ArgInfo("srcPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstPoints"), dstPoints, ArgInfo("dstPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ransacReprojThreshold"), ransacReprojThreshold, ArgInfo("ransacReprojThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findHomography(srcPoints, dstPoints, method, ransacReprojThreshold, mask, maxIters, confidence), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    Mat srcPoints;
    Mat dstPoints;
    Mat mask;
    UsacParams params;
    Mat retval;

    // const char* keywords[] = { "srcPoints", "dstPoints", "params", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "srcPoints"), srcPoints, ArgInfo("srcPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstPoints"), dstPoints, ArgInfo("dstPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findHomography(srcPoints, dstPoints, mask, params), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }
    

    {
    UMat srcPoints;
    UMat dstPoints;
    UMat mask;
    UsacParams params;
    Mat retval;

    // const char* keywords[] = { "srcPoints", "dstPoints", "params", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "srcPoints"), srcPoints, ArgInfo("srcPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstPoints"), dstPoints, ArgInfo("dstPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findHomography(srcPoints, dstPoints, mask, params), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, mask));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_findNonZero(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat idx;

    // const char* keywords[] = { "src", "idx", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "idx"), idx, ArgInfo("idx", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::findNonZero(src, idx), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, idx);
        }
    }

    }
    

    {
    UMat src;
    UMat idx;

    // const char* keywords[] = { "src", "idx", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "idx"), idx, ArgInfo("idx", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::findNonZero(src, idx), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, idx);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_findTransformECC(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat templateImage;
    Mat inputImage;
    Mat warpMatrix;
    int motionType=0;
    TermCriteria criteria;
    Mat inputMask;
    int gaussFiltSize=0;
    double retval;

    // const char* keywords[] = { "templateImage", "inputImage", "warpMatrix", "motionType", "criteria", "inputMask", "gaussFiltSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "templateImage"), templateImage, ArgInfo("templateImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inputImage"), inputImage, ArgInfo("inputImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "warpMatrix"), warpMatrix, ArgInfo("warpMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "motionType"), motionType, ArgInfo("motionType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inputMask"), inputMask, ArgInfo("inputMask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "gaussFiltSize"), gaussFiltSize, ArgInfo("gaussFiltSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findTransformECC(templateImage, inputImage, warpMatrix, motionType, criteria, inputMask, gaussFiltSize), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, warpMatrix));
        }
    }

    }
    

    {
    UMat templateImage;
    UMat inputImage;
    UMat warpMatrix;
    int motionType=0;
    TermCriteria criteria;
    UMat inputMask;
    int gaussFiltSize=0;
    double retval;

    // const char* keywords[] = { "templateImage", "inputImage", "warpMatrix", "motionType", "criteria", "inputMask", "gaussFiltSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "templateImage"), templateImage, ArgInfo("templateImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inputImage"), inputImage, ArgInfo("inputImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "warpMatrix"), warpMatrix, ArgInfo("warpMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "motionType"), motionType, ArgInfo("motionType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inputMask"), inputMask, ArgInfo("inputMask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "gaussFiltSize"), gaussFiltSize, ArgInfo("gaussFiltSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findTransformECC(templateImage, inputImage, warpMatrix, motionType, criteria, inputMask, gaussFiltSize), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, warpMatrix));
        }
    }

    }
    

    {
    Mat templateImage;
    Mat inputImage;
    Mat warpMatrix;
    int motionType=MOTION_AFFINE;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001);
    Mat inputMask;
    double retval;

    // const char* keywords[] = { "templateImage", "inputImage", "warpMatrix", "motionType", "criteria", "inputMask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "templateImage"), templateImage, ArgInfo("templateImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inputImage"), inputImage, ArgInfo("inputImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "warpMatrix"), warpMatrix, ArgInfo("warpMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "motionType"), motionType, ArgInfo("motionType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inputMask"), inputMask, ArgInfo("inputMask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findTransformECC(templateImage, inputImage, warpMatrix, motionType, criteria, inputMask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, warpMatrix));
        }
    }

    }
    

    {
    UMat templateImage;
    UMat inputImage;
    UMat warpMatrix;
    int motionType=MOTION_AFFINE;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001);
    UMat inputMask;
    double retval;

    // const char* keywords[] = { "templateImage", "inputImage", "warpMatrix", "motionType", "criteria", "inputMask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "templateImage"), templateImage, ArgInfo("templateImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inputImage"), inputImage, ArgInfo("inputImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "warpMatrix"), warpMatrix, ArgInfo("warpMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "motionType"), motionType, ArgInfo("motionType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inputMask"), inputMask, ArgInfo("inputMask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::findTransformECC(templateImage, inputImage, warpMatrix, motionType, criteria, inputMask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, warpMatrix));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fitEllipse(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat points;
    RotatedRect retval;

    // const char* keywords[] = { "points", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::fitEllipse(points), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat points;
    RotatedRect retval;

    // const char* keywords[] = { "points", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::fitEllipse(points), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fitEllipseAMS(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat points;
    RotatedRect retval;

    // const char* keywords[] = { "points", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::fitEllipseAMS(points), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat points;
    RotatedRect retval;

    // const char* keywords[] = { "points", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::fitEllipseAMS(points), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fitEllipseDirect(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat points;
    RotatedRect retval;

    // const char* keywords[] = { "points", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::fitEllipseDirect(points), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat points;
    RotatedRect retval;

    // const char* keywords[] = { "points", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::fitEllipseDirect(points), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fitLine(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat points;
    Mat line;
    int distType=0;
    double param=0;
    double reps=0;
    double aeps=0;

    // const char* keywords[] = { "points", "distType", "param", "reps", "aeps", "line", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "line"), line, ArgInfo("line", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distType"), distType, ArgInfo("distType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "param"), param, ArgInfo("param", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "reps"), reps, ArgInfo("reps", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "aeps"), aeps, ArgInfo("aeps", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fitLine(points, line, distType, param, reps, aeps), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, line);
        }
    }

    }
    

    {
    UMat points;
    UMat line;
    int distType=0;
    double param=0;
    double reps=0;
    double aeps=0;

    // const char* keywords[] = { "points", "distType", "param", "reps", "aeps", "line", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "line"), line, ArgInfo("line", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distType"), distType, ArgInfo("distType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "param"), param, ArgInfo("param", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "reps"), reps, ArgInfo("reps", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "aeps"), aeps, ArgInfo("aeps", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fitLine(points, line, distType, param, reps, aeps), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, line);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_flip(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int flipCode=0;

    // const char* keywords[] = { "src", "flipCode", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flipCode"), flipCode, ArgInfo("flipCode", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::flip(src, dst, flipCode), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int flipCode=0;

    // const char* keywords[] = { "src", "flipCode", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flipCode"), flipCode, ArgInfo("flipCode", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::flip(src, dst, flipCode), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_floodFill(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat mask;
    Point seedPoint;
    Scalar newVal;
    Rect rect;
    Scalar loDiff;
    Scalar upDiff;
    int flags=4;
    int retval;

    // const char* keywords[] = { "image", "mask", "seedPoint", "newVal", "loDiff", "upDiff", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "seedPoint"), seedPoint, ArgInfo("seedPoint", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newVal"), newVal, ArgInfo("newVal", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "loDiff"), loDiff, ArgInfo("loDiff", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "upDiff"), upDiff, ArgInfo("upDiff", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::floodFill(image, mask, seedPoint, newVal, &rect, loDiff, upDiff, flags), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, image), evision_from(env, mask), evision_from(env, rect));
        }
    }

    }
    

    {
    UMat image;
    UMat mask;
    Point seedPoint;
    Scalar newVal;
    Rect rect;
    Scalar loDiff;
    Scalar upDiff;
    int flags=4;
    int retval;

    // const char* keywords[] = { "image", "mask", "seedPoint", "newVal", "loDiff", "upDiff", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "seedPoint"), seedPoint, ArgInfo("seedPoint", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newVal"), newVal, ArgInfo("newVal", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "loDiff"), loDiff, ArgInfo("loDiff", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "upDiff"), upDiff, ArgInfo("upDiff", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::floodFill(image, mask, seedPoint, newVal, &rect, loDiff, upDiff, flags), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, image), evision_from(env, mask), evision_from(env, rect));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_gemm(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    double alpha=0;
    Mat src3;
    double beta=0;
    Mat dst;
    int flags=0;

    // const char* keywords[] = { "src1", "src2", "alpha", "src3", "beta", "dst", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src3"), src3, ArgInfo("src3", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "beta"), beta, ArgInfo("beta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::gemm(src1, src2, alpha, src3, beta, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    double alpha=0;
    UMat src3;
    double beta=0;
    UMat dst;
    int flags=0;

    // const char* keywords[] = { "src1", "src2", "alpha", "src3", "beta", "dst", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src3"), src3, ArgInfo("src3", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "beta"), beta, ArgInfo("beta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::gemm(src1, src2, alpha, src3, beta, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getAffineTransform(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat retval;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getAffineTransform(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    Mat retval;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getAffineTransform(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getBuildInformation(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getBuildInformation(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getCPUFeaturesLine(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::string retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getCPUFeaturesLine(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getCPUTickCount(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int64 retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getCPUTickCount(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getDefaultNewCameraMatrix(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat cameraMatrix;
    Size imgsize;
    bool centerPrincipalPoint=false;
    Mat retval;

    // const char* keywords[] = { "cameraMatrix", "imgsize", "centerPrincipalPoint", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgsize"), imgsize, ArgInfo("imgsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centerPrincipalPoint"), centerPrincipalPoint, ArgInfo("centerPrincipalPoint", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getDefaultNewCameraMatrix(cameraMatrix, imgsize, centerPrincipalPoint), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat cameraMatrix;
    Size imgsize;
    bool centerPrincipalPoint=false;
    Mat retval;

    // const char* keywords[] = { "cameraMatrix", "imgsize", "centerPrincipalPoint", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgsize"), imgsize, ArgInfo("imgsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centerPrincipalPoint"), centerPrincipalPoint, ArgInfo("centerPrincipalPoint", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getDefaultNewCameraMatrix(cameraMatrix, imgsize, centerPrincipalPoint), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getDerivKernels(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat kx;
    Mat ky;
    int dx=0;
    int dy=0;
    int ksize=0;
    bool normalize=false;
    int ktype=CV_32F;

    // const char* keywords[] = { "dx", "dy", "ksize", "kx", "ky", "normalize", "ktype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "kx"), kx, ArgInfo("kx", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ky"), ky, ArgInfo("ky", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dx"), dx, ArgInfo("dx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dy"), dy, ArgInfo("dy", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normalize"), normalize, ArgInfo("normalize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ktype"), ktype, ArgInfo("ktype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::getDerivKernels(kx, ky, dx, dy, ksize, normalize, ktype), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, kx), evision_from(env, ky));
        }
    }

    }
    

    {
    UMat kx;
    UMat ky;
    int dx=0;
    int dy=0;
    int ksize=0;
    bool normalize=false;
    int ktype=CV_32F;

    // const char* keywords[] = { "dx", "dy", "ksize", "kx", "ky", "normalize", "ktype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "kx"), kx, ArgInfo("kx", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ky"), ky, ArgInfo("ky", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dx"), dx, ArgInfo("dx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dy"), dy, ArgInfo("dy", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normalize"), normalize, ArgInfo("normalize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ktype"), ktype, ArgInfo("ktype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::getDerivKernels(kx, ky, dx, dy, ksize, normalize, ktype), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, kx), evision_from(env, ky));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getFontScaleFromHeight(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int fontFace=0;
    int pixelHeight=0;
    int thickness=1;
    double retval;

    // const char* keywords[] = { "fontFace", "pixelHeight", "thickness", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "fontFace"), fontFace, ArgInfo("fontFace", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pixelHeight"), pixelHeight, ArgInfo("pixelHeight", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getFontScaleFromHeight(fontFace, pixelHeight, thickness), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getGaborKernel(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Size ksize;
    double sigma=0;
    double theta=0;
    double lambd=0;
    double gamma=0;
    double psi=CV_PI*0.5;
    int ktype=CV_64F;
    Mat retval;

    // const char* keywords[] = { "ksize", "sigma", "theta", "lambd", "gamma", "psi", "ktype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma"), sigma, ArgInfo("sigma", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "theta"), theta, ArgInfo("theta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lambd"), lambd, ArgInfo("lambd", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "gamma"), gamma, ArgInfo("gamma", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "psi"), psi, ArgInfo("psi", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ktype"), ktype, ArgInfo("ktype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getGaborKernel(ksize, sigma, theta, lambd, gamma, psi, ktype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getGaussianKernel(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int ksize=0;
    double sigma=0;
    int ktype=CV_64F;
    Mat retval;

    // const char* keywords[] = { "ksize", "sigma", "ktype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma"), sigma, ArgInfo("sigma", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ktype"), ktype, ArgInfo("ktype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getGaussianKernel(ksize, sigma, ktype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getHardwareFeatureName(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int feature=0;
    String retval;

    // const char* keywords[] = { "feature", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "feature"), feature, ArgInfo("feature", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getHardwareFeatureName(feature), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getLogLevel(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getLogLevel(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getNumThreads(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getNumThreads(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getNumberOfCPUs(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getNumberOfCPUs(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getOptimalDFTSize(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int vecsize=0;
    int retval;

    // const char* keywords[] = { "vecsize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "vecsize"), vecsize, ArgInfo("vecsize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getOptimalDFTSize(vecsize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getOptimalNewCameraMatrix(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat cameraMatrix;
    Mat distCoeffs;
    Size imageSize;
    double alpha=0;
    Size newImgSize;
    Rect validPixROI;
    bool centerPrincipalPoint=false;
    Mat retval;

    // const char* keywords[] = { "cameraMatrix", "distCoeffs", "imageSize", "alpha", "newImgSize", "centerPrincipalPoint", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newImgSize"), newImgSize, ArgInfo("newImgSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centerPrincipalPoint"), centerPrincipalPoint, ArgInfo("centerPrincipalPoint", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getOptimalNewCameraMatrix(cameraMatrix, distCoeffs, imageSize, alpha, newImgSize, &validPixROI, centerPrincipalPoint), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, validPixROI));
        }
    }

    }
    

    {
    UMat cameraMatrix;
    UMat distCoeffs;
    Size imageSize;
    double alpha=0;
    Size newImgSize;
    Rect validPixROI;
    bool centerPrincipalPoint=false;
    Mat retval;

    // const char* keywords[] = { "cameraMatrix", "distCoeffs", "imageSize", "alpha", "newImgSize", "centerPrincipalPoint", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newImgSize"), newImgSize, ArgInfo("newImgSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centerPrincipalPoint"), centerPrincipalPoint, ArgInfo("centerPrincipalPoint", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getOptimalNewCameraMatrix(cameraMatrix, distCoeffs, imageSize, alpha, newImgSize, &validPixROI, centerPrincipalPoint), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, validPixROI));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getPerspectiveTransform(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int solveMethod=DECOMP_LU;
    Mat retval;

    // const char* keywords[] = { "src", "dst", "solveMethod", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "solveMethod"), solveMethod, ArgInfo("solveMethod", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getPerspectiveTransform(src, dst, solveMethod), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int solveMethod=DECOMP_LU;
    Mat retval;

    // const char* keywords[] = { "src", "dst", "solveMethod", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "solveMethod"), solveMethod, ArgInfo("solveMethod", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getPerspectiveTransform(src, dst, solveMethod), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getRectSubPix(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Size patchSize;
    Point2f center;
    Mat patch;
    int patchType=-1;

    // const char* keywords[] = { "image", "patchSize", "center", "patch", "patchType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patchSize"), patchSize, ArgInfo("patchSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patch"), patch, ArgInfo("patch", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patchType"), patchType, ArgInfo("patchType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::getRectSubPix(image, patchSize, center, patch, patchType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, patch);
        }
    }

    }
    

    {
    UMat image;
    Size patchSize;
    Point2f center;
    UMat patch;
    int patchType=-1;

    // const char* keywords[] = { "image", "patchSize", "center", "patch", "patchType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patchSize"), patchSize, ArgInfo("patchSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patch"), patch, ArgInfo("patch", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "patchType"), patchType, ArgInfo("patchType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::getRectSubPix(image, patchSize, center, patch, patchType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, patch);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getRotationMatrix2D(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Point2f center;
    double angle=0;
    double scale=0;
    Mat retval;

    // const char* keywords[] = { "center", "angle", "scale", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angle"), angle, ArgInfo("angle", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getRotationMatrix2D(center, angle, scale), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getStructuringElement(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int shape=0;
    Size ksize;
    Point anchor=Point(-1,-1);
    Mat retval;

    // const char* keywords[] = { "shape", "ksize", "anchor", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "shape"), shape, ArgInfo("shape", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getStructuringElement(shape, ksize, anchor), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getTextSize(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String text;
    int fontFace=0;
    double fontScale=0;
    int thickness=0;
    int baseLine;
    Size retval;

    // const char* keywords[] = { "text", "fontFace", "fontScale", "thickness", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "text"), text, ArgInfo("text", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fontFace"), fontFace, ArgInfo("fontFace", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fontScale"), fontScale, ArgInfo("fontScale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getTextSize(text, fontFace, fontScale, thickness, &baseLine), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, baseLine));
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getThreadNum(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getThreadNum(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getTickCount(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int64 retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getTickCount(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getTickFrequency(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    double retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getTickFrequency(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getTrackbarPos(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String trackbarname;
    String winname;
    int retval;

    // const char* keywords[] = { "trackbarname", "winname", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "trackbarname"), trackbarname, ArgInfo("trackbarname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getTrackbarPos(trackbarname, winname), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getValidDisparityROI(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Rect roi1;
    Rect roi2;
    int minDisparity=0;
    int numberOfDisparities=0;
    int blockSize=0;
    Rect retval;

    // const char* keywords[] = { "roi1", "roi2", "minDisparity", "numberOfDisparities", "blockSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "roi1"), roi1, ArgInfo("roi1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "roi2"), roi2, ArgInfo("roi2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minDisparity"), minDisparity, ArgInfo("minDisparity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "numberOfDisparities"), numberOfDisparities, ArgInfo("numberOfDisparities", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getValidDisparityROI(roi1, roi2, minDisparity, numberOfDisparities, blockSize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getVersionMajor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getVersionMajor(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getVersionMinor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getVersionMinor(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getVersionRevision(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getVersionRevision(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getVersionString(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getVersionString(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getWindowImageRect(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String winname;
    Rect retval;

    // const char* keywords[] = { "winname", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getWindowImageRect(winname), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_getWindowProperty(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String winname;
    int prop_id=0;
    double retval;

    // const char* keywords[] = { "winname", "prop_id", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "prop_id"), prop_id, ArgInfo("prop_id", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::getWindowProperty(winname, prop_id), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_goodFeaturesToTrack(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat corners;
    int maxCorners=0;
    double qualityLevel=0;
    double minDistance=0;
    Mat mask;
    int blockSize=3;
    bool useHarrisDetector=false;
    double k=0.04;

    // const char* keywords[] = { "image", "maxCorners", "qualityLevel", "minDistance", "corners", "mask", "blockSize", "useHarrisDetector", "k", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxCorners"), maxCorners, ArgInfo("maxCorners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qualityLevel"), qualityLevel, ArgInfo("qualityLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minDistance"), minDistance, ArgInfo("minDistance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useHarrisDetector"), useHarrisDetector, ArgInfo("useHarrisDetector", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), k, ArgInfo("k", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, blockSize, useHarrisDetector, k), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, corners);
        }
    }

    }
    

    {
    UMat image;
    UMat corners;
    int maxCorners=0;
    double qualityLevel=0;
    double minDistance=0;
    UMat mask;
    int blockSize=3;
    bool useHarrisDetector=false;
    double k=0.04;

    // const char* keywords[] = { "image", "maxCorners", "qualityLevel", "minDistance", "corners", "mask", "blockSize", "useHarrisDetector", "k", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxCorners"), maxCorners, ArgInfo("maxCorners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qualityLevel"), qualityLevel, ArgInfo("qualityLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minDistance"), minDistance, ArgInfo("minDistance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useHarrisDetector"), useHarrisDetector, ArgInfo("useHarrisDetector", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), k, ArgInfo("k", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, blockSize, useHarrisDetector, k), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, corners);
        }
    }

    }
    

    {
    Mat image;
    Mat corners;
    int maxCorners=0;
    double qualityLevel=0;
    double minDistance=0;
    Mat mask;
    int blockSize=0;
    int gradientSize=0;
    bool useHarrisDetector=false;
    double k=0.04;

    // const char* keywords[] = { "image", "maxCorners", "qualityLevel", "minDistance", "mask", "blockSize", "gradientSize", "corners", "useHarrisDetector", "k", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxCorners"), maxCorners, ArgInfo("maxCorners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qualityLevel"), qualityLevel, ArgInfo("qualityLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minDistance"), minDistance, ArgInfo("minDistance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "gradientSize"), gradientSize, ArgInfo("gradientSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useHarrisDetector"), useHarrisDetector, ArgInfo("useHarrisDetector", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), k, ArgInfo("k", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, blockSize, gradientSize, useHarrisDetector, k), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, corners);
        }
    }

    }
    

    {
    UMat image;
    UMat corners;
    int maxCorners=0;
    double qualityLevel=0;
    double minDistance=0;
    UMat mask;
    int blockSize=0;
    int gradientSize=0;
    bool useHarrisDetector=false;
    double k=0.04;

    // const char* keywords[] = { "image", "maxCorners", "qualityLevel", "minDistance", "mask", "blockSize", "gradientSize", "corners", "useHarrisDetector", "k", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxCorners"), maxCorners, ArgInfo("maxCorners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qualityLevel"), qualityLevel, ArgInfo("qualityLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minDistance"), minDistance, ArgInfo("minDistance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "gradientSize"), gradientSize, ArgInfo("gradientSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useHarrisDetector"), useHarrisDetector, ArgInfo("useHarrisDetector", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), k, ArgInfo("k", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, blockSize, gradientSize, useHarrisDetector, k), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, corners);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_goodFeaturesToTrackWithQuality(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat corners;
    int maxCorners=0;
    double qualityLevel=0;
    double minDistance=0;
    Mat mask;
    Mat cornersQuality;
    int blockSize=3;
    int gradientSize=3;
    bool useHarrisDetector=false;
    double k=0.04;

    // const char* keywords[] = { "image", "maxCorners", "qualityLevel", "minDistance", "mask", "corners", "cornersQuality", "blockSize", "gradientSize", "useHarrisDetector", "k", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxCorners"), maxCorners, ArgInfo("maxCorners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qualityLevel"), qualityLevel, ArgInfo("qualityLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minDistance"), minDistance, ArgInfo("minDistance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cornersQuality"), cornersQuality, ArgInfo("cornersQuality", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "gradientSize"), gradientSize, ArgInfo("gradientSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useHarrisDetector"), useHarrisDetector, ArgInfo("useHarrisDetector", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), k, ArgInfo("k", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, cornersQuality, blockSize, gradientSize, useHarrisDetector, k), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, corners), evision_from(env, cornersQuality));
        }
    }

    }
    

    {
    UMat image;
    UMat corners;
    int maxCorners=0;
    double qualityLevel=0;
    double minDistance=0;
    UMat mask;
    UMat cornersQuality;
    int blockSize=3;
    int gradientSize=3;
    bool useHarrisDetector=false;
    double k=0.04;

    // const char* keywords[] = { "image", "maxCorners", "qualityLevel", "minDistance", "mask", "corners", "cornersQuality", "blockSize", "gradientSize", "useHarrisDetector", "k", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxCorners"), maxCorners, ArgInfo("maxCorners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "qualityLevel"), qualityLevel, ArgInfo("qualityLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minDistance"), minDistance, ArgInfo("minDistance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cornersQuality"), cornersQuality, ArgInfo("cornersQuality", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blockSize"), blockSize, ArgInfo("blockSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "gradientSize"), gradientSize, ArgInfo("gradientSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useHarrisDetector"), useHarrisDetector, ArgInfo("useHarrisDetector", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), k, ArgInfo("k", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, cornersQuality, blockSize, gradientSize, useHarrisDetector, k), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, corners), evision_from(env, cornersQuality));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_grabCut(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    Mat mask;
    Rect rect;
    Mat bgdModel;
    Mat fgdModel;
    int iterCount=0;
    int mode=GC_EVAL;

    // const char* keywords[] = { "img", "mask", "rect", "bgdModel", "fgdModel", "iterCount", "mode", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rect"), rect, ArgInfo("rect", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bgdModel"), bgdModel, ArgInfo("bgdModel", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fgdModel"), fgdModel, ArgInfo("fgdModel", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterCount"), iterCount, ArgInfo("iterCount", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mode"), mode, ArgInfo("mode", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::grabCut(img, mask, rect, bgdModel, fgdModel, iterCount, mode), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, mask), evision_from(env, bgdModel), evision_from(env, fgdModel));
        }
    }

    }
    

    {
    UMat img;
    UMat mask;
    Rect rect;
    UMat bgdModel;
    UMat fgdModel;
    int iterCount=0;
    int mode=GC_EVAL;

    // const char* keywords[] = { "img", "mask", "rect", "bgdModel", "fgdModel", "iterCount", "mode", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rect"), rect, ArgInfo("rect", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bgdModel"), bgdModel, ArgInfo("bgdModel", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fgdModel"), fgdModel, ArgInfo("fgdModel", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterCount"), iterCount, ArgInfo("iterCount", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mode"), mode, ArgInfo("mode", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::grabCut(img, mask, rect, bgdModel, fgdModel, iterCount, mode), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, mask), evision_from(env, bgdModel), evision_from(env, fgdModel));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_groupRectangles(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_Rect rectList;
    vector_int weights;
    int groupThreshold=0;
    double eps=0.2;

    // const char* keywords[] = { "rectList", "groupThreshold", "eps", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rectList"), rectList, ArgInfo("rectList", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "groupThreshold"), groupThreshold, ArgInfo("groupThreshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eps"), eps, ArgInfo("eps", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::groupRectangles(rectList, weights, groupThreshold, eps), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, rectList), evision_from(env, weights));
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_haveImageReader(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filename;
    bool retval;

    // const char* keywords[] = { "filename", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filename"), filename, ArgInfo("filename", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::haveImageReader(filename), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_haveImageWriter(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filename;
    bool retval;

    // const char* keywords[] = { "filename", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filename"), filename, ArgInfo("filename", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::haveImageWriter(filename), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_haveOpenVX(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::haveOpenVX(), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_hconcat(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat src;
    Mat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::hconcat(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    vector_UMat src;
    UMat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::hconcat(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_idct(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int flags=0;

    // const char* keywords[] = { "src", "dst", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::idct(src, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int flags=0;

    // const char* keywords[] = { "src", "dst", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::idct(src, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_idft(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int flags=0;
    int nonzeroRows=0;

    // const char* keywords[] = { "src", "dst", "flags", "nonzeroRows", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nonzeroRows"), nonzeroRows, ArgInfo("nonzeroRows", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::idft(src, dst, flags, nonzeroRows), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int flags=0;
    int nonzeroRows=0;

    // const char* keywords[] = { "src", "dst", "flags", "nonzeroRows", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nonzeroRows"), nonzeroRows, ArgInfo("nonzeroRows", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::idft(src, dst, flags, nonzeroRows), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_illuminationChange(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat mask;
    Mat dst;
    float alpha=0.2f;
    float beta=0.4f;

    // const char* keywords[] = { "src", "mask", "dst", "alpha", "beta", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "beta"), beta, ArgInfo("beta", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::illuminationChange(src, mask, dst, alpha, beta), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat mask;
    UMat dst;
    float alpha=0.2f;
    float beta=0.4f;

    // const char* keywords[] = { "src", "mask", "dst", "alpha", "beta", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "beta"), beta, ArgInfo("beta", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::illuminationChange(src, mask, dst, alpha, beta), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_imcount(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filename;
    int flags=IMREAD_ANYCOLOR;
    size_t retval;

    // const char* keywords[] = { "filename", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filename"), filename, ArgInfo("filename", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::imcount(filename, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_imencode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String ext;
    Mat img;
    vector_uchar buf;
    vector_int params=std::vector<int>();
    bool retval;

    // const char* keywords[] = { "ext", "img", "params", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "ext"), ext, ArgInfo("ext", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::imencode(ext, img, buf, params), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                bool success = false;
                ERL_NIF_TERM binary_erl_term = evision_from_as_binary(env, buf, success);
                if (success) {
                    return binary_erl_term;
                } else {
                    return evision::nif::error(env, "out of memory");
                }
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    String ext;
    UMat img;
    vector_uchar buf;
    vector_int params=std::vector<int>();
    bool retval;

    // const char* keywords[] = { "ext", "img", "params", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "ext"), ext, ArgInfo("ext", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::imencode(ext, img, buf, params), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                bool success = false;
                ERL_NIF_TERM binary_erl_term = evision_from_as_binary(env, buf, success);
                if (success) {
                    return binary_erl_term;
                } else {
                    return evision::nif::error(env, "out of memory");
                }
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_imread(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filename;
    int flags=IMREAD_COLOR;
    Mat retval;

    // const char* keywords[] = { "filename", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filename"), filename, ArgInfo("filename", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::imread(filename, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_imreadmulti(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String filename;
    vector_Mat mats;
    int flags=IMREAD_ANYCOLOR;
    bool retval;

    // const char* keywords[] = { "filename", "mats", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filename"), filename, ArgInfo("filename", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mats"), mats, ArgInfo("mats", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::imreadmulti(filename, mats, flags), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, mats);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    String filename;
    vector_Mat mats;
    int start=0;
    int count=0;
    int flags=IMREAD_ANYCOLOR;
    bool retval;

    // const char* keywords[] = { "filename", "start", "count", "mats", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filename"), filename, ArgInfo("filename", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mats"), mats, ArgInfo("mats", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "start"), start, ArgInfo("start", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "count"), count, ArgInfo("count", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::imreadmulti(filename, mats, start, count, flags), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, mats);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_imwrite(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String filename;
    Mat img;
    vector_int params=std::vector<int>();
    bool retval;

    // const char* keywords[] = { "filename", "img", "params", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filename"), filename, ArgInfo("filename", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::imwrite(filename, img, params), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    String filename;
    UMat img;
    vector_int params=std::vector<int>();
    bool retval;

    // const char* keywords[] = { "filename", "img", "params", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filename"), filename, ArgInfo("filename", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::imwrite(filename, img, params), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_imwritemulti(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String filename;
    vector_Mat img;
    vector_int params=std::vector<int>();
    bool retval;

    // const char* keywords[] = { "filename", "img", "params", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filename"), filename, ArgInfo("filename", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::imwritemulti(filename, img, params), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    String filename;
    vector_UMat img;
    vector_int params=std::vector<int>();
    bool retval;

    // const char* keywords[] = { "filename", "img", "params", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filename"), filename, ArgInfo("filename", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::imwritemulti(filename, img, params), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_inRange(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat lowerb;
    Mat upperb;
    Mat dst;

    // const char* keywords[] = { "src", "lowerb", "upperb", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lowerb"), lowerb, ArgInfo("lowerb", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "upperb"), upperb, ArgInfo("upperb", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::inRange(src, lowerb, upperb, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat lowerb;
    UMat upperb;
    UMat dst;

    // const char* keywords[] = { "src", "lowerb", "upperb", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lowerb"), lowerb, ArgInfo("lowerb", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "upperb"), upperb, ArgInfo("upperb", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::inRange(src, lowerb, upperb, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_initCameraMatrix2D(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat objectPoints;
    vector_Mat imagePoints;
    Size imageSize;
    double aspectRatio=1.0;
    Mat retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "aspectRatio", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "aspectRatio"), aspectRatio, ArgInfo("aspectRatio", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::initCameraMatrix2D(objectPoints, imagePoints, imageSize, aspectRatio), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    vector_UMat objectPoints;
    vector_UMat imagePoints;
    Size imageSize;
    double aspectRatio=1.0;
    Mat retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "imageSize", "aspectRatio", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "aspectRatio"), aspectRatio, ArgInfo("aspectRatio", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::initCameraMatrix2D(objectPoints, imagePoints, imageSize, aspectRatio), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_initInverseRectificationMap(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat cameraMatrix;
    Mat distCoeffs;
    Mat R;
    Mat newCameraMatrix;
    Size size;
    int m1type=0;
    Mat map1;
    Mat map2;

    // const char* keywords[] = { "cameraMatrix", "distCoeffs", "R", "newCameraMatrix", "size", "m1type", "map1", "map2", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newCameraMatrix"), newCameraMatrix, ArgInfo("newCameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m1type"), m1type, ArgInfo("m1type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map1"), map1, ArgInfo("map1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map2"), map2, ArgInfo("map2", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::initInverseRectificationMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type, map1, map2), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, map1), evision_from(env, map2));
        }
    }

    }
    

    {
    UMat cameraMatrix;
    UMat distCoeffs;
    UMat R;
    UMat newCameraMatrix;
    Size size;
    int m1type=0;
    UMat map1;
    UMat map2;

    // const char* keywords[] = { "cameraMatrix", "distCoeffs", "R", "newCameraMatrix", "size", "m1type", "map1", "map2", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newCameraMatrix"), newCameraMatrix, ArgInfo("newCameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m1type"), m1type, ArgInfo("m1type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map1"), map1, ArgInfo("map1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map2"), map2, ArgInfo("map2", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::initInverseRectificationMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type, map1, map2), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, map1), evision_from(env, map2));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_initUndistortRectifyMap(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat cameraMatrix;
    Mat distCoeffs;
    Mat R;
    Mat newCameraMatrix;
    Size size;
    int m1type=0;
    Mat map1;
    Mat map2;

    // const char* keywords[] = { "cameraMatrix", "distCoeffs", "R", "newCameraMatrix", "size", "m1type", "map1", "map2", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newCameraMatrix"), newCameraMatrix, ArgInfo("newCameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m1type"), m1type, ArgInfo("m1type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map1"), map1, ArgInfo("map1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map2"), map2, ArgInfo("map2", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::initUndistortRectifyMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type, map1, map2), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, map1), evision_from(env, map2));
        }
    }

    }
    

    {
    UMat cameraMatrix;
    UMat distCoeffs;
    UMat R;
    UMat newCameraMatrix;
    Size size;
    int m1type=0;
    UMat map1;
    UMat map2;

    // const char* keywords[] = { "cameraMatrix", "distCoeffs", "R", "newCameraMatrix", "size", "m1type", "map1", "map2", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newCameraMatrix"), newCameraMatrix, ArgInfo("newCameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m1type"), m1type, ArgInfo("m1type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map1"), map1, ArgInfo("map1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map2"), map2, ArgInfo("map2", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::initUndistortRectifyMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type, map1, map2), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, map1), evision_from(env, map2));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_inpaint(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat inpaintMask;
    Mat dst;
    double inpaintRadius=0;
    int flags=0;

    // const char* keywords[] = { "src", "inpaintMask", "inpaintRadius", "flags", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inpaintMask"), inpaintMask, ArgInfo("inpaintMask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inpaintRadius"), inpaintRadius, ArgInfo("inpaintRadius", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::inpaint(src, inpaintMask, dst, inpaintRadius, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat inpaintMask;
    UMat dst;
    double inpaintRadius=0;
    int flags=0;

    // const char* keywords[] = { "src", "inpaintMask", "inpaintRadius", "flags", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inpaintMask"), inpaintMask, ArgInfo("inpaintMask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inpaintRadius"), inpaintRadius, ArgInfo("inpaintRadius", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::inpaint(src, inpaintMask, dst, inpaintRadius, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_insertChannel(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int coi=0;

    // const char* keywords[] = { "src", "dst", "coi", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "coi"), coi, ArgInfo("coi", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::insertChannel(src, dst, coi), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int coi=0;

    // const char* keywords[] = { "src", "dst", "coi", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "coi"), coi, ArgInfo("coi", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::insertChannel(src, dst, coi), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_integral(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat sum;
    int sdepth=-1;

    // const char* keywords[] = { "src", "sum", "sdepth", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sum"), sum, ArgInfo("sum", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sdepth"), sdepth, ArgInfo("sdepth", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::integral(src, sum, sdepth), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, sum);
        }
    }

    }
    

    {
    UMat src;
    UMat sum;
    int sdepth=-1;

    // const char* keywords[] = { "src", "sum", "sdepth", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sum"), sum, ArgInfo("sum", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sdepth"), sdepth, ArgInfo("sdepth", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::integral(src, sum, sdepth), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, sum);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_integral2(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat sum;
    Mat sqsum;
    int sdepth=-1;
    int sqdepth=-1;

    // const char* keywords[] = { "src", "sum", "sqsum", "sdepth", "sqdepth", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sum"), sum, ArgInfo("sum", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sqsum"), sqsum, ArgInfo("sqsum", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sdepth"), sdepth, ArgInfo("sdepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sqdepth"), sqdepth, ArgInfo("sqdepth", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::integral(src, sum, sqsum, sdepth, sqdepth), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, sum), evision_from(env, sqsum));
        }
    }

    }
    

    {
    UMat src;
    UMat sum;
    UMat sqsum;
    int sdepth=-1;
    int sqdepth=-1;

    // const char* keywords[] = { "src", "sum", "sqsum", "sdepth", "sqdepth", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sum"), sum, ArgInfo("sum", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sqsum"), sqsum, ArgInfo("sqsum", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sdepth"), sdepth, ArgInfo("sdepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sqdepth"), sqdepth, ArgInfo("sqdepth", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::integral(src, sum, sqsum, sdepth, sqdepth), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, sum), evision_from(env, sqsum));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_integral3(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat sum;
    Mat sqsum;
    Mat tilted;
    int sdepth=-1;
    int sqdepth=-1;

    // const char* keywords[] = { "src", "sum", "sqsum", "tilted", "sdepth", "sqdepth", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sum"), sum, ArgInfo("sum", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sqsum"), sqsum, ArgInfo("sqsum", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tilted"), tilted, ArgInfo("tilted", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sdepth"), sdepth, ArgInfo("sdepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sqdepth"), sqdepth, ArgInfo("sqdepth", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::integral(src, sum, sqsum, tilted, sdepth, sqdepth), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, sum), evision_from(env, sqsum), evision_from(env, tilted));
        }
    }

    }
    

    {
    UMat src;
    UMat sum;
    UMat sqsum;
    UMat tilted;
    int sdepth=-1;
    int sqdepth=-1;

    // const char* keywords[] = { "src", "sum", "sqsum", "tilted", "sdepth", "sqdepth", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sum"), sum, ArgInfo("sum", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sqsum"), sqsum, ArgInfo("sqsum", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tilted"), tilted, ArgInfo("tilted", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sdepth"), sdepth, ArgInfo("sdepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sqdepth"), sqdepth, ArgInfo("sqdepth", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::integral(src, sum, sqsum, tilted, sdepth, sqdepth), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, sum), evision_from(env, sqsum), evision_from(env, tilted));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_intersectConvexConvex(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat p1;
    Mat p2;
    Mat p12;
    bool handleNested=true;
    float retval;

    // const char* keywords[] = { "p1", "p2", "p12", "handleNested", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "p1"), p1, ArgInfo("p1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p2"), p2, ArgInfo("p2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p12"), p12, ArgInfo("p12", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "handleNested"), handleNested, ArgInfo("handleNested", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::intersectConvexConvex(p1, p2, p12, handleNested), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, p12));
        }
    }

    }
    

    {
    UMat p1;
    UMat p2;
    UMat p12;
    bool handleNested=true;
    float retval;

    // const char* keywords[] = { "p1", "p2", "p12", "handleNested", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "p1"), p1, ArgInfo("p1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p2"), p2, ArgInfo("p2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p12"), p12, ArgInfo("p12", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "handleNested"), handleNested, ArgInfo("handleNested", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::intersectConvexConvex(p1, p2, p12, handleNested), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, p12));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_invert(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int flags=DECOMP_LU;
    double retval;

    // const char* keywords[] = { "src", "dst", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::invert(src, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, dst));
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int flags=DECOMP_LU;
    double retval;

    // const char* keywords[] = { "src", "dst", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::invert(src, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, dst));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_invertAffineTransform(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat M;
    Mat iM;

    // const char* keywords[] = { "M", "iM", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), M, ArgInfo("M", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iM"), iM, ArgInfo("iM", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::invertAffineTransform(M, iM), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, iM);
        }
    }

    }
    

    {
    UMat M;
    UMat iM;

    // const char* keywords[] = { "M", "iM", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), M, ArgInfo("M", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iM"), iM, ArgInfo("iM", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::invertAffineTransform(M, iM), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, iM);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_isContourConvex(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat contour;
    bool retval;

    // const char* keywords[] = { "contour", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "contour"), contour, ArgInfo("contour", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::isContourConvex(contour), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat contour;
    bool retval;

    // const char* keywords[] = { "contour", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "contour"), contour, ArgInfo("contour", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::isContourConvex(contour), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_kmeans(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat data;
    int K=0;
    Mat bestLabels;
    TermCriteria criteria;
    int attempts=0;
    int flags=0;
    Mat centers;
    double retval;

    // const char* keywords[] = { "data", "K", "bestLabels", "criteria", "attempts", "flags", "centers", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bestLabels"), bestLabels, ArgInfo("bestLabels", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "attempts"), attempts, ArgInfo("attempts", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centers"), centers, ArgInfo("centers", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::kmeans(data, K, bestLabels, criteria, attempts, flags, centers), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, retval), evision_from(env, bestLabels), evision_from(env, centers));
        }
    }

    }
    

    {
    UMat data;
    int K=0;
    UMat bestLabels;
    TermCriteria criteria;
    int attempts=0;
    int flags=0;
    UMat centers;
    double retval;

    // const char* keywords[] = { "data", "K", "bestLabels", "criteria", "attempts", "flags", "centers", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "data"), data, ArgInfo("data", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bestLabels"), bestLabels, ArgInfo("bestLabels", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "attempts"), attempts, ArgInfo("attempts", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "centers"), centers, ArgInfo("centers", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::kmeans(data, K, bestLabels, criteria, attempts, flags, centers), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, retval), evision_from(env, bestLabels), evision_from(env, centers));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_line(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    Point pt1;
    Point pt2;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "pt1", "pt2", "color", "thickness", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt1"), pt1, ArgInfo("pt1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt2"), pt2, ArgInfo("pt2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::line(img, pt1, pt2, color, thickness, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    UMat img;
    Point pt1;
    Point pt2;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "pt1", "pt2", "color", "thickness", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt1"), pt1, ArgInfo("pt1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt2"), pt2, ArgInfo("pt2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::line(img, pt1, pt2, color, thickness, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_linearPolar(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Point2f center;
    double maxRadius=0;
    int flags=0;

    // const char* keywords[] = { "src", "center", "maxRadius", "flags", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxRadius"), maxRadius, ArgInfo("maxRadius", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::linearPolar(src, dst, center, maxRadius, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    Point2f center;
    double maxRadius=0;
    int flags=0;

    // const char* keywords[] = { "src", "center", "maxRadius", "flags", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxRadius"), maxRadius, ArgInfo("maxRadius", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::linearPolar(src, dst, center, maxRadius, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_log(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::log(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::log(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_logPolar(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Point2f center;
    double M=0;
    int flags=0;

    // const char* keywords[] = { "src", "center", "M", "flags", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), M, ArgInfo("M", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::logPolar(src, dst, center, M, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    Point2f center;
    double M=0;
    int flags=0;

    // const char* keywords[] = { "src", "center", "M", "flags", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), M, ArgInfo("M", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::logPolar(src, dst, center, M, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_magnitude(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat x;
    Mat y;
    Mat magnitude;

    // const char* keywords[] = { "x", "y", "magnitude", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "x"), x, ArgInfo("x", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "y"), y, ArgInfo("y", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "magnitude"), magnitude, ArgInfo("magnitude", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::magnitude(x, y, magnitude), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, magnitude);
        }
    }

    }
    

    {
    UMat x;
    UMat y;
    UMat magnitude;

    // const char* keywords[] = { "x", "y", "magnitude", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "x"), x, ArgInfo("x", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "y"), y, ArgInfo("y", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "magnitude"), magnitude, ArgInfo("magnitude", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::magnitude(x, y, magnitude), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, magnitude);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_matMulDeriv(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat A;
    Mat B;
    Mat dABdA;
    Mat dABdB;

    // const char* keywords[] = { "A", "B", "dABdA", "dABdB", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "a"), A, ArgInfo("A", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "b"), B, ArgInfo("B", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dABdA"), dABdA, ArgInfo("dABdA", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dABdB"), dABdB, ArgInfo("dABdB", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::matMulDeriv(A, B, dABdA, dABdB), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dABdA), evision_from(env, dABdB));
        }
    }

    }
    

    {
    UMat A;
    UMat B;
    UMat dABdA;
    UMat dABdB;

    // const char* keywords[] = { "A", "B", "dABdA", "dABdB", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "a"), A, ArgInfo("A", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "b"), B, ArgInfo("B", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dABdA"), dABdA, ArgInfo("dABdA", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dABdB"), dABdB, ArgInfo("dABdB", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::matMulDeriv(A, B, dABdA, dABdB), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dABdA), evision_from(env, dABdB));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_matchShapes(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat contour1;
    Mat contour2;
    int method=0;
    double parameter=0;
    double retval;

    // const char* keywords[] = { "contour1", "contour2", "method", "parameter", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "contour1"), contour1, ArgInfo("contour1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "contour2"), contour2, ArgInfo("contour2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "parameter"), parameter, ArgInfo("parameter", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::matchShapes(contour1, contour2, method, parameter), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat contour1;
    UMat contour2;
    int method=0;
    double parameter=0;
    double retval;

    // const char* keywords[] = { "contour1", "contour2", "method", "parameter", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "contour1"), contour1, ArgInfo("contour1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "contour2"), contour2, ArgInfo("contour2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "parameter"), parameter, ArgInfo("parameter", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::matchShapes(contour1, contour2, method, parameter), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_matchTemplate(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat templ;
    Mat result;
    int method=0;
    Mat mask;

    // const char* keywords[] = { "image", "templ", "method", "result", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templ"), templ, ArgInfo("templ", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "result"), result, ArgInfo("result", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::matchTemplate(image, templ, result, method, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, result);
        }
    }

    }
    

    {
    UMat image;
    UMat templ;
    UMat result;
    int method=0;
    UMat mask;

    // const char* keywords[] = { "image", "templ", "method", "result", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "templ"), templ, ArgInfo("templ", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "result"), result, ArgInfo("result", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::matchTemplate(image, templ, result, method, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, result);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_max(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;

    // const char* keywords[] = { "src1", "src2", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::max(src1, src2, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;

    // const char* keywords[] = { "src1", "src2", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::max(src1, src2, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_mean(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat mask;
    Scalar retval;

    // const char* keywords[] = { "src", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::mean(src, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat src;
    UMat mask;
    Scalar retval;

    // const char* keywords[] = { "src", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::mean(src, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_meanShift(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat probImage;
    Rect window;
    TermCriteria criteria;
    int retval;

    // const char* keywords[] = { "probImage", "window", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "probImage"), probImage, ArgInfo("probImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "window"), window, ArgInfo("window", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::meanShift(probImage, window, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, window));
        }
    }

    }
    

    {
    UMat probImage;
    Rect window;
    TermCriteria criteria;
    int retval;

    // const char* keywords[] = { "probImage", "window", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "probImage"), probImage, ArgInfo("probImage", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "window"), window, ArgInfo("window", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::meanShift(probImage, window, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, window));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_meanStdDev(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat mean;
    Mat stddev;
    Mat mask;

    // const char* keywords[] = { "src", "mean", "stddev", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stddev"), stddev, ArgInfo("stddev", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::meanStdDev(src, mean, stddev, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, mean), evision_from(env, stddev));
        }
    }

    }
    

    {
    UMat src;
    UMat mean;
    UMat stddev;
    UMat mask;

    // const char* keywords[] = { "src", "mean", "stddev", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stddev"), stddev, ArgInfo("stddev", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::meanStdDev(src, mean, stddev, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, mean), evision_from(env, stddev));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_medianBlur(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int ksize=0;

    // const char* keywords[] = { "src", "ksize", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::medianBlur(src, dst, ksize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int ksize=0;

    // const char* keywords[] = { "src", "ksize", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::medianBlur(src, dst, ksize), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_merge(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat mv;
    Mat dst;

    // const char* keywords[] = { "mv", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "mv"), mv, ArgInfo("mv", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::merge(mv, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    vector_UMat mv;
    UMat dst;

    // const char* keywords[] = { "mv", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "mv"), mv, ArgInfo("mv", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::merge(mv, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_min(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;

    // const char* keywords[] = { "src1", "src2", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::min(src1, src2, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;

    // const char* keywords[] = { "src1", "src2", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::min(src1, src2, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_minAreaRect(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat points;
    RotatedRect retval;

    // const char* keywords[] = { "points", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::minAreaRect(points), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat points;
    RotatedRect retval;

    // const char* keywords[] = { "points", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::minAreaRect(points), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_minEnclosingCircle(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat points;
    Point2f center;
    float radius;

    // const char* keywords[] = { "points", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::minEnclosingCircle(points, center, radius), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, center), evision_from(env, radius));
        }
    }

    }
    

    {
    UMat points;
    Point2f center;
    float radius;

    // const char* keywords[] = { "points", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::minEnclosingCircle(points, center, radius), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, center), evision_from(env, radius));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_minEnclosingTriangle(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat points;
    Mat triangle;
    double retval;

    // const char* keywords[] = { "points", "triangle", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "triangle"), triangle, ArgInfo("triangle", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::minEnclosingTriangle(points, triangle), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, triangle));
        }
    }

    }
    

    {
    UMat points;
    UMat triangle;
    double retval;

    // const char* keywords[] = { "points", "triangle", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points"), points, ArgInfo("points", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "triangle"), triangle, ArgInfo("triangle", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::minEnclosingTriangle(points, triangle), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, triangle));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_minMaxLoc(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    double minVal;
    double maxVal;
    Point minLoc;
    Point maxLoc;
    Mat mask;

    // const char* keywords[] = { "src", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::minMaxLoc(src, &minVal, &maxVal, &minLoc, &maxLoc, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, minVal), evision_from(env, maxVal), evision_from(env, minLoc), evision_from(env, maxLoc));
        }
    }

    }
    

    {
    UMat src;
    double minVal;
    double maxVal;
    Point minLoc;
    Point maxLoc;
    UMat mask;

    // const char* keywords[] = { "src", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::minMaxLoc(src, &minVal, &maxVal, &minLoc, &maxLoc, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, minVal), evision_from(env, maxVal), evision_from(env, minLoc), evision_from(env, maxLoc));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_mixChannels(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat src;
    vector_Mat dst;
    vector_int fromTo;

    // const char* keywords[] = { "src", "dst", "fromTo", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fromTo"), fromTo, ArgInfo("fromTo", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::mixChannels(src, dst, fromTo), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    vector_UMat src;
    vector_UMat dst;
    vector_int fromTo;

    // const char* keywords[] = { "src", "dst", "fromTo", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fromTo"), fromTo, ArgInfo("fromTo", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::mixChannels(src, dst, fromTo), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_moments(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat array;
    bool binaryImage=false;
    Moments retval;

    // const char* keywords[] = { "array", "binaryImage", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "array"), array, ArgInfo("array", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "binaryImage"), binaryImage, ArgInfo("binaryImage", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::moments(array, binaryImage), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat array;
    bool binaryImage=false;
    Moments retval;

    // const char* keywords[] = { "array", "binaryImage", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "array"), array, ArgInfo("array", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "binaryImage"), binaryImage, ArgInfo("binaryImage", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::moments(array, binaryImage), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_morphologyEx(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int op=0;
    Mat kernel;
    Point anchor=Point(-1,-1);
    int iterations=1;
    int borderType=BORDER_CONSTANT;
    Scalar borderValue=morphologyDefaultBorderValue();

    // const char* keywords[] = { "src", "op", "kernel", "dst", "anchor", "iterations", "borderType", "borderValue", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "op"), op, ArgInfo("op", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernel"), kernel, ArgInfo("kernel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterations"), iterations, ArgInfo("iterations", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderValue"), borderValue, ArgInfo("borderValue", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::morphologyEx(src, dst, op, kernel, anchor, iterations, borderType, borderValue), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int op=0;
    UMat kernel;
    Point anchor=Point(-1,-1);
    int iterations=1;
    int borderType=BORDER_CONSTANT;
    Scalar borderValue=morphologyDefaultBorderValue();

    // const char* keywords[] = { "src", "op", "kernel", "dst", "anchor", "iterations", "borderType", "borderValue", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "op"), op, ArgInfo("op", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernel"), kernel, ArgInfo("kernel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterations"), iterations, ArgInfo("iterations", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderValue"), borderValue, ArgInfo("borderValue", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::morphologyEx(src, dst, op, kernel, anchor, iterations, borderType, borderValue), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_moveWindow(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String winname;
    int x=0;
    int y=0;

    // const char* keywords[] = { "winname", "x", "y", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "x"), x, ArgInfo("x", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "y"), y, ArgInfo("y", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::moveWindow(winname, x, y), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_mulSpectrums(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat a;
    Mat b;
    Mat c;
    int flags=0;
    bool conjB=false;

    // const char* keywords[] = { "a", "b", "flags", "c", "conjB", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "a"), a, ArgInfo("a", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "b"), b, ArgInfo("b", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "c"), c, ArgInfo("c", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "conjB"), conjB, ArgInfo("conjB", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::mulSpectrums(a, b, c, flags, conjB), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, c);
        }
    }

    }
    

    {
    UMat a;
    UMat b;
    UMat c;
    int flags=0;
    bool conjB=false;

    // const char* keywords[] = { "a", "b", "flags", "c", "conjB", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "a"), a, ArgInfo("a", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "b"), b, ArgInfo("b", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "c"), c, ArgInfo("c", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "conjB"), conjB, ArgInfo("conjB", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::mulSpectrums(a, b, c, flags, conjB), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, c);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_mulTransposed(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    bool aTa=0;
    Mat delta;
    double scale=1;
    int dtype=-1;

    // const char* keywords[] = { "src", "aTa", "dst", "delta", "scale", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "aTa"), aTa, ArgInfo("aTa", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::mulTransposed(src, dst, aTa, delta, scale, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    bool aTa=0;
    UMat delta;
    double scale=1;
    int dtype=-1;

    // const char* keywords[] = { "src", "aTa", "dst", "delta", "scale", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "aTa"), aTa, ArgInfo("aTa", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::mulTransposed(src, dst, aTa, delta, scale, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_multiply(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;
    double scale=1;
    int dtype=-1;

    // const char* keywords[] = { "src1", "src2", "dst", "scale", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::multiply(src1, src2, dst, scale, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;
    double scale=1;
    int dtype=-1;

    // const char* keywords[] = { "src1", "src2", "dst", "scale", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scale"), scale, ArgInfo("scale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::multiply(src1, src2, dst, scale, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_namedWindow(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String winname;
    int flags=WINDOW_AUTOSIZE;

    // const char* keywords[] = { "winname", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::namedWindow(winname, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_norm(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    int normType=NORM_L2;
    Mat mask;
    double retval;

    // const char* keywords[] = { "src1", "normType", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normType"), normType, ArgInfo("normType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::norm(src1, normType, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat src1;
    int normType=NORM_L2;
    UMat mask;
    double retval;

    // const char* keywords[] = { "src1", "normType", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normType"), normType, ArgInfo("normType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::norm(src1, normType, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    Mat src1;
    Mat src2;
    int normType=NORM_L2;
    Mat mask;
    double retval;

    // const char* keywords[] = { "src1", "src2", "normType", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normType"), normType, ArgInfo("normType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::norm(src1, src2, normType, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    int normType=NORM_L2;
    UMat mask;
    double retval;

    // const char* keywords[] = { "src1", "src2", "normType", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normType"), normType, ArgInfo("normType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::norm(src1, src2, normType, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_normalize(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    double alpha=1;
    double beta=0;
    int norm_type=NORM_L2;
    int dtype=-1;
    Mat mask;

    // const char* keywords[] = { "src", "dst", "alpha", "beta", "norm_type", "dtype", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "beta"), beta, ArgInfo("beta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "norm_type"), norm_type, ArgInfo("norm_type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::normalize(src, dst, alpha, beta, norm_type, dtype, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    double alpha=1;
    double beta=0;
    int norm_type=NORM_L2;
    int dtype=-1;
    UMat mask;

    // const char* keywords[] = { "src", "dst", "alpha", "beta", "norm_type", "dtype", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "beta"), beta, ArgInfo("beta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "norm_type"), norm_type, ArgInfo("norm_type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::normalize(src, dst, alpha, beta, norm_type, dtype, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_patchNaNs(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat a;
    double val=0;

    // const char* keywords[] = { "a", "val", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "a"), a, ArgInfo("a", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "val"), val, ArgInfo("val", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::patchNaNs(a, val), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, a);
        }
    }

    }
    

    {
    UMat a;
    double val=0;

    // const char* keywords[] = { "a", "val", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "a"), a, ArgInfo("a", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "val"), val, ArgInfo("val", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::patchNaNs(a, val), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, a);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_pencilSketch(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst1;
    Mat dst2;
    float sigma_s=60;
    float sigma_r=0.07f;
    float shade_factor=0.02f;

    // const char* keywords[] = { "src", "dst1", "dst2", "sigma_s", "sigma_r", "shade_factor", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst1"), dst1, ArgInfo("dst1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst2"), dst2, ArgInfo("dst2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_s"), sigma_s, ArgInfo("sigma_s", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_r"), sigma_r, ArgInfo("sigma_r", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shade_factor"), shade_factor, ArgInfo("shade_factor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::pencilSketch(src, dst1, dst2, sigma_s, sigma_r, shade_factor), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dst1), evision_from(env, dst2));
        }
    }

    }
    

    {
    UMat src;
    UMat dst1;
    UMat dst2;
    float sigma_s=60;
    float sigma_r=0.07f;
    float shade_factor=0.02f;

    // const char* keywords[] = { "src", "dst1", "dst2", "sigma_s", "sigma_r", "shade_factor", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst1"), dst1, ArgInfo("dst1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst2"), dst2, ArgInfo("dst2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_s"), sigma_s, ArgInfo("sigma_s", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_r"), sigma_r, ArgInfo("sigma_r", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shade_factor"), shade_factor, ArgInfo("shade_factor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::pencilSketch(src, dst1, dst2, sigma_s, sigma_r, shade_factor), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dst1), evision_from(env, dst2));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_perspectiveTransform(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat m;

    // const char* keywords[] = { "src", "m", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), m, ArgInfo("m", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::perspectiveTransform(src, dst, m), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat m;

    // const char* keywords[] = { "src", "m", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), m, ArgInfo("m", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::perspectiveTransform(src, dst, m), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_phase(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat x;
    Mat y;
    Mat angle;
    bool angleInDegrees=false;

    // const char* keywords[] = { "x", "y", "angle", "angleInDegrees", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "x"), x, ArgInfo("x", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "y"), y, ArgInfo("y", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angle"), angle, ArgInfo("angle", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angleInDegrees"), angleInDegrees, ArgInfo("angleInDegrees", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::phase(x, y, angle, angleInDegrees), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, angle);
        }
    }

    }
    

    {
    UMat x;
    UMat y;
    UMat angle;
    bool angleInDegrees=false;

    // const char* keywords[] = { "x", "y", "angle", "angleInDegrees", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "x"), x, ArgInfo("x", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "y"), y, ArgInfo("y", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angle"), angle, ArgInfo("angle", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angleInDegrees"), angleInDegrees, ArgInfo("angleInDegrees", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::phase(x, y, angle, angleInDegrees), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, angle);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_phaseCorrelate(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat window;
    double response;
    Point2d retval;

    // const char* keywords[] = { "src1", "src2", "window", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "window"), window, ArgInfo("window", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::phaseCorrelate(src1, src2, window, &response), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, response));
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat window;
    double response;
    Point2d retval;

    // const char* keywords[] = { "src1", "src2", "window", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "window"), window, ArgInfo("window", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::phaseCorrelate(src1, src2, window, &response), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, response));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_pointPolygonTest(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat contour;
    Point2f pt;
    bool measureDist=0;
    double retval;

    // const char* keywords[] = { "contour", "pt", "measureDist", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "contour"), contour, ArgInfo("contour", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt"), pt, ArgInfo("pt", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "measureDist"), measureDist, ArgInfo("measureDist", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::pointPolygonTest(contour, pt, measureDist), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat contour;
    Point2f pt;
    bool measureDist=0;
    double retval;

    // const char* keywords[] = { "contour", "pt", "measureDist", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "contour"), contour, ArgInfo("contour", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt"), pt, ArgInfo("pt", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "measureDist"), measureDist, ArgInfo("measureDist", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::pointPolygonTest(contour, pt, measureDist), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_polarToCart(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat magnitude;
    Mat angle;
    Mat x;
    Mat y;
    bool angleInDegrees=false;

    // const char* keywords[] = { "magnitude", "angle", "x", "y", "angleInDegrees", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "magnitude"), magnitude, ArgInfo("magnitude", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angle"), angle, ArgInfo("angle", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "x"), x, ArgInfo("x", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "y"), y, ArgInfo("y", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angleInDegrees"), angleInDegrees, ArgInfo("angleInDegrees", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::polarToCart(magnitude, angle, x, y, angleInDegrees), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, x), evision_from(env, y));
        }
    }

    }
    

    {
    UMat magnitude;
    UMat angle;
    UMat x;
    UMat y;
    bool angleInDegrees=false;

    // const char* keywords[] = { "magnitude", "angle", "x", "y", "angleInDegrees", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "magnitude"), magnitude, ArgInfo("magnitude", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angle"), angle, ArgInfo("angle", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "x"), x, ArgInfo("x", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "y"), y, ArgInfo("y", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angleInDegrees"), angleInDegrees, ArgInfo("angleInDegrees", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::polarToCart(magnitude, angle, x, y, angleInDegrees), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, x), evision_from(env, y));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_pollKey(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::pollKey(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_polylines(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    vector_Mat pts;
    bool isClosed=0;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "pts", "isClosed", "color", "thickness", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pts"), pts, ArgInfo("pts", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "isClosed"), isClosed, ArgInfo("isClosed", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::polylines(img, pts, isClosed, color, thickness, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    UMat img;
    vector_UMat pts;
    bool isClosed=0;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "pts", "isClosed", "color", "thickness", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pts"), pts, ArgInfo("pts", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "isClosed"), isClosed, ArgInfo("isClosed", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::polylines(img, pts, isClosed, color, thickness, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_pow(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    double power=0;
    Mat dst;

    // const char* keywords[] = { "src", "power", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "power"), power, ArgInfo("power", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::pow(src, power, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    double power=0;
    UMat dst;

    // const char* keywords[] = { "src", "power", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "power"), power, ArgInfo("power", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::pow(src, power, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_preCornerDetect(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int ksize=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ksize", "dst", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::preCornerDetect(src, dst, ksize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int ksize=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ksize", "dst", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::preCornerDetect(src, dst, ksize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_projectPoints(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat objectPoints;
    Mat rvec;
    Mat tvec;
    Mat cameraMatrix;
    Mat distCoeffs;
    Mat imagePoints;
    Mat jacobian;
    double aspectRatio=0;

    // const char* keywords[] = { "objectPoints", "rvec", "tvec", "cameraMatrix", "distCoeffs", "imagePoints", "jacobian", "aspectRatio", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "jacobian"), jacobian, ArgInfo("jacobian", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "aspectRatio"), aspectRatio, ArgInfo("aspectRatio", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::projectPoints(objectPoints, rvec, tvec, cameraMatrix, distCoeffs, imagePoints, jacobian, aspectRatio), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, imagePoints), evision_from(env, jacobian));
        }
    }

    }
    

    {
    UMat objectPoints;
    UMat rvec;
    UMat tvec;
    UMat cameraMatrix;
    UMat distCoeffs;
    UMat imagePoints;
    UMat jacobian;
    double aspectRatio=0;

    // const char* keywords[] = { "objectPoints", "rvec", "tvec", "cameraMatrix", "distCoeffs", "imagePoints", "jacobian", "aspectRatio", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "jacobian"), jacobian, ArgInfo("jacobian", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "aspectRatio"), aspectRatio, ArgInfo("aspectRatio", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::projectPoints(objectPoints, rvec, tvec, cameraMatrix, distCoeffs, imagePoints, jacobian, aspectRatio), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, imagePoints), evision_from(env, jacobian));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_putText(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    String text;
    Point org;
    int fontFace=0;
    double fontScale=0;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    bool bottomLeftOrigin=false;

    // const char* keywords[] = { "img", "text", "org", "fontFace", "fontScale", "color", "thickness", "lineType", "bottomLeftOrigin", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "text"), text, ArgInfo("text", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "org"), org, ArgInfo("org", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fontFace"), fontFace, ArgInfo("fontFace", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fontScale"), fontScale, ArgInfo("fontScale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bottomLeftOrigin"), bottomLeftOrigin, ArgInfo("bottomLeftOrigin", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::putText(img, text, org, fontFace, fontScale, color, thickness, lineType, bottomLeftOrigin), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    UMat img;
    String text;
    Point org;
    int fontFace=0;
    double fontScale=0;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    bool bottomLeftOrigin=false;

    // const char* keywords[] = { "img", "text", "org", "fontFace", "fontScale", "color", "thickness", "lineType", "bottomLeftOrigin", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "text"), text, ArgInfo("text", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "org"), org, ArgInfo("org", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fontFace"), fontFace, ArgInfo("fontFace", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fontScale"), fontScale, ArgInfo("fontScale", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bottomLeftOrigin"), bottomLeftOrigin, ArgInfo("bottomLeftOrigin", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::putText(img, text, org, fontFace, fontScale, color, thickness, lineType, bottomLeftOrigin), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_pyrDown(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Size dstsize;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "dst", "dstsize", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstsize"), dstsize, ArgInfo("dstsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::pyrDown(src, dst, dstsize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    Size dstsize;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "dst", "dstsize", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstsize"), dstsize, ArgInfo("dstsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::pyrDown(src, dst, dstsize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_pyrMeanShiftFiltering(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    double sp=0;
    double sr=0;
    int maxLevel=1;
    TermCriteria termcrit=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1);

    // const char* keywords[] = { "src", "sp", "sr", "dst", "maxLevel", "termcrit", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sp"), sp, ArgInfo("sp", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sr"), sr, ArgInfo("sr", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxLevel"), maxLevel, ArgInfo("maxLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "termcrit"), termcrit, ArgInfo("termcrit", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::pyrMeanShiftFiltering(src, dst, sp, sr, maxLevel, termcrit), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    double sp=0;
    double sr=0;
    int maxLevel=1;
    TermCriteria termcrit=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1);

    // const char* keywords[] = { "src", "sp", "sr", "dst", "maxLevel", "termcrit", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sp"), sp, ArgInfo("sp", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sr"), sr, ArgInfo("sr", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxLevel"), maxLevel, ArgInfo("maxLevel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "termcrit"), termcrit, ArgInfo("termcrit", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::pyrMeanShiftFiltering(src, dst, sp, sr, maxLevel, termcrit), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_pyrUp(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Size dstsize;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "dst", "dstsize", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstsize"), dstsize, ArgInfo("dstsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::pyrUp(src, dst, dstsize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    Size dstsize;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "dst", "dstsize", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dstsize"), dstsize, ArgInfo("dstsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::pyrUp(src, dst, dstsize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_randShuffle(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat dst;
    double iterFactor=1.;

    // const char* keywords[] = { "dst", "iterFactor", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterFactor"), iterFactor, ArgInfo("iterFactor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::randShuffle(dst, iterFactor, 0), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat dst;
    double iterFactor=1.;

    // const char* keywords[] = { "dst", "iterFactor", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterFactor"), iterFactor, ArgInfo("iterFactor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::randShuffle(dst, iterFactor, 0), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_randn(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat dst;
    Mat mean;
    Mat stddev;

    // const char* keywords[] = { "dst", "mean", "stddev", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stddev"), stddev, ArgInfo("stddev", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::randn(dst, mean, stddev), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat dst;
    UMat mean;
    UMat stddev;

    // const char* keywords[] = { "dst", "mean", "stddev", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stddev"), stddev, ArgInfo("stddev", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::randn(dst, mean, stddev), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_randu(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat dst;
    Mat low;
    Mat high;

    // const char* keywords[] = { "dst", "low", "high", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "low"), low, ArgInfo("low", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "high"), high, ArgInfo("high", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::randu(dst, low, high), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat dst;
    UMat low;
    UMat high;

    // const char* keywords[] = { "dst", "low", "high", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "low"), low, ArgInfo("low", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "high"), high, ArgInfo("high", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::randu(dst, low, high), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_readOpticalFlow(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String path;
    Mat retval;

    // const char* keywords[] = { "path", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "path"), path, ArgInfo("path", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::readOpticalFlow(path), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_recoverPose(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat points1;
    Mat points2;
    Mat cameraMatrix1;
    Mat distCoeffs1;
    Mat cameraMatrix2;
    Mat distCoeffs2;
    Mat E;
    Mat R;
    Mat t;
    int method=cv::RANSAC;
    double prob=0.999;
    double threshold=1.0;
    Mat mask;
    int retval;

    // const char* keywords[] = { "points1", "points2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "E", "R", "t", "method", "prob", "threshold", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs1"), distCoeffs1, ArgInfo("distCoeffs1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs2"), distCoeffs2, ArgInfo("distCoeffs2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), t, ArgInfo("t", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "prob"), prob, ArgInfo("prob", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::recoverPose(points1, points2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, E, R, t, method, prob, threshold, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple5(env, evision_from(env, retval), evision_from(env, E), evision_from(env, R), evision_from(env, t), evision_from(env, mask));
        }
    }

    }
    

    {
    UMat points1;
    UMat points2;
    UMat cameraMatrix1;
    UMat distCoeffs1;
    UMat cameraMatrix2;
    UMat distCoeffs2;
    UMat E;
    UMat R;
    UMat t;
    int method=cv::RANSAC;
    double prob=0.999;
    double threshold=1.0;
    UMat mask;
    int retval;

    // const char* keywords[] = { "points1", "points2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "E", "R", "t", "method", "prob", "threshold", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs1"), distCoeffs1, ArgInfo("distCoeffs1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs2"), distCoeffs2, ArgInfo("distCoeffs2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), t, ArgInfo("t", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "prob"), prob, ArgInfo("prob", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::recoverPose(points1, points2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, E, R, t, method, prob, threshold, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple5(env, evision_from(env, retval), evision_from(env, E), evision_from(env, R), evision_from(env, t), evision_from(env, mask));
        }
    }

    }
    

    {
    Mat E;
    Mat points1;
    Mat points2;
    Mat cameraMatrix;
    Mat R;
    Mat t;
    Mat mask;
    int retval;

    // const char* keywords[] = { "E", "points1", "points2", "cameraMatrix", "R", "t", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), t, ArgInfo("t", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::recoverPose(E, points1, points2, cameraMatrix, R, t, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, R), evision_from(env, t), evision_from(env, mask));
        }
    }

    }
    

    {
    UMat E;
    UMat points1;
    UMat points2;
    UMat cameraMatrix;
    UMat R;
    UMat t;
    UMat mask;
    int retval;

    // const char* keywords[] = { "E", "points1", "points2", "cameraMatrix", "R", "t", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), t, ArgInfo("t", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::recoverPose(E, points1, points2, cameraMatrix, R, t, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, R), evision_from(env, t), evision_from(env, mask));
        }
    }

    }
    

    {
    Mat E;
    Mat points1;
    Mat points2;
    Mat R;
    Mat t;
    double focal=1.0;
    Point2d pp=Point2d(0, 0);
    Mat mask;
    int retval;

    // const char* keywords[] = { "E", "points1", "points2", "R", "t", "focal", "pp", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), t, ArgInfo("t", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "focal"), focal, ArgInfo("focal", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pp"), pp, ArgInfo("pp", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::recoverPose(E, points1, points2, R, t, focal, pp, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, R), evision_from(env, t), evision_from(env, mask));
        }
    }

    }
    

    {
    UMat E;
    UMat points1;
    UMat points2;
    UMat R;
    UMat t;
    double focal=1.0;
    Point2d pp=Point2d(0, 0);
    UMat mask;
    int retval;

    // const char* keywords[] = { "E", "points1", "points2", "R", "t", "focal", "pp", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), t, ArgInfo("t", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "focal"), focal, ArgInfo("focal", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pp"), pp, ArgInfo("pp", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::recoverPose(E, points1, points2, R, t, focal, pp, mask), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, R), evision_from(env, t), evision_from(env, mask));
        }
    }

    }
    

    {
    Mat E;
    Mat points1;
    Mat points2;
    Mat cameraMatrix;
    Mat R;
    Mat t;
    double distanceThresh=0;
    Mat mask;
    Mat triangulatedPoints;
    int retval;

    // const char* keywords[] = { "E", "points1", "points2", "cameraMatrix", "distanceThresh", "R", "t", "mask", "triangulatedPoints", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), t, ArgInfo("t", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distanceThresh"), distanceThresh, ArgInfo("distanceThresh", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "triangulatedPoints"), triangulatedPoints, ArgInfo("triangulatedPoints", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::recoverPose(E, points1, points2, cameraMatrix, R, t, distanceThresh, mask, triangulatedPoints), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple5(env, evision_from(env, retval), evision_from(env, R), evision_from(env, t), evision_from(env, mask), evision_from(env, triangulatedPoints));
        }
    }

    }
    

    {
    UMat E;
    UMat points1;
    UMat points2;
    UMat cameraMatrix;
    UMat R;
    UMat t;
    double distanceThresh=0;
    UMat mask;
    UMat triangulatedPoints;
    int retval;

    // const char* keywords[] = { "E", "points1", "points2", "cameraMatrix", "distanceThresh", "R", "t", "mask", "triangulatedPoints", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), t, ArgInfo("t", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distanceThresh"), distanceThresh, ArgInfo("distanceThresh", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "triangulatedPoints"), triangulatedPoints, ArgInfo("triangulatedPoints", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::recoverPose(E, points1, points2, cameraMatrix, R, t, distanceThresh, mask, triangulatedPoints), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple5(env, evision_from(env, retval), evision_from(env, R), evision_from(env, t), evision_from(env, mask), evision_from(env, triangulatedPoints));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_rectangle(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    Point pt1;
    Point pt2;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "pt1", "pt2", "color", "thickness", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt1"), pt1, ArgInfo("pt1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt2"), pt2, ArgInfo("pt2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::rectangle(img, pt1, pt2, color, thickness, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    UMat img;
    Point pt1;
    Point pt2;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "pt1", "pt2", "color", "thickness", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt1"), pt1, ArgInfo("pt1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt2"), pt2, ArgInfo("pt2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::rectangle(img, pt1, pt2, color, thickness, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    Mat img;
    Rect rec;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "rec", "color", "thickness", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rec"), rec, ArgInfo("rec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::rectangle(img, rec, color, thickness, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }
    

    {
    UMat img;
    Rect rec;
    Scalar color;
    int thickness=1;
    int lineType=LINE_8;
    int shift=0;

    // const char* keywords[] = { "img", "rec", "color", "thickness", "lineType", "shift", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rec"), rec, ArgInfo("rec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "color"), color, ArgInfo("color", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thickness"), thickness, ArgInfo("thickness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lineType"), lineType, ArgInfo("lineType", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "shift"), shift, ArgInfo("shift", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::rectangle(img, rec, color, thickness, lineType, shift), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, img);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_rectify3Collinear(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat cameraMatrix1;
    Mat distCoeffs1;
    Mat cameraMatrix2;
    Mat distCoeffs2;
    Mat cameraMatrix3;
    Mat distCoeffs3;
    vector_Mat imgpt1;
    vector_Mat imgpt3;
    Size imageSize;
    Mat R12;
    Mat T12;
    Mat R13;
    Mat T13;
    Mat R1;
    Mat R2;
    Mat R3;
    Mat P1;
    Mat P2;
    Mat P3;
    Mat Q;
    double alpha=0;
    Size newImgSize;
    Rect roi1;
    Rect roi2;
    int flags=0;
    float retval;

    // const char* keywords[] = { "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "cameraMatrix3", "distCoeffs3", "imgpt1", "imgpt3", "imageSize", "R12", "T12", "R13", "T13", "alpha", "newImgSize", "flags", "R1", "R2", "R3", "P1", "P2", "P3", "Q", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs1"), distCoeffs1, ArgInfo("distCoeffs1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs2"), distCoeffs2, ArgInfo("distCoeffs2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix3"), cameraMatrix3, ArgInfo("cameraMatrix3", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs3"), distCoeffs3, ArgInfo("distCoeffs3", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgpt1"), imgpt1, ArgInfo("imgpt1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgpt3"), imgpt3, ArgInfo("imgpt3", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r12"), R12, ArgInfo("R12", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t12"), T12, ArgInfo("T12", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r13"), R13, ArgInfo("R13", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t13"), T13, ArgInfo("T13", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r1"), R1, ArgInfo("R1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r2"), R2, ArgInfo("R2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r3"), R3, ArgInfo("R3", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p1"), P1, ArgInfo("P1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p2"), P2, ArgInfo("P2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p3"), P3, ArgInfo("P3", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "q"), Q, ArgInfo("Q", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newImgSize"), newImgSize, ArgInfo("newImgSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::rectify3Collinear(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, cameraMatrix3, distCoeffs3, imgpt1, imgpt3, imageSize, R12, T12, R13, T13, R1, R2, R3, P1, P2, P3, Q, alpha, newImgSize, &roi1, &roi2, flags), env, error_flag, error_term);
        if (!error_flag) {
            ERL_NIF_TERM arr[] = {evision_from(env, retval),
                evision_from(env, R1),
                evision_from(env, R2),
                evision_from(env, R3),
                evision_from(env, P1),
                evision_from(env, P2),
                evision_from(env, P3),
                evision_from(env, Q),
                evision_from(env, roi1),
                evision_from(env, roi2)};
            return enif_make_tuple_from_array(env, arr, 10);
        }
    }

    }
    

    {
    UMat cameraMatrix1;
    UMat distCoeffs1;
    UMat cameraMatrix2;
    UMat distCoeffs2;
    UMat cameraMatrix3;
    UMat distCoeffs3;
    vector_UMat imgpt1;
    vector_UMat imgpt3;
    Size imageSize;
    UMat R12;
    UMat T12;
    UMat R13;
    UMat T13;
    UMat R1;
    UMat R2;
    UMat R3;
    UMat P1;
    UMat P2;
    UMat P3;
    UMat Q;
    double alpha=0;
    Size newImgSize;
    Rect roi1;
    Rect roi2;
    int flags=0;
    float retval;

    // const char* keywords[] = { "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "cameraMatrix3", "distCoeffs3", "imgpt1", "imgpt3", "imageSize", "R12", "T12", "R13", "T13", "alpha", "newImgSize", "flags", "R1", "R2", "R3", "P1", "P2", "P3", "Q", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs1"), distCoeffs1, ArgInfo("distCoeffs1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs2"), distCoeffs2, ArgInfo("distCoeffs2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix3"), cameraMatrix3, ArgInfo("cameraMatrix3", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs3"), distCoeffs3, ArgInfo("distCoeffs3", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgpt1"), imgpt1, ArgInfo("imgpt1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgpt3"), imgpt3, ArgInfo("imgpt3", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r12"), R12, ArgInfo("R12", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t12"), T12, ArgInfo("T12", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r13"), R13, ArgInfo("R13", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t13"), T13, ArgInfo("T13", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r1"), R1, ArgInfo("R1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r2"), R2, ArgInfo("R2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r3"), R3, ArgInfo("R3", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p1"), P1, ArgInfo("P1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p2"), P2, ArgInfo("P2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p3"), P3, ArgInfo("P3", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "q"), Q, ArgInfo("Q", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newImgSize"), newImgSize, ArgInfo("newImgSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::rectify3Collinear(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, cameraMatrix3, distCoeffs3, imgpt1, imgpt3, imageSize, R12, T12, R13, T13, R1, R2, R3, P1, P2, P3, Q, alpha, newImgSize, &roi1, &roi2, flags), env, error_flag, error_term);
        if (!error_flag) {
            ERL_NIF_TERM arr[] = {evision_from(env, retval),
                evision_from(env, R1),
                evision_from(env, R2),
                evision_from(env, R3),
                evision_from(env, P1),
                evision_from(env, P2),
                evision_from(env, P3),
                evision_from(env, Q),
                evision_from(env, roi1),
                evision_from(env, roi2)};
            return enif_make_tuple_from_array(env, arr, 10);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_reduce(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int dim=0;
    int rtype=0;
    int dtype=-1;

    // const char* keywords[] = { "src", "dim", "rtype", "dst", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dim"), dim, ArgInfo("dim", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rtype"), rtype, ArgInfo("rtype", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::reduce(src, dst, dim, rtype, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int dim=0;
    int rtype=0;
    int dtype=-1;

    // const char* keywords[] = { "src", "dim", "rtype", "dst", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dim"), dim, ArgInfo("dim", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rtype"), rtype, ArgInfo("rtype", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::reduce(src, dst, dim, rtype, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_reduceArgMax(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int axis=0;
    bool lastIndex=false;

    // const char* keywords[] = { "src", "axis", "dst", "lastIndex", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "axis"), axis, ArgInfo("axis", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lastIndex"), lastIndex, ArgInfo("lastIndex", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::reduceArgMax(src, dst, axis, lastIndex), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int axis=0;
    bool lastIndex=false;

    // const char* keywords[] = { "src", "axis", "dst", "lastIndex", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "axis"), axis, ArgInfo("axis", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lastIndex"), lastIndex, ArgInfo("lastIndex", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::reduceArgMax(src, dst, axis, lastIndex), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_reduceArgMin(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int axis=0;
    bool lastIndex=false;

    // const char* keywords[] = { "src", "axis", "dst", "lastIndex", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "axis"), axis, ArgInfo("axis", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lastIndex"), lastIndex, ArgInfo("lastIndex", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::reduceArgMin(src, dst, axis, lastIndex), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int axis=0;
    bool lastIndex=false;

    // const char* keywords[] = { "src", "axis", "dst", "lastIndex", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "axis"), axis, ArgInfo("axis", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lastIndex"), lastIndex, ArgInfo("lastIndex", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::reduceArgMin(src, dst, axis, lastIndex), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_remap(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat map1;
    Mat map2;
    int interpolation=0;
    int borderMode=BORDER_CONSTANT;
    Scalar borderValue;

    // const char* keywords[] = { "src", "map1", "map2", "interpolation", "dst", "borderMode", "borderValue", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map1"), map1, ArgInfo("map1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map2"), map2, ArgInfo("map2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "interpolation"), interpolation, ArgInfo("interpolation", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderMode"), borderMode, ArgInfo("borderMode", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderValue"), borderValue, ArgInfo("borderValue", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::remap(src, dst, map1, map2, interpolation, borderMode, borderValue), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat map1;
    UMat map2;
    int interpolation=0;
    int borderMode=BORDER_CONSTANT;
    Scalar borderValue;

    // const char* keywords[] = { "src", "map1", "map2", "interpolation", "dst", "borderMode", "borderValue", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map1"), map1, ArgInfo("map1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map2"), map2, ArgInfo("map2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "interpolation"), interpolation, ArgInfo("interpolation", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderMode"), borderMode, ArgInfo("borderMode", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderValue"), borderValue, ArgInfo("borderValue", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::remap(src, dst, map1, map2, interpolation, borderMode, borderValue), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_repeat(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    int ny=0;
    int nx=0;
    Mat dst;

    // const char* keywords[] = { "src", "ny", "nx", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ny"), ny, ArgInfo("ny", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nx"), nx, ArgInfo("nx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::repeat(src, ny, nx, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    int ny=0;
    int nx=0;
    UMat dst;

    // const char* keywords[] = { "src", "ny", "nx", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ny"), ny, ArgInfo("ny", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nx"), nx, ArgInfo("nx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::repeat(src, ny, nx, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_reprojectImageTo3D(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat disparity;
    Mat _3dImage;
    Mat Q;
    bool handleMissingValues=false;
    int ddepth=-1;

    // const char* keywords[] = { "disparity", "Q", "_3dImage", "handleMissingValues", "ddepth", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "disparity"), disparity, ArgInfo("disparity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "3dImage"), _3dImage, ArgInfo("_3dImage", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "q"), Q, ArgInfo("Q", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "handleMissingValues"), handleMissingValues, ArgInfo("handleMissingValues", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::reprojectImageTo3D(disparity, _3dImage, Q, handleMissingValues, ddepth), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, _3dImage);
        }
    }

    }
    

    {
    UMat disparity;
    UMat _3dImage;
    UMat Q;
    bool handleMissingValues=false;
    int ddepth=-1;

    // const char* keywords[] = { "disparity", "Q", "_3dImage", "handleMissingValues", "ddepth", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "disparity"), disparity, ArgInfo("disparity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "3dImage"), _3dImage, ArgInfo("_3dImage", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "q"), Q, ArgInfo("Q", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "handleMissingValues"), handleMissingValues, ArgInfo("handleMissingValues", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::reprojectImageTo3D(disparity, _3dImage, Q, handleMissingValues, ddepth), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, _3dImage);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_resize(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Size dsize;
    double fx=0;
    double fy=0;
    int interpolation=INTER_LINEAR;

    // const char* keywords[] = { "src", "dsize", "dst", "fx", "fy", "interpolation", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dsize"), dsize, ArgInfo("dsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fx"), fx, ArgInfo("fx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fy"), fy, ArgInfo("fy", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "interpolation"), interpolation, ArgInfo("interpolation", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::resize(src, dst, dsize, fx, fy, interpolation), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    Size dsize;
    double fx=0;
    double fy=0;
    int interpolation=INTER_LINEAR;

    // const char* keywords[] = { "src", "dsize", "dst", "fx", "fy", "interpolation", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dsize"), dsize, ArgInfo("dsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fx"), fx, ArgInfo("fx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fy"), fy, ArgInfo("fy", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "interpolation"), interpolation, ArgInfo("interpolation", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::resize(src, dst, dsize, fx, fy, interpolation), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_resizeWindow(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String winname;
    int width=0;
    int height=0;

    // const char* keywords[] = { "winname", "width", "height", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "width"), width, ArgInfo("width", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "height"), height, ArgInfo("height", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::resizeWindow(winname, width, height), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    }
    

    {
    String winname;
    Size size;

    // const char* keywords[] = { "winname", "size", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::resizeWindow(winname, size), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_rotate(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int rotateCode=0;

    // const char* keywords[] = { "src", "rotateCode", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rotateCode"), rotateCode, ArgInfo("rotateCode", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::rotate(src, dst, rotateCode), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int rotateCode=0;

    // const char* keywords[] = { "src", "rotateCode", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rotateCode"), rotateCode, ArgInfo("rotateCode", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::rotate(src, dst, rotateCode), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_rotatedRectangleIntersection(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    RotatedRect rect1;
    RotatedRect rect2;
    Mat intersectingRegion;
    int retval;

    // const char* keywords[] = { "rect1", "rect2", "intersectingRegion", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rect1"), rect1, ArgInfo("rect1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rect2"), rect2, ArgInfo("rect2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "intersectingRegion"), intersectingRegion, ArgInfo("intersectingRegion", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::rotatedRectangleIntersection(rect1, rect2, intersectingRegion), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, intersectingRegion));
        }
    }

    }
    

    {
    RotatedRect rect1;
    RotatedRect rect2;
    UMat intersectingRegion;
    int retval;

    // const char* keywords[] = { "rect1", "rect2", "intersectingRegion", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rect1"), rect1, ArgInfo("rect1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rect2"), rect2, ArgInfo("rect2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "intersectingRegion"), intersectingRegion, ArgInfo("intersectingRegion", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::rotatedRectangleIntersection(rect1, rect2, intersectingRegion), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, intersectingRegion));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_sampsonDistance(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat pt1;
    Mat pt2;
    Mat F;
    double retval;

    // const char* keywords[] = { "pt1", "pt2", "F", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "pt1"), pt1, ArgInfo("pt1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt2"), pt2, ArgInfo("pt2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f"), F, ArgInfo("F", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::sampsonDistance(pt1, pt2, F), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat pt1;
    UMat pt2;
    UMat F;
    double retval;

    // const char* keywords[] = { "pt1", "pt2", "F", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "pt1"), pt1, ArgInfo("pt1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pt2"), pt2, ArgInfo("pt2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f"), F, ArgInfo("F", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::sampsonDistance(pt1, pt2, F), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_scaleAdd(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    double alpha=0;
    Mat src2;
    Mat dst;

    // const char* keywords[] = { "src1", "alpha", "src2", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::scaleAdd(src1, alpha, src2, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    double alpha=0;
    UMat src2;
    UMat dst;

    // const char* keywords[] = { "src1", "alpha", "src2", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::scaleAdd(src1, alpha, src2, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_seamlessClone(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat mask;
    Point p;
    Mat blend;
    int flags=0;

    // const char* keywords[] = { "src", "dst", "mask", "p", "flags", "blend", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p"), p, ArgInfo("p", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blend"), blend, ArgInfo("blend", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::seamlessClone(src, dst, mask, p, blend, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, blend);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat mask;
    Point p;
    UMat blend;
    int flags=0;

    // const char* keywords[] = { "src", "dst", "mask", "p", "flags", "blend", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p"), p, ArgInfo("p", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "blend"), blend, ArgInfo("blend", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::seamlessClone(src, dst, mask, p, blend, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, blend);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_selectROI(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String windowName;
    Mat img;
    bool showCrosshair=true;
    bool fromCenter=false;
    Rect retval;

    // const char* keywords[] = { "windowName", "img", "showCrosshair", "fromCenter", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "windowName"), windowName, ArgInfo("windowName", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "showCrosshair"), showCrosshair, ArgInfo("showCrosshair", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fromCenter"), fromCenter, ArgInfo("fromCenter", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::selectROI(windowName, img, showCrosshair, fromCenter), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    String windowName;
    UMat img;
    bool showCrosshair=true;
    bool fromCenter=false;
    Rect retval;

    // const char* keywords[] = { "windowName", "img", "showCrosshair", "fromCenter", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "windowName"), windowName, ArgInfo("windowName", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "showCrosshair"), showCrosshair, ArgInfo("showCrosshair", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fromCenter"), fromCenter, ArgInfo("fromCenter", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::selectROI(windowName, img, showCrosshair, fromCenter), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    Mat img;
    bool showCrosshair=true;
    bool fromCenter=false;
    Rect retval;

    // const char* keywords[] = { "img", "showCrosshair", "fromCenter", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "showCrosshair"), showCrosshair, ArgInfo("showCrosshair", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fromCenter"), fromCenter, ArgInfo("fromCenter", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::selectROI(img, showCrosshair, fromCenter), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat img;
    bool showCrosshair=true;
    bool fromCenter=false;
    Rect retval;

    // const char* keywords[] = { "img", "showCrosshair", "fromCenter", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "showCrosshair"), showCrosshair, ArgInfo("showCrosshair", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fromCenter"), fromCenter, ArgInfo("fromCenter", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::selectROI(img, showCrosshair, fromCenter), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_selectROIs(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String windowName;
    Mat img;
    vector_Rect boundingBoxes;
    bool showCrosshair=true;
    bool fromCenter=false;

    // const char* keywords[] = { "windowName", "img", "showCrosshair", "fromCenter", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "windowName"), windowName, ArgInfo("windowName", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "showCrosshair"), showCrosshair, ArgInfo("showCrosshair", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fromCenter"), fromCenter, ArgInfo("fromCenter", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::selectROIs(windowName, img, boundingBoxes, showCrosshair, fromCenter), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, boundingBoxes);
        }
    }

    }
    

    {
    String windowName;
    UMat img;
    vector_Rect boundingBoxes;
    bool showCrosshair=true;
    bool fromCenter=false;

    // const char* keywords[] = { "windowName", "img", "showCrosshair", "fromCenter", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "windowName"), windowName, ArgInfo("windowName", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "showCrosshair"), showCrosshair, ArgInfo("showCrosshair", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fromCenter"), fromCenter, ArgInfo("fromCenter", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::selectROIs(windowName, img, boundingBoxes, showCrosshair, fromCenter), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, boundingBoxes);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_sepFilter2D(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int ddepth=0;
    Mat kernelX;
    Mat kernelY;
    Point anchor=Point(-1,-1);
    double delta=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "kernelX", "kernelY", "dst", "anchor", "delta", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernelX"), kernelX, ArgInfo("kernelX", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernelY"), kernelY, ArgInfo("kernelY", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::sepFilter2D(src, dst, ddepth, kernelX, kernelY, anchor, delta, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int ddepth=0;
    UMat kernelX;
    UMat kernelY;
    Point anchor=Point(-1,-1);
    double delta=0;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "kernelX", "kernelY", "dst", "anchor", "delta", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernelX"), kernelX, ArgInfo("kernelX", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernelY"), kernelY, ArgInfo("kernelY", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "delta"), delta, ArgInfo("delta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::sepFilter2D(src, dst, ddepth, kernelX, kernelY, anchor, delta, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_setIdentity(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat mtx;
    Scalar s=Scalar(1);

    // const char* keywords[] = { "mtx", "s", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "mtx"), mtx, ArgInfo("mtx", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "s"), s, ArgInfo("s", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::setIdentity(mtx, s), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, mtx);
        }
    }

    }
    

    {
    UMat mtx;
    Scalar s=Scalar(1);

    // const char* keywords[] = { "mtx", "s", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "mtx"), mtx, ArgInfo("mtx", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "s"), s, ArgInfo("s", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::setIdentity(mtx, s), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, mtx);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_setLogLevel(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int level=0;
    int retval;

    // const char* keywords[] = { "level", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "level"), level, ArgInfo("level", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::setLogLevel(level), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_setNumThreads(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int nthreads=0;

    // const char* keywords[] = { "nthreads", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "nthreads"), nthreads, ArgInfo("nthreads", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::setNumThreads(nthreads), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_setRNGSeed(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int seed=0;

    // const char* keywords[] = { "seed", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "seed"), seed, ArgInfo("seed", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::setRNGSeed(seed), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_setTrackbarMax(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String trackbarname;
    String winname;
    int maxval=0;

    // const char* keywords[] = { "trackbarname", "winname", "maxval", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "trackbarname"), trackbarname, ArgInfo("trackbarname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxval"), maxval, ArgInfo("maxval", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::setTrackbarMax(trackbarname, winname, maxval), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_setTrackbarMin(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String trackbarname;
    String winname;
    int minval=0;

    // const char* keywords[] = { "trackbarname", "winname", "minval", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "trackbarname"), trackbarname, ArgInfo("trackbarname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minval"), minval, ArgInfo("minval", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::setTrackbarMin(trackbarname, winname, minval), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_setTrackbarPos(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String trackbarname;
    String winname;
    int pos=0;

    // const char* keywords[] = { "trackbarname", "winname", "pos", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "trackbarname"), trackbarname, ArgInfo("trackbarname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pos"), pos, ArgInfo("pos", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::setTrackbarPos(trackbarname, winname, pos), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_setUseOpenVX(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool flag=0;

    // const char* keywords[] = { "flag", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "flag"), flag, ArgInfo("flag", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::setUseOpenVX(flag), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_setUseOptimized(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool onoff=0;

    // const char* keywords[] = { "onoff", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "onoff"), onoff, ArgInfo("onoff", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::setUseOptimized(onoff), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_setWindowProperty(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String winname;
    int prop_id=0;
    double prop_value=0;

    // const char* keywords[] = { "winname", "prop_id", "prop_value", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "prop_id"), prop_id, ArgInfo("prop_id", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "prop_value"), prop_value, ArgInfo("prop_value", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::setWindowProperty(winname, prop_id, prop_value), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_setWindowTitle(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String winname;
    String title;

    // const char* keywords[] = { "winname", "title", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "winname"), winname, ArgInfo("winname", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "title"), title, ArgInfo("title", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::setWindowTitle(winname, title), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_solve(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;
    int flags=DECOMP_LU;
    bool retval;

    // const char* keywords[] = { "src1", "src2", "dst", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solve(src1, src2, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, dst);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;
    int flags=DECOMP_LU;
    bool retval;

    // const char* keywords[] = { "src1", "src2", "dst", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solve(src1, src2, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, dst);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_solveCubic(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat coeffs;
    Mat roots;
    int retval;

    // const char* keywords[] = { "coeffs", "roots", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "coeffs"), coeffs, ArgInfo("coeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "roots"), roots, ArgInfo("roots", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solveCubic(coeffs, roots), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, roots));
        }
    }

    }
    

    {
    UMat coeffs;
    UMat roots;
    int retval;

    // const char* keywords[] = { "coeffs", "roots", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "coeffs"), coeffs, ArgInfo("coeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "roots"), roots, ArgInfo("roots", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solveCubic(coeffs, roots), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, roots));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_solveLP(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat Func;
    Mat Constr;
    Mat z;
    int retval;

    // const char* keywords[] = { "Func", "Constr", "z", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "func"), Func, ArgInfo("Func", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "constr"), Constr, ArgInfo("Constr", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "z"), z, ArgInfo("z", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solveLP(Func, Constr, z), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, z));
        }
    }

    }
    

    {
    UMat Func;
    UMat Constr;
    UMat z;
    int retval;

    // const char* keywords[] = { "Func", "Constr", "z", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "func"), Func, ArgInfo("Func", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "constr"), Constr, ArgInfo("Constr", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "z"), z, ArgInfo("z", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solveLP(Func, Constr, z), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, z));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_solveP3P(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat objectPoints;
    Mat imagePoints;
    Mat cameraMatrix;
    Mat distCoeffs;
    vector_Mat rvecs;
    vector_Mat tvecs;
    int flags=0;
    int retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "flags", "rvecs", "tvecs", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solveP3P(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvecs, tvecs, flags), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, retval), evision_from(env, rvecs), evision_from(env, tvecs));
        }
    }

    }
    

    {
    UMat objectPoints;
    UMat imagePoints;
    UMat cameraMatrix;
    UMat distCoeffs;
    vector_UMat rvecs;
    vector_UMat tvecs;
    int flags=0;
    int retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "flags", "rvecs", "tvecs", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solveP3P(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvecs, tvecs, flags), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, retval), evision_from(env, rvecs), evision_from(env, tvecs));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_solvePnP(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat objectPoints;
    Mat imagePoints;
    Mat cameraMatrix;
    Mat distCoeffs;
    Mat rvec;
    Mat tvec;
    bool useExtrinsicGuess=false;
    int flags=SOLVEPNP_ITERATIVE;
    bool retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "useExtrinsicGuess", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useExtrinsicGuess"), useExtrinsicGuess, ArgInfo("useExtrinsicGuess", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solvePnP(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, useExtrinsicGuess, flags), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_2_to_10_tuple_except_bool
                return enif_make_tuple2(env, evision_from(env, rvec), evision_from(env, tvec));
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat objectPoints;
    UMat imagePoints;
    UMat cameraMatrix;
    UMat distCoeffs;
    UMat rvec;
    UMat tvec;
    bool useExtrinsicGuess=false;
    int flags=SOLVEPNP_ITERATIVE;
    bool retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "useExtrinsicGuess", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useExtrinsicGuess"), useExtrinsicGuess, ArgInfo("useExtrinsicGuess", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solvePnP(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, useExtrinsicGuess, flags), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_2_to_10_tuple_except_bool
                return enif_make_tuple2(env, evision_from(env, rvec), evision_from(env, tvec));
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_solvePnPGeneric(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat objectPoints;
    Mat imagePoints;
    Mat cameraMatrix;
    Mat distCoeffs;
    vector_Mat rvecs;
    vector_Mat tvecs;
    bool useExtrinsicGuess=false;
    std::underlying_type_t<SolvePnPMethod> flags=static_cast<std::underlying_type_t<SolvePnPMethod>>(SOLVEPNP_ITERATIVE);
    Mat rvec;
    Mat tvec;
    Mat reprojectionError;
    int retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "useExtrinsicGuess", "flags", "rvec", "tvec", "reprojectionError", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useExtrinsicGuess"), useExtrinsicGuess, ArgInfo("useExtrinsicGuess", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "reprojectionError"), reprojectionError, ArgInfo("reprojectionError", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solvePnPGeneric(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvecs, tvecs, useExtrinsicGuess, static_cast<SolvePnPMethod>(flags), rvec, tvec, reprojectionError), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, rvecs), evision_from(env, tvecs), evision_from(env, reprojectionError));
        }
    }

    }
    

    {
    UMat objectPoints;
    UMat imagePoints;
    UMat cameraMatrix;
    UMat distCoeffs;
    vector_UMat rvecs;
    vector_UMat tvecs;
    bool useExtrinsicGuess=false;
    std::underlying_type_t<SolvePnPMethod> flags=static_cast<std::underlying_type_t<SolvePnPMethod>>(SOLVEPNP_ITERATIVE);
    UMat rvec;
    UMat tvec;
    UMat reprojectionError;
    int retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvecs", "tvecs", "useExtrinsicGuess", "flags", "rvec", "tvec", "reprojectionError", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useExtrinsicGuess"), useExtrinsicGuess, ArgInfo("useExtrinsicGuess", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "reprojectionError"), reprojectionError, ArgInfo("reprojectionError", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solvePnPGeneric(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvecs, tvecs, useExtrinsicGuess, static_cast<SolvePnPMethod>(flags), rvec, tvec, reprojectionError), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple4(env, evision_from(env, retval), evision_from(env, rvecs), evision_from(env, tvecs), evision_from(env, reprojectionError));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_solvePnPRansac(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat objectPoints;
    Mat imagePoints;
    Mat cameraMatrix;
    Mat distCoeffs;
    Mat rvec;
    Mat tvec;
    bool useExtrinsicGuess=false;
    int iterationsCount=100;
    float reprojectionError=8.0;
    double confidence=0.99;
    Mat inliers;
    int flags=SOLVEPNP_ITERATIVE;
    bool retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "useExtrinsicGuess", "iterationsCount", "reprojectionError", "confidence", "inliers", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useExtrinsicGuess"), useExtrinsicGuess, ArgInfo("useExtrinsicGuess", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterationsCount"), iterationsCount, ArgInfo("iterationsCount", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "reprojectionError"), reprojectionError, ArgInfo("reprojectionError", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, useExtrinsicGuess, iterationsCount, reprojectionError, confidence, inliers, flags), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_2_to_10_tuple_except_bool
                return enif_make_tuple3(env, evision_from(env, rvec), evision_from(env, tvec), evision_from(env, inliers));
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat objectPoints;
    UMat imagePoints;
    UMat cameraMatrix;
    UMat distCoeffs;
    UMat rvec;
    UMat tvec;
    bool useExtrinsicGuess=false;
    int iterationsCount=100;
    float reprojectionError=8.0;
    double confidence=0.99;
    UMat inliers;
    int flags=SOLVEPNP_ITERATIVE;
    bool retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "useExtrinsicGuess", "iterationsCount", "reprojectionError", "confidence", "inliers", "flags", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "useExtrinsicGuess"), useExtrinsicGuess, ArgInfo("useExtrinsicGuess", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "iterationsCount"), iterationsCount, ArgInfo("iterationsCount", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "reprojectionError"), reprojectionError, ArgInfo("reprojectionError", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "confidence"), confidence, ArgInfo("confidence", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, useExtrinsicGuess, iterationsCount, reprojectionError, confidence, inliers, flags), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_2_to_10_tuple_except_bool
                return enif_make_tuple3(env, evision_from(env, rvec), evision_from(env, tvec), evision_from(env, inliers));
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    Mat objectPoints;
    Mat imagePoints;
    Mat cameraMatrix;
    Mat distCoeffs;
    Mat rvec;
    Mat tvec;
    Mat inliers;
    UsacParams params;
    bool retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "inliers", "params", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, inliers, params), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_2_to_10_tuple_except_bool
                return enif_make_tuple4(env, evision_from(env, cameraMatrix), evision_from(env, rvec), evision_from(env, tvec), evision_from(env, inliers));
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat objectPoints;
    UMat imagePoints;
    UMat cameraMatrix;
    UMat distCoeffs;
    UMat rvec;
    UMat tvec;
    UMat inliers;
    UsacParams params;
    bool retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "inliers", "params", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "inliers"), inliers, ArgInfo("inliers", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, inliers, params), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_2_to_10_tuple_except_bool
                return enif_make_tuple4(env, evision_from(env, cameraMatrix), evision_from(env, rvec), evision_from(env, tvec), evision_from(env, inliers));
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_solvePnPRefineLM(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat objectPoints;
    Mat imagePoints;
    Mat cameraMatrix;
    Mat distCoeffs;
    Mat rvec;
    Mat tvec;
    TermCriteria criteria=TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, FLT_EPSILON);

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::solvePnPRefineLM(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, rvec), evision_from(env, tvec));
        }
    }

    }
    

    {
    UMat objectPoints;
    UMat imagePoints;
    UMat cameraMatrix;
    UMat distCoeffs;
    UMat rvec;
    UMat tvec;
    TermCriteria criteria=TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, FLT_EPSILON);

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::solvePnPRefineLM(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, rvec), evision_from(env, tvec));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_solvePnPRefineVVS(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat objectPoints;
    Mat imagePoints;
    Mat cameraMatrix;
    Mat distCoeffs;
    Mat rvec;
    Mat tvec;
    TermCriteria criteria=TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, FLT_EPSILON);
    double VVSlambda=1;

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "criteria", "VVSlambda", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "vVSlambda"), VVSlambda, ArgInfo("VVSlambda", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::solvePnPRefineVVS(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, criteria, VVSlambda), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, rvec), evision_from(env, tvec));
        }
    }

    }
    

    {
    UMat objectPoints;
    UMat imagePoints;
    UMat cameraMatrix;
    UMat distCoeffs;
    UMat rvec;
    UMat tvec;
    TermCriteria criteria=TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, FLT_EPSILON);
    double VVSlambda=1;

    // const char* keywords[] = { "objectPoints", "imagePoints", "cameraMatrix", "distCoeffs", "rvec", "tvec", "criteria", "VVSlambda", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "vVSlambda"), VVSlambda, ArgInfo("VVSlambda", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::solvePnPRefineVVS(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, criteria, VVSlambda), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, rvec), evision_from(env, tvec));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_solvePoly(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat coeffs;
    Mat roots;
    int maxIters=300;
    double retval;

    // const char* keywords[] = { "coeffs", "roots", "maxIters", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "coeffs"), coeffs, ArgInfo("coeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "roots"), roots, ArgInfo("roots", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solvePoly(coeffs, roots, maxIters), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, roots));
        }
    }

    }
    

    {
    UMat coeffs;
    UMat roots;
    int maxIters=300;
    double retval;

    // const char* keywords[] = { "coeffs", "roots", "maxIters", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "coeffs"), coeffs, ArgInfo("coeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "roots"), roots, ArgInfo("roots", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxIters"), maxIters, ArgInfo("maxIters", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::solvePoly(coeffs, roots, maxIters), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, roots));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_sort(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int flags=0;

    // const char* keywords[] = { "src", "flags", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::sort(src, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int flags=0;

    // const char* keywords[] = { "src", "flags", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::sort(src, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_sortIdx(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int flags=0;

    // const char* keywords[] = { "src", "flags", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::sortIdx(src, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int flags=0;

    // const char* keywords[] = { "src", "flags", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::sortIdx(src, dst, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_spatialGradient(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dx;
    Mat dy;
    int ksize=3;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "dx", "dy", "ksize", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dx"), dx, ArgInfo("dx", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dy"), dy, ArgInfo("dy", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::spatialGradient(src, dx, dy, ksize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dx), evision_from(env, dy));
        }
    }

    }
    

    {
    UMat src;
    UMat dx;
    UMat dy;
    int ksize=3;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "dx", "dy", "ksize", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dx"), dx, ArgInfo("dx", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dy"), dy, ArgInfo("dy", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::spatialGradient(src, dx, dy, ksize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, dx), evision_from(env, dy));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_split(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat m;
    vector_Mat mv;

    // const char* keywords[] = { "m", "mv", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), m, ArgInfo("m", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mv"), mv, ArgInfo("mv", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::split(m, mv), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, mv);
        }
    }

    }
    

    {
    UMat m;
    vector_UMat mv;

    // const char* keywords[] = { "m", "mv", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), m, ArgInfo("m", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mv"), mv, ArgInfo("mv", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::split(m, mv), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, mv);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_sqrBoxFilter(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    int ddepth=0;
    Size ksize;
    Point anchor=Point(-1, -1);
    bool normalize=true;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "ksize", "dst", "anchor", "normalize", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normalize"), normalize, ArgInfo("normalize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::sqrBoxFilter(src, dst, ddepth, ksize, anchor, normalize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    int ddepth=0;
    Size ksize;
    Point anchor=Point(-1, -1);
    bool normalize=true;
    int borderType=BORDER_DEFAULT;

    // const char* keywords[] = { "src", "ddepth", "ksize", "dst", "anchor", "normalize", "borderType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ksize"), ksize, ArgInfo("ksize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "anchor"), anchor, ArgInfo("anchor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "normalize"), normalize, ArgInfo("normalize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderType"), borderType, ArgInfo("borderType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::sqrBoxFilter(src, dst, ddepth, ksize, anchor, normalize, borderType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_sqrt(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::sqrt(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::sqrt(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_startWindowThread(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::startWindowThread(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_stereoCalibrate(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat objectPoints;
    vector_Mat imagePoints1;
    vector_Mat imagePoints2;
    Mat cameraMatrix1;
    Mat distCoeffs1;
    Mat cameraMatrix2;
    Mat distCoeffs2;
    Size imageSize;
    Mat R;
    Mat T;
    Mat E;
    Mat F;
    int flags=CALIB_FIX_INTRINSIC;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "E", "F", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints1"), imagePoints1, ArgInfo("imagePoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints2"), imagePoints2, ArgInfo("imagePoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs1"), distCoeffs1, ArgInfo("distCoeffs1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs2"), distCoeffs2, ArgInfo("distCoeffs2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), T, ArgInfo("T", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f"), F, ArgInfo("F", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, E, F, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple9(env, evision_from(env, retval), evision_from(env, cameraMatrix1), evision_from(env, distCoeffs1), evision_from(env, cameraMatrix2), evision_from(env, distCoeffs2), evision_from(env, R), evision_from(env, T), evision_from(env, E), evision_from(env, F));
        }
    }

    }
    

    {
    vector_UMat objectPoints;
    vector_UMat imagePoints1;
    vector_UMat imagePoints2;
    UMat cameraMatrix1;
    UMat distCoeffs1;
    UMat cameraMatrix2;
    UMat distCoeffs2;
    Size imageSize;
    UMat R;
    UMat T;
    UMat E;
    UMat F;
    int flags=CALIB_FIX_INTRINSIC;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "E", "F", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints1"), imagePoints1, ArgInfo("imagePoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints2"), imagePoints2, ArgInfo("imagePoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs1"), distCoeffs1, ArgInfo("distCoeffs1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs2"), distCoeffs2, ArgInfo("distCoeffs2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), T, ArgInfo("T", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f"), F, ArgInfo("F", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, E, F, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple9(env, evision_from(env, retval), evision_from(env, cameraMatrix1), evision_from(env, distCoeffs1), evision_from(env, cameraMatrix2), evision_from(env, distCoeffs2), evision_from(env, R), evision_from(env, T), evision_from(env, E), evision_from(env, F));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_stereoCalibrateExtended(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat objectPoints;
    vector_Mat imagePoints1;
    vector_Mat imagePoints2;
    Mat cameraMatrix1;
    Mat distCoeffs1;
    Mat cameraMatrix2;
    Mat distCoeffs2;
    Size imageSize;
    Mat R;
    Mat T;
    Mat E;
    Mat F;
    Mat perViewErrors;
    int flags=CALIB_FIX_INTRINSIC;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "E", "F", "perViewErrors", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints1"), imagePoints1, ArgInfo("imagePoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints2"), imagePoints2, ArgInfo("imagePoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs1"), distCoeffs1, ArgInfo("distCoeffs1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs2"), distCoeffs2, ArgInfo("distCoeffs2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), T, ArgInfo("T", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f"), F, ArgInfo("F", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "perViewErrors"), perViewErrors, ArgInfo("perViewErrors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, E, F, perViewErrors, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            ERL_NIF_TERM arr[] = {evision_from(env, retval),
                evision_from(env, cameraMatrix1),
                evision_from(env, distCoeffs1),
                evision_from(env, cameraMatrix2),
                evision_from(env, distCoeffs2),
                evision_from(env, R),
                evision_from(env, T),
                evision_from(env, E),
                evision_from(env, F),
                evision_from(env, perViewErrors)};
            return enif_make_tuple_from_array(env, arr, 10);
        }
    }

    }
    

    {
    vector_UMat objectPoints;
    vector_UMat imagePoints1;
    vector_UMat imagePoints2;
    UMat cameraMatrix1;
    UMat distCoeffs1;
    UMat cameraMatrix2;
    UMat distCoeffs2;
    Size imageSize;
    UMat R;
    UMat T;
    UMat E;
    UMat F;
    UMat perViewErrors;
    int flags=CALIB_FIX_INTRINSIC;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "E", "F", "perViewErrors", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints1"), imagePoints1, ArgInfo("imagePoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints2"), imagePoints2, ArgInfo("imagePoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs1"), distCoeffs1, ArgInfo("distCoeffs1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs2"), distCoeffs2, ArgInfo("distCoeffs2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), T, ArgInfo("T", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "e"), E, ArgInfo("E", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f"), F, ArgInfo("F", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "perViewErrors"), perViewErrors, ArgInfo("perViewErrors", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, E, F, perViewErrors, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            ERL_NIF_TERM arr[] = {evision_from(env, retval),
                evision_from(env, cameraMatrix1),
                evision_from(env, distCoeffs1),
                evision_from(env, cameraMatrix2),
                evision_from(env, distCoeffs2),
                evision_from(env, R),
                evision_from(env, T),
                evision_from(env, E),
                evision_from(env, F),
                evision_from(env, perViewErrors)};
            return enif_make_tuple_from_array(env, arr, 10);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_stereoRectify(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat cameraMatrix1;
    Mat distCoeffs1;
    Mat cameraMatrix2;
    Mat distCoeffs2;
    Size imageSize;
    Mat R;
    Mat T;
    Mat R1;
    Mat R2;
    Mat P1;
    Mat P2;
    Mat Q;
    int flags=CALIB_ZERO_DISPARITY;
    double alpha=-1;
    Size newImageSize;
    Rect validPixROI1;
    Rect validPixROI2;

    // const char* keywords[] = { "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "R1", "R2", "P1", "P2", "Q", "flags", "alpha", "newImageSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs1"), distCoeffs1, ArgInfo("distCoeffs1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs2"), distCoeffs2, ArgInfo("distCoeffs2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), T, ArgInfo("T", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r1"), R1, ArgInfo("R1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r2"), R2, ArgInfo("R2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p1"), P1, ArgInfo("P1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p2"), P2, ArgInfo("P2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "q"), Q, ArgInfo("Q", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newImageSize"), newImageSize, ArgInfo("newImageSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, R1, R2, P1, P2, Q, flags, alpha, newImageSize, &validPixROI1, &validPixROI2), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple7(env, evision_from(env, R1), evision_from(env, R2), evision_from(env, P1), evision_from(env, P2), evision_from(env, Q), evision_from(env, validPixROI1), evision_from(env, validPixROI2));
        }
    }

    }
    

    {
    UMat cameraMatrix1;
    UMat distCoeffs1;
    UMat cameraMatrix2;
    UMat distCoeffs2;
    Size imageSize;
    UMat R;
    UMat T;
    UMat R1;
    UMat R2;
    UMat P1;
    UMat P2;
    UMat Q;
    int flags=CALIB_ZERO_DISPARITY;
    double alpha=-1;
    Size newImageSize;
    Rect validPixROI1;
    Rect validPixROI2;

    // const char* keywords[] = { "cameraMatrix1", "distCoeffs1", "cameraMatrix2", "distCoeffs2", "imageSize", "R", "T", "R1", "R2", "P1", "P2", "Q", "flags", "alpha", "newImageSize", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix1"), cameraMatrix1, ArgInfo("cameraMatrix1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs1"), distCoeffs1, ArgInfo("distCoeffs1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix2"), cameraMatrix2, ArgInfo("cameraMatrix2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs2"), distCoeffs2, ArgInfo("distCoeffs2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), T, ArgInfo("T", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r1"), R1, ArgInfo("R1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r2"), R2, ArgInfo("R2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p1"), P1, ArgInfo("P1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p2"), P2, ArgInfo("P2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "q"), Q, ArgInfo("Q", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newImageSize"), newImageSize, ArgInfo("newImageSize", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, R1, R2, P1, P2, Q, flags, alpha, newImageSize, &validPixROI1, &validPixROI2), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple7(env, evision_from(env, R1), evision_from(env, R2), evision_from(env, P1), evision_from(env, P2), evision_from(env, Q), evision_from(env, validPixROI1), evision_from(env, validPixROI2));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_stereoRectifyUncalibrated(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat points1;
    Mat points2;
    Mat F;
    Size imgSize;
    Mat H1;
    Mat H2;
    double threshold=5;
    bool retval;

    // const char* keywords[] = { "points1", "points2", "F", "imgSize", "H1", "H2", "threshold", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f"), F, ArgInfo("F", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgSize"), imgSize, ArgInfo("imgSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h1"), H1, ArgInfo("H1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h2"), H2, ArgInfo("H2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::stereoRectifyUncalibrated(points1, points2, F, imgSize, H1, H2, threshold), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_2_to_10_tuple_except_bool
                return enif_make_tuple2(env, evision_from(env, H1), evision_from(env, H2));
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    UMat points1;
    UMat points2;
    UMat F;
    Size imgSize;
    UMat H1;
    UMat H2;
    double threshold=5;
    bool retval;

    // const char* keywords[] = { "points1", "points2", "F", "imgSize", "H1", "H2", "threshold", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "points1"), points1, ArgInfo("points1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points2"), points2, ArgInfo("points2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f"), F, ArgInfo("F", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imgSize"), imgSize, ArgInfo("imgSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h1"), H1, ArgInfo("H1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h2"), H2, ArgInfo("H2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "threshold"), threshold, ArgInfo("threshold", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::stereoRectifyUncalibrated(points1, points2, F, imgSize, H1, H2, threshold), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_2_to_10_tuple_except_bool
                return enif_make_tuple2(env, evision_from(env, H1), evision_from(env, H2));
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_stylization(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    float sigma_s=60;
    float sigma_r=0.45f;

    // const char* keywords[] = { "src", "dst", "sigma_s", "sigma_r", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_s"), sigma_s, ArgInfo("sigma_s", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_r"), sigma_r, ArgInfo("sigma_r", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::stylization(src, dst, sigma_s, sigma_r), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    float sigma_s=60;
    float sigma_r=0.45f;

    // const char* keywords[] = { "src", "dst", "sigma_s", "sigma_r", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_s"), sigma_s, ArgInfo("sigma_s", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma_r"), sigma_r, ArgInfo("sigma_r", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::stylization(src, dst, sigma_s, sigma_r), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_subtract(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src1;
    Mat src2;
    Mat dst;
    Mat mask;
    int dtype=-1;

    // const char* keywords[] = { "src1", "src2", "dst", "mask", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::subtract(src1, src2, dst, mask, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src1;
    UMat src2;
    UMat dst;
    UMat mask;
    int dtype=-1;

    // const char* keywords[] = { "src1", "src2", "dst", "mask", "dtype", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src1"), src1, ArgInfo("src1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src2"), src2, ArgInfo("src2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::subtract(src1, src2, dst, mask, dtype), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_sumElems(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Scalar retval;

    // const char* keywords[] = { "src", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::sum(src), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat src;
    Scalar retval;

    // const char* keywords[] = { "src", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::sum(src), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_textureFlattening(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat mask;
    Mat dst;
    float low_threshold=30;
    float high_threshold=45;
    int kernel_size=3;

    // const char* keywords[] = { "src", "mask", "dst", "low_threshold", "high_threshold", "kernel_size", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "low_threshold"), low_threshold, ArgInfo("low_threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "high_threshold"), high_threshold, ArgInfo("high_threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernel_size"), kernel_size, ArgInfo("kernel_size", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::textureFlattening(src, mask, dst, low_threshold, high_threshold, kernel_size), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat mask;
    UMat dst;
    float low_threshold=30;
    float high_threshold=45;
    int kernel_size=3;

    // const char* keywords[] = { "src", "mask", "dst", "low_threshold", "high_threshold", "kernel_size", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "low_threshold"), low_threshold, ArgInfo("low_threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "high_threshold"), high_threshold, ArgInfo("high_threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kernel_size"), kernel_size, ArgInfo("kernel_size", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::textureFlattening(src, mask, dst, low_threshold, high_threshold, kernel_size), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_threshold(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    double thresh=0;
    double maxval=0;
    int type=0;
    double retval;

    // const char* keywords[] = { "src", "thresh", "maxval", "type", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thresh"), thresh, ArgInfo("thresh", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxval"), maxval, ArgInfo("maxval", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::threshold(src, dst, thresh, maxval, type), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, dst));
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    double thresh=0;
    double maxval=0;
    int type=0;
    double retval;

    // const char* keywords[] = { "src", "thresh", "maxval", "type", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "thresh"), thresh, ArgInfo("thresh", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxval"), maxval, ArgInfo("maxval", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::threshold(src, dst, thresh, maxval, type), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, dst));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_trace(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat mtx;
    Scalar retval;

    // const char* keywords[] = { "mtx", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "mtx"), mtx, ArgInfo("mtx", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::trace(mtx), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat mtx;
    Scalar retval;

    // const char* keywords[] = { "mtx", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "mtx"), mtx, ArgInfo("mtx", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::trace(mtx), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_transform(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat m;

    // const char* keywords[] = { "src", "m", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), m, ArgInfo("m", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::transform(src, dst, m), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat m;

    // const char* keywords[] = { "src", "m", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), m, ArgInfo("m", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::transform(src, dst, m), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_transpose(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::transpose(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::transpose(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_transposeND(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    vector_int order;
    Mat dst;

    // const char* keywords[] = { "src", "order", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "order"), order, ArgInfo("order", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::transposeND(src, order, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    vector_int order;
    UMat dst;

    // const char* keywords[] = { "src", "order", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "order"), order, ArgInfo("order", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::transposeND(src, order, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_triangulatePoints(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat projMatr1;
    Mat projMatr2;
    Mat projPoints1;
    Mat projPoints2;
    Mat points4D;

    // const char* keywords[] = { "projMatr1", "projMatr2", "projPoints1", "projPoints2", "points4D", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "projMatr1"), projMatr1, ArgInfo("projMatr1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "projMatr2"), projMatr2, ArgInfo("projMatr2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "projPoints1"), projPoints1, ArgInfo("projPoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "projPoints2"), projPoints2, ArgInfo("projPoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points4D"), points4D, ArgInfo("points4D", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::triangulatePoints(projMatr1, projMatr2, projPoints1, projPoints2, points4D), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, points4D);
        }
    }

    }
    

    {
    UMat projMatr1;
    UMat projMatr2;
    UMat projPoints1;
    UMat projPoints2;
    UMat points4D;

    // const char* keywords[] = { "projMatr1", "projMatr2", "projPoints1", "projPoints2", "points4D", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "projMatr1"), projMatr1, ArgInfo("projMatr1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "projMatr2"), projMatr2, ArgInfo("projMatr2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "projPoints1"), projPoints1, ArgInfo("projPoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "projPoints2"), projPoints2, ArgInfo("projPoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "points4D"), points4D, ArgInfo("points4D", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::triangulatePoints(projMatr1, projMatr2, projPoints1, projPoints2, points4D), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, points4D);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_undistort(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat cameraMatrix;
    Mat distCoeffs;
    Mat newCameraMatrix;

    // const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "dst", "newCameraMatrix", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newCameraMatrix"), newCameraMatrix, ArgInfo("newCameraMatrix", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::undistort(src, dst, cameraMatrix, distCoeffs, newCameraMatrix), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat cameraMatrix;
    UMat distCoeffs;
    UMat newCameraMatrix;

    // const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "dst", "newCameraMatrix", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newCameraMatrix"), newCameraMatrix, ArgInfo("newCameraMatrix", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::undistort(src, dst, cameraMatrix, distCoeffs, newCameraMatrix), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_undistortImagePoints(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat cameraMatrix;
    Mat distCoeffs;
    TermCriteria arg1=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 5, 0.01);

    // const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "dst", "arg1", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "arg1"), arg1, ArgInfo("arg1", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::undistortImagePoints(src, dst, cameraMatrix, distCoeffs, arg1), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat cameraMatrix;
    UMat distCoeffs;
    TermCriteria arg1=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 5, 0.01);

    // const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "dst", "arg1", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "arg1"), arg1, ArgInfo("arg1", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::undistortImagePoints(src, dst, cameraMatrix, distCoeffs, arg1), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_undistortPoints(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat cameraMatrix;
    Mat distCoeffs;
    Mat R;
    Mat P;

    // const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "dst", "R", "P", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p"), P, ArgInfo("P", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::undistortPoints(src, dst, cameraMatrix, distCoeffs, R, P), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat cameraMatrix;
    UMat distCoeffs;
    UMat R;
    UMat P;

    // const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "dst", "R", "P", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p"), P, ArgInfo("P", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::undistortPoints(src, dst, cameraMatrix, distCoeffs, R, P), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_undistortPointsIter(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat cameraMatrix;
    Mat distCoeffs;
    Mat R;
    Mat P;
    TermCriteria criteria;

    // const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "R", "P", "criteria", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p"), P, ArgInfo("P", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::undistortPoints(src, dst, cameraMatrix, distCoeffs, R, P, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat cameraMatrix;
    UMat distCoeffs;
    UMat R;
    UMat P;
    TermCriteria criteria;

    // const char* keywords[] = { "src", "cameraMatrix", "distCoeffs", "R", "P", "criteria", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cameraMatrix"), cameraMatrix, ArgInfo("cameraMatrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distCoeffs"), distCoeffs, ArgInfo("distCoeffs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p"), P, ArgInfo("P", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::undistortPoints(src, dst, cameraMatrix, distCoeffs, R, P, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_useOpenVX(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::useOpenVX(), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_useOptimized(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::useOptimized(), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_validateDisparity(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat disparity;
    Mat cost;
    int minDisparity=0;
    int numberOfDisparities=0;
    int disp12MaxDisp=1;

    // const char* keywords[] = { "disparity", "cost", "minDisparity", "numberOfDisparities", "disp12MaxDisp", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "disparity"), disparity, ArgInfo("disparity", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cost"), cost, ArgInfo("cost", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minDisparity"), minDisparity, ArgInfo("minDisparity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "numberOfDisparities"), numberOfDisparities, ArgInfo("numberOfDisparities", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "disp12MaxDisp"), disp12MaxDisp, ArgInfo("disp12MaxDisp", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::validateDisparity(disparity, cost, minDisparity, numberOfDisparities, disp12MaxDisp), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, disparity);
        }
    }

    }
    

    {
    UMat disparity;
    UMat cost;
    int minDisparity=0;
    int numberOfDisparities=0;
    int disp12MaxDisp=1;

    // const char* keywords[] = { "disparity", "cost", "minDisparity", "numberOfDisparities", "disp12MaxDisp", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "disparity"), disparity, ArgInfo("disparity", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cost"), cost, ArgInfo("cost", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minDisparity"), minDisparity, ArgInfo("minDisparity", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "numberOfDisparities"), numberOfDisparities, ArgInfo("numberOfDisparities", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "disp12MaxDisp"), disp12MaxDisp, ArgInfo("disp12MaxDisp", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::validateDisparity(disparity, cost, minDisparity, numberOfDisparities, disp12MaxDisp), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, disparity);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_vconcat(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat src;
    Mat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::vconcat(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    vector_UMat src;
    UMat dst;

    // const char* keywords[] = { "src", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::vconcat(src, dst), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_waitKeyEx(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int delay=0;
    int retval;

    // const char* keywords[] = { "delay", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "delay"), delay, ArgInfo("delay", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::waitKeyEx(delay), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_warpAffine(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat M;
    Size dsize;
    int flags=INTER_LINEAR;
    int borderMode=BORDER_CONSTANT;
    Scalar borderValue;

    // const char* keywords[] = { "src", "M", "dsize", "dst", "flags", "borderMode", "borderValue", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), M, ArgInfo("M", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dsize"), dsize, ArgInfo("dsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderMode"), borderMode, ArgInfo("borderMode", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderValue"), borderValue, ArgInfo("borderValue", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::warpAffine(src, dst, M, dsize, flags, borderMode, borderValue), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat M;
    Size dsize;
    int flags=INTER_LINEAR;
    int borderMode=BORDER_CONSTANT;
    Scalar borderValue;

    // const char* keywords[] = { "src", "M", "dsize", "dst", "flags", "borderMode", "borderValue", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), M, ArgInfo("M", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dsize"), dsize, ArgInfo("dsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderMode"), borderMode, ArgInfo("borderMode", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderValue"), borderValue, ArgInfo("borderValue", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::warpAffine(src, dst, M, dsize, flags, borderMode, borderValue), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_warpPerspective(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Mat M;
    Size dsize;
    int flags=INTER_LINEAR;
    int borderMode=BORDER_CONSTANT;
    Scalar borderValue;

    // const char* keywords[] = { "src", "M", "dsize", "dst", "flags", "borderMode", "borderValue", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), M, ArgInfo("M", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dsize"), dsize, ArgInfo("dsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderMode"), borderMode, ArgInfo("borderMode", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderValue"), borderValue, ArgInfo("borderValue", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::warpPerspective(src, dst, M, dsize, flags, borderMode, borderValue), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    UMat M;
    Size dsize;
    int flags=INTER_LINEAR;
    int borderMode=BORDER_CONSTANT;
    Scalar borderValue;

    // const char* keywords[] = { "src", "M", "dsize", "dst", "flags", "borderMode", "borderValue", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), M, ArgInfo("M", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dsize"), dsize, ArgInfo("dsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderMode"), borderMode, ArgInfo("borderMode", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "borderValue"), borderValue, ArgInfo("borderValue", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::warpPerspective(src, dst, M, dsize, flags, borderMode, borderValue), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_warpPolar(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat src;
    Mat dst;
    Size dsize;
    Point2f center;
    double maxRadius=0;
    int flags=0;

    // const char* keywords[] = { "src", "dsize", "center", "maxRadius", "flags", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dsize"), dsize, ArgInfo("dsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxRadius"), maxRadius, ArgInfo("maxRadius", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::warpPolar(src, dst, dsize, center, maxRadius, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }
    

    {
    UMat src;
    UMat dst;
    Size dsize;
    Point2f center;
    double maxRadius=0;
    int flags=0;

    // const char* keywords[] = { "src", "dsize", "center", "maxRadius", "flags", "dst", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dsize"), dsize, ArgInfo("dsize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "center"), center, ArgInfo("center", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxRadius"), maxRadius, ArgInfo("maxRadius", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::warpPolar(src, dst, dsize, center, maxRadius, flags), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, dst);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_watershed(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    Mat markers;

    // const char* keywords[] = { "image", "markers", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "markers"), markers, ArgInfo("markers", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::watershed(image, markers), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, markers);
        }
    }

    }
    

    {
    UMat image;
    UMat markers;

    // const char* keywords[] = { "image", "markers", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "markers"), markers, ArgInfo("markers", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::watershed(image, markers), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, markers);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_writeOpticalFlow(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String path;
    Mat flow;
    bool retval;

    // const char* keywords[] = { "path", "flow", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "path"), path, ArgInfo("path", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flow"), flow, ArgInfo("flow", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::writeOpticalFlow(path, flow), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }
    

    {
    String path;
    UMat flow;
    bool retval;

    // const char* keywords[] = { "path", "flow", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "path"), path, ArgInfo("path", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flow"), flow, ArgInfo("flow", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::writeOpticalFlow(path, flow), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_Event_elapsedTime(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Event start;
    Event end_;
    float retval;

    // const char* keywords[] = { "start", "end_", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "start"), start, ArgInfo("start", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "end_"), end_, ArgInfo("end_", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::cuda::Event::elapsedTime(start, end_), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_GpuMat_defaultAllocator(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    GpuMat::Allocator* retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::cuda::GpuMat::defaultAllocator(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_GpuMat_setDefaultAllocator(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    GpuMat_Allocator* allocator;

    // const char* keywords[] = { "allocator", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "allocator"), allocator, ArgInfo("allocator", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::GpuMat::setDefaultAllocator(allocator), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_Stream_Null(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Stream retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::cuda::Stream::Null(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_TargetArchs_has(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int major=0;
    int minor=0;
    bool retval;

    // const char* keywords[] = { "major", "minor", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "major"), major, ArgInfo("major", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minor"), minor, ArgInfo("minor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::cuda::TargetArchs::has(major, minor), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_TargetArchs_hasBin(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int major=0;
    int minor=0;
    bool retval;

    // const char* keywords[] = { "major", "minor", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "major"), major, ArgInfo("major", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minor"), minor, ArgInfo("minor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::cuda::TargetArchs::hasBin(major, minor), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_TargetArchs_hasEqualOrGreater(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int major=0;
    int minor=0;
    bool retval;

    // const char* keywords[] = { "major", "minor", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "major"), major, ArgInfo("major", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minor"), minor, ArgInfo("minor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::cuda::TargetArchs::hasEqualOrGreater(major, minor), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_TargetArchs_hasEqualOrGreaterBin(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int major=0;
    int minor=0;
    bool retval;

    // const char* keywords[] = { "major", "minor", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "major"), major, ArgInfo("major", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minor"), minor, ArgInfo("minor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::cuda::TargetArchs::hasEqualOrGreaterBin(major, minor), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_TargetArchs_hasEqualOrGreaterPtx(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int major=0;
    int minor=0;
    bool retval;

    // const char* keywords[] = { "major", "minor", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "major"), major, ArgInfo("major", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minor"), minor, ArgInfo("minor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::cuda::TargetArchs::hasEqualOrGreaterPtx(major, minor), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_TargetArchs_hasEqualOrLessPtx(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int major=0;
    int minor=0;
    bool retval;

    // const char* keywords[] = { "major", "minor", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "major"), major, ArgInfo("major", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minor"), minor, ArgInfo("minor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::cuda::TargetArchs::hasEqualOrLessPtx(major, minor), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_TargetArchs_hasPtx(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int major=0;
    int minor=0;
    bool retval;

    // const char* keywords[] = { "major", "minor", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "major"), major, ArgInfo("major", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "minor"), minor, ArgInfo("minor", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::cuda::TargetArchs::hasPtx(major, minor), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_createContinuous(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    int rows=0;
    int cols=0;
    int type=0;
    Mat arr;

    // const char* keywords[] = { "rows", "cols", "type", "arr", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rows"), rows, ArgInfo("rows", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cols"), cols, ArgInfo("cols", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "arr"), arr, ArgInfo("arr", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::createContinuous(rows, cols, type, arr), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, arr);
        }
    }

    }
    

    {
    int rows=0;
    int cols=0;
    int type=0;
    cuda::GpuMat arr;

    // const char* keywords[] = { "rows", "cols", "type", "arr", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rows"), rows, ArgInfo("rows", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cols"), cols, ArgInfo("cols", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "arr"), arr, ArgInfo("arr", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::createContinuous(rows, cols, type, arr), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, arr);
        }
    }

    }
    

    {
    int rows=0;
    int cols=0;
    int type=0;
    UMat arr;

    // const char* keywords[] = { "rows", "cols", "type", "arr", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rows"), rows, ArgInfo("rows", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cols"), cols, ArgInfo("cols", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "arr"), arr, ArgInfo("arr", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::createContinuous(rows, cols, type, arr), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, arr);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_ensureSizeIsEnough(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    int rows=0;
    int cols=0;
    int type=0;
    Mat arr;

    // const char* keywords[] = { "rows", "cols", "type", "arr", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rows"), rows, ArgInfo("rows", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cols"), cols, ArgInfo("cols", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "arr"), arr, ArgInfo("arr", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::ensureSizeIsEnough(rows, cols, type, arr), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, arr);
        }
    }

    }
    

    {
    int rows=0;
    int cols=0;
    int type=0;
    cuda::GpuMat arr;

    // const char* keywords[] = { "rows", "cols", "type", "arr", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rows"), rows, ArgInfo("rows", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cols"), cols, ArgInfo("cols", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "arr"), arr, ArgInfo("arr", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::ensureSizeIsEnough(rows, cols, type, arr), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, arr);
        }
    }

    }
    

    {
    int rows=0;
    int cols=0;
    int type=0;
    UMat arr;

    // const char* keywords[] = { "rows", "cols", "type", "arr", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rows"), rows, ArgInfo("rows", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cols"), cols, ArgInfo("cols", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "arr"), arr, ArgInfo("arr", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::ensureSizeIsEnough(rows, cols, type, arr), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, arr);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_getCudaEnabledDeviceCount(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::cuda::getCudaEnabledDeviceCount(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_getDevice(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::cuda::getDevice(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_printCudaDeviceInfo(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int device=0;

    // const char* keywords[] = { "device", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "device"), device, ArgInfo("device", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::printCudaDeviceInfo(device), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_printShortCudaDeviceInfo(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int device=0;

    // const char* keywords[] = { "device", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "device"), device, ArgInfo("device", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::printShortCudaDeviceInfo(device), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_registerPageLocked(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Mat m;

    // const char* keywords[] = { "m", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), m, ArgInfo("m", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::registerPageLocked(m), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_resetDevice(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::resetDevice(), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_setBufferPoolConfig(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int deviceId=0;
    size_t stackSize=0;
    int stackCount=0;

    // const char* keywords[] = { "deviceId", "stackSize", "stackCount", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "deviceId"), deviceId, ArgInfo("deviceId", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stackSize"), stackSize, ArgInfo("stackSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "stackCount"), stackCount, ArgInfo("stackCount", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::setBufferPoolConfig(deviceId, stackSize, stackCount), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_setBufferPoolUsage(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool on=0;

    // const char* keywords[] = { "on", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "on"), on, ArgInfo("on", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::setBufferPoolUsage(on), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_setDevice(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int device=0;

    // const char* keywords[] = { "device", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "device"), device, ArgInfo("device", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::setDevice(device), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_cuda_unregisterPageLocked(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::cuda;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Mat m;

    // const char* keywords[] = { "m", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "m"), m, ArgInfo("m", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::cuda::unregisterPageLocked(m), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_BestOf2NearestMatcher_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool try_use_gpu=false;
    float match_conf=0.3f;
    int num_matches_thresh1=6;
    int num_matches_thresh2=6;
    Ptr<BestOf2NearestMatcher> retval;

    // const char* keywords[] = { "try_use_gpu", "match_conf", "num_matches_thresh1", "num_matches_thresh2", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "try_use_gpu"), try_use_gpu, ArgInfo("try_use_gpu", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "match_conf"), match_conf, ArgInfo("match_conf", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "num_matches_thresh1"), num_matches_thresh1, ArgInfo("num_matches_thresh1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "num_matches_thresh2"), num_matches_thresh2, ArgInfo("num_matches_thresh2", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::BestOf2NearestMatcher::create(try_use_gpu, match_conf, num_matches_thresh1, num_matches_thresh2), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_Blender_createDefault(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int type=0;
    bool try_gpu=false;
    Ptr<Blender> retval;

    // const char* keywords[] = { "type", "try_gpu", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "try_gpu"), try_gpu, ArgInfo("try_gpu", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::Blender::createDefault(type, try_gpu), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_ExposureCompensator_createDefault(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int type=0;
    Ptr<ExposureCompensator> retval;

    // const char* keywords[] = { "type", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::ExposureCompensator::createDefault(type), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_SeamFinder_createDefault(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int type=0;
    Ptr<SeamFinder> retval;

    // const char* keywords[] = { "type", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::SeamFinder::createDefault(type), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_Timelapser_createDefault(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int type=0;
    Ptr<Timelapser> retval;

    // const char* keywords[] = { "type", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "type"), type, ArgInfo("type", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::Timelapser::createDefault(type), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_calibrateRotatingCamera(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_Mat Hs;
    Mat K;
    bool retval;

    // const char* keywords[] = { "Hs", "K", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "hs"), Hs, ArgInfo("Hs", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::calibrateRotatingCamera(Hs, K), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                // code_ret_1_tuple_except_bool
                return evision_from(env, K);
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_computeImageFeatures(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Ptr<Feature2D> featuresFinder;
    vector_Mat images;
    vector_ImageFeatures features;
    vector_Mat masks;

    // const char* keywords[] = { "featuresFinder", "images", "masks", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "featuresFinder"), featuresFinder, ArgInfo("featuresFinder", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "images"), images, ArgInfo("images", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "masks"), masks, ArgInfo("masks", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::computeImageFeatures(featuresFinder, images, features, masks), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, features);
        }
    }

    }
    

    {
    Ptr<Feature2D> featuresFinder;
    vector_UMat images;
    vector_ImageFeatures features;
    vector_UMat masks;

    // const char* keywords[] = { "featuresFinder", "images", "masks", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "featuresFinder"), featuresFinder, ArgInfo("featuresFinder", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "images"), images, ArgInfo("images", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "masks"), masks, ArgInfo("masks", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::computeImageFeatures(featuresFinder, images, features, masks), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, features);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_computeImageFeatures2(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Ptr<Feature2D> featuresFinder;
    Mat image;
    ImageFeatures features;
    Mat mask;

    // const char* keywords[] = { "featuresFinder", "image", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "featuresFinder"), featuresFinder, ArgInfo("featuresFinder", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::computeImageFeatures(featuresFinder, image, features, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, features);
        }
    }

    }
    

    {
    Ptr<Feature2D> featuresFinder;
    UMat image;
    ImageFeatures features;
    UMat mask;

    // const char* keywords[] = { "featuresFinder", "image", "mask", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "featuresFinder"), featuresFinder, ArgInfo("featuresFinder", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::computeImageFeatures(featuresFinder, image, features, mask), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, features);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_createLaplacePyr(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    int num_levels=0;
    vector_UMat pyr;

    // const char* keywords[] = { "img", "num_levels", "pyr", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "num_levels"), num_levels, ArgInfo("num_levels", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pyr"), pyr, ArgInfo("pyr", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::createLaplacePyr(img, num_levels, pyr), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, pyr);
        }
    }

    }
    

    {
    UMat img;
    int num_levels=0;
    vector_UMat pyr;

    // const char* keywords[] = { "img", "num_levels", "pyr", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "num_levels"), num_levels, ArgInfo("num_levels", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pyr"), pyr, ArgInfo("pyr", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::createLaplacePyr(img, num_levels, pyr), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, pyr);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_createLaplacePyrGpu(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat img;
    int num_levels=0;
    vector_UMat pyr;

    // const char* keywords[] = { "img", "num_levels", "pyr", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "num_levels"), num_levels, ArgInfo("num_levels", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pyr"), pyr, ArgInfo("pyr", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::createLaplacePyrGpu(img, num_levels, pyr), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, pyr);
        }
    }

    }
    

    {
    UMat img;
    int num_levels=0;
    vector_UMat pyr;

    // const char* keywords[] = { "img", "num_levels", "pyr", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "img"), img, ArgInfo("img", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "num_levels"), num_levels, ArgInfo("num_levels", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pyr"), pyr, ArgInfo("pyr", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::createLaplacePyrGpu(img, num_levels, pyr), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, pyr);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_createWeightMap(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat mask;
    float sharpness=0.f;
    Mat weight;

    // const char* keywords[] = { "mask", "sharpness", "weight", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sharpness"), sharpness, ArgInfo("sharpness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "weight"), weight, ArgInfo("weight", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::createWeightMap(mask, sharpness, weight), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, weight);
        }
    }

    }
    

    {
    UMat mask;
    float sharpness=0.f;
    UMat weight;

    // const char* keywords[] = { "mask", "sharpness", "weight", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "mask"), mask, ArgInfo("mask", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sharpness"), sharpness, ArgInfo("sharpness", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "weight"), weight, ArgInfo("weight", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::createWeightMap(mask, sharpness, weight), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, weight);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_focalsFromHomography(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Mat H;
    double f0=0;
    double f1=0;
    bool f0_ok=0;
    bool f1_ok=0;

    // const char* keywords[] = { "H", "f0", "f1", "f0_ok", "f1_ok", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), H, ArgInfo("H", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f0"), f0, ArgInfo("f0", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f1"), f1, ArgInfo("f1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f0_ok"), f0_ok, ArgInfo("f0_ok", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "f1_ok"), f1_ok, ArgInfo("f1_ok", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::focalsFromHomography(H, f0, f1, f0_ok, f1_ok), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_leaveBiggestComponent(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_ImageFeatures features;
    vector_MatchesInfo pairwise_matches;
    float conf_threshold=0.f;
    std::vector<int> retval;

    // const char* keywords[] = { "features", "pairwise_matches", "conf_threshold", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "features"), features, ArgInfo("features", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pairwise_matches"), pairwise_matches, ArgInfo("pairwise_matches", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "conf_threshold"), conf_threshold, ArgInfo("conf_threshold", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::leaveBiggestComponent(features, pairwise_matches, conf_threshold), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_matchesGraphAsString(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_String pathes;
    vector_MatchesInfo pairwise_matches;
    float conf_threshold=0.f;
    String retval;

    // const char* keywords[] = { "pathes", "pairwise_matches", "conf_threshold", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "pathes"), pathes, ArgInfo("pathes", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "pairwise_matches"), pairwise_matches, ArgInfo("pairwise_matches", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "conf_threshold"), conf_threshold, ArgInfo("conf_threshold", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::matchesGraphAsString(pathes, pairwise_matches, conf_threshold), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_normalizeUsingWeightMap(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat weight;
    Mat src;

    // const char* keywords[] = { "weight", "src", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "weight"), weight, ArgInfo("weight", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::normalizeUsingWeightMap(weight, src), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, src);
        }
    }

    }
    

    {
    UMat weight;
    UMat src;

    // const char* keywords[] = { "weight", "src", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "weight"), weight, ArgInfo("weight", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::normalizeUsingWeightMap(weight, src), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, src);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_overlapRoi(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Point tl1;
    Point tl2;
    Size sz1;
    Size sz2;
    Rect roi;
    bool retval;

    // const char* keywords[] = { "tl1", "tl2", "sz1", "sz2", "roi", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "tl1"), tl1, ArgInfo("tl1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tl2"), tl2, ArgInfo("tl2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sz1"), sz1, ArgInfo("sz1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sz2"), sz2, ArgInfo("sz2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "roi"), roi, ArgInfo("roi", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::overlapRoi(tl1, tl2, sz1, sz2, roi), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_restoreImageFromLaplacePyr(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_UMat pyr;

    // const char* keywords[] = { "pyr", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "pyr"), pyr, ArgInfo("pyr", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::restoreImageFromLaplacePyr(pyr), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, pyr);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_restoreImageFromLaplacePyrGpu(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_UMat pyr;

    // const char* keywords[] = { "pyr", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "pyr"), pyr, ArgInfo("pyr", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::restoreImageFromLaplacePyrGpu(pyr), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, pyr);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_resultRoi(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Point corners;
    vector_UMat images;
    Rect retval;

    // const char* keywords[] = { "corners", "images", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "images"), images, ArgInfo("images", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::resultRoi(corners, images), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    vector_Point corners;
    vector_Size sizes;
    Rect retval;

    // const char* keywords[] = { "corners", "sizes", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sizes"), sizes, ArgInfo("sizes", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::resultRoi(corners, sizes), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_resultRoiIntersection(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_Point corners;
    vector_Size sizes;
    Rect retval;

    // const char* keywords[] = { "corners", "sizes", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sizes"), sizes, ArgInfo("sizes", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::resultRoiIntersection(corners, sizes), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_resultTl(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_Point corners;
    Point retval;

    // const char* keywords[] = { "corners", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "corners"), corners, ArgInfo("corners", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::resultTl(corners), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_selectRandomSubset(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int count=0;
    int size=0;
    vector_int subset;

    // const char* keywords[] = { "count", "size", "subset", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "count"), count, ArgInfo("count", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "subset"), subset, ArgInfo("subset", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::selectRandomSubset(count, size, subset), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_stitchingLogLevel(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::detail::stitchingLogLevel(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_detail_waveCorrect(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::detail;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_Mat rmats;
    std::underlying_type_t<WaveCorrectKind> kind=static_cast<std::underlying_type_t<WaveCorrectKind>>(static_cast<WaveCorrectKind>(0));

    // const char* keywords[] = { "rmats", "kind", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rmats"), rmats, ArgInfo("rmats", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "kind"), kind, ArgInfo("kind", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::detail::waveCorrect(rmats, static_cast<WaveCorrectKind>(kind)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, rmats);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_NMSBoxes(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_Rect2d bboxes;
    vector_float scores;
    float score_threshold=0.f;
    float nms_threshold=0.f;
    vector_int indices;
    float eta=1.f;
    int top_k=0;

    // const char* keywords[] = { "bboxes", "scores", "score_threshold", "nms_threshold", "eta", "top_k", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "bboxes"), bboxes, ArgInfo("bboxes", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scores"), scores, ArgInfo("scores", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "score_threshold"), score_threshold, ArgInfo("score_threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nms_threshold"), nms_threshold, ArgInfo("nms_threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eta"), eta, ArgInfo("eta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "top_k"), top_k, ArgInfo("top_k", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::dnn::NMSBoxes(bboxes, scores, score_threshold, nms_threshold, indices, eta, top_k), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, indices);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_NMSBoxesRotated(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_RotatedRect bboxes;
    vector_float scores;
    float score_threshold=0.f;
    float nms_threshold=0.f;
    vector_int indices;
    float eta=1.f;
    int top_k=0;

    // const char* keywords[] = { "bboxes", "scores", "score_threshold", "nms_threshold", "eta", "top_k", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "bboxes"), bboxes, ArgInfo("bboxes", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scores"), scores, ArgInfo("scores", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "score_threshold"), score_threshold, ArgInfo("score_threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nms_threshold"), nms_threshold, ArgInfo("nms_threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "eta"), eta, ArgInfo("eta", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "top_k"), top_k, ArgInfo("top_k", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::dnn::NMSBoxes(bboxes, scores, score_threshold, nms_threshold, indices, eta, top_k), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, indices);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_Net_readFromModelOptimizer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String xml;
    String bin;
    Net retval;

    // const char* keywords[] = { "xml", "bin", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "xml"), xml, ArgInfo("xml", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bin"), bin, ArgInfo("bin", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::Net::readFromModelOptimizer(xml, bin), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    vector_uchar bufferModelConfig;
    vector_uchar bufferWeights;
    Net retval;

    // const char* keywords[] = { "bufferModelConfig", "bufferWeights", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "bufferModelConfig"), bufferModelConfig, ArgInfo("bufferModelConfig", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bufferWeights"), bufferWeights, ArgInfo("bufferWeights", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::Net::readFromModelOptimizer(bufferModelConfig, bufferWeights), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_blobFromImage(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat image;
    double scalefactor=1.0;
    Size size;
    Scalar mean;
    bool swapRB=false;
    bool crop=false;
    int ddepth=CV_32F;
    Mat retval;

    // const char* keywords[] = { "image", "scalefactor", "size", "mean", "swapRB", "crop", "ddepth", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scalefactor"), scalefactor, ArgInfo("scalefactor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "swapRB"), swapRB, ArgInfo("swapRB", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "crop"), crop, ArgInfo("crop", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::blobFromImage(image, scalefactor, size, mean, swapRB, crop, ddepth), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat image;
    double scalefactor=1.0;
    Size size;
    Scalar mean;
    bool swapRB=false;
    bool crop=false;
    int ddepth=CV_32F;
    Mat retval;

    // const char* keywords[] = { "image", "scalefactor", "size", "mean", "swapRB", "crop", "ddepth", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "image"), image, ArgInfo("image", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scalefactor"), scalefactor, ArgInfo("scalefactor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "swapRB"), swapRB, ArgInfo("swapRB", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "crop"), crop, ArgInfo("crop", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::blobFromImage(image, scalefactor, size, mean, swapRB, crop, ddepth), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_blobFromImages(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat images;
    double scalefactor=1.0;
    Size size;
    Scalar mean;
    bool swapRB=false;
    bool crop=false;
    int ddepth=CV_32F;
    Mat retval;

    // const char* keywords[] = { "images", "scalefactor", "size", "mean", "swapRB", "crop", "ddepth", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "images"), images, ArgInfo("images", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scalefactor"), scalefactor, ArgInfo("scalefactor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "swapRB"), swapRB, ArgInfo("swapRB", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "crop"), crop, ArgInfo("crop", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::blobFromImages(images, scalefactor, size, mean, swapRB, crop, ddepth), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    vector_UMat images;
    double scalefactor=1.0;
    Size size;
    Scalar mean;
    bool swapRB=false;
    bool crop=false;
    int ddepth=CV_32F;
    Mat retval;

    // const char* keywords[] = { "images", "scalefactor", "size", "mean", "swapRB", "crop", "ddepth", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "images"), images, ArgInfo("images", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scalefactor"), scalefactor, ArgInfo("scalefactor", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "mean"), mean, ArgInfo("mean", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "swapRB"), swapRB, ArgInfo("swapRB", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "crop"), crop, ArgInfo("crop", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "ddepth"), ddepth, ArgInfo("ddepth", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::blobFromImages(images, scalefactor, size, mean, swapRB, crop, ddepth), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_getAvailableTargets(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::underlying_type_t<dnn_Backend> be=static_cast<std::underlying_type_t<dnn_Backend>>(static_cast<dnn_Backend>(0));
    std::vector<Target> retval;

    // const char* keywords[] = { "be", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "be"), be, ArgInfo("be", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::getAvailableTargets(static_cast<dnn_Backend>(be)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_imagesFromBlob(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat blob_;
    vector_Mat images_;

    // const char* keywords[] = { "blob_", "images_", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "blob_"), blob_, ArgInfo("blob_", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "images_"), images_, ArgInfo("images_", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::dnn::imagesFromBlob(blob_, images_), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, images_);
        }
    }

    }
    

    {
    Mat blob_;
    vector_UMat images_;

    // const char* keywords[] = { "blob_", "images_", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "blob_"), blob_, ArgInfo("blob_", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "images_"), images_, ArgInfo("images_", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::dnn::imagesFromBlob(blob_, images_), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, images_);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_readNet(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String model;
    String config="";
    String framework="";
    Net retval;

    // const char* keywords[] = { "model", "config", "framework", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "model"), model, ArgInfo("model", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "config"), config, ArgInfo("config", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "framework"), framework, ArgInfo("framework", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readNet(model, config, framework), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    String framework;
    vector_uchar bufferModel;
    vector_uchar bufferConfig=std::vector<uchar>();
    Net retval;

    // const char* keywords[] = { "framework", "bufferModel", "bufferConfig", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "framework"), framework, ArgInfo("framework", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bufferModel"), bufferModel, ArgInfo("bufferModel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bufferConfig"), bufferConfig, ArgInfo("bufferConfig", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readNet(framework, bufferModel, bufferConfig), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_readNetFromCaffe(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String prototxt;
    String caffeModel;
    Net retval;

    // const char* keywords[] = { "prototxt", "caffeModel", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "prototxt"), prototxt, ArgInfo("prototxt", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "caffeModel"), caffeModel, ArgInfo("caffeModel", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readNetFromCaffe(prototxt, caffeModel), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    vector_uchar bufferProto;
    vector_uchar bufferModel=std::vector<uchar>();
    Net retval;

    // const char* keywords[] = { "bufferProto", "bufferModel", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "bufferProto"), bufferProto, ArgInfo("bufferProto", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bufferModel"), bufferModel, ArgInfo("bufferModel", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readNetFromCaffe(bufferProto, bufferModel), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_readNetFromDarknet(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String cfgFile;
    String darknetModel;
    Net retval;

    // const char* keywords[] = { "cfgFile", "darknetModel", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "cfgFile"), cfgFile, ArgInfo("cfgFile", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "darknetModel"), darknetModel, ArgInfo("darknetModel", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readNetFromDarknet(cfgFile, darknetModel), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    vector_uchar bufferCfg;
    vector_uchar bufferModel=std::vector<uchar>();
    Net retval;

    // const char* keywords[] = { "bufferCfg", "bufferModel", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "bufferCfg"), bufferCfg, ArgInfo("bufferCfg", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bufferModel"), bufferModel, ArgInfo("bufferModel", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readNetFromDarknet(bufferCfg, bufferModel), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_readNetFromModelOptimizer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String xml;
    String bin;
    Net retval;

    // const char* keywords[] = { "xml", "bin", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "xml"), xml, ArgInfo("xml", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bin"), bin, ArgInfo("bin", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readNetFromModelOptimizer(xml, bin), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    vector_uchar bufferModelConfig;
    vector_uchar bufferWeights;
    Net retval;

    // const char* keywords[] = { "bufferModelConfig", "bufferWeights", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "bufferModelConfig"), bufferModelConfig, ArgInfo("bufferModelConfig", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bufferWeights"), bufferWeights, ArgInfo("bufferWeights", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readNetFromModelOptimizer(bufferModelConfig, bufferWeights), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_readNetFromONNX(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String onnxFile;
    Net retval;

    // const char* keywords[] = { "onnxFile", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "onnxFile"), onnxFile, ArgInfo("onnxFile", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readNetFromONNX(onnxFile), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    vector_uchar buffer;
    Net retval;

    // const char* keywords[] = { "buffer", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "buffer"), buffer, ArgInfo("buffer", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readNetFromONNX(buffer), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_readNetFromTensorflow(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    String model;
    String config;
    Net retval;

    // const char* keywords[] = { "model", "config", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "model"), model, ArgInfo("model", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "config"), config, ArgInfo("config", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readNetFromTensorflow(model, config), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    vector_uchar bufferModel;
    vector_uchar bufferConfig=std::vector<uchar>();
    Net retval;

    // const char* keywords[] = { "bufferModel", "bufferConfig", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "bufferModel"), bufferModel, ArgInfo("bufferModel", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "bufferConfig"), bufferConfig, ArgInfo("bufferConfig", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readNetFromTensorflow(bufferModel, bufferConfig), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_readNetFromTorch(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String model;
    bool isBinary=true;
    bool evaluate=true;
    Net retval;

    // const char* keywords[] = { "model", "isBinary", "evaluate", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "model"), model, ArgInfo("model", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "isBinary"), isBinary, ArgInfo("isBinary", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "evaluate"), evaluate, ArgInfo("evaluate", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readNetFromTorch(model, isBinary, evaluate), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_readTensorFromONNX(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String path;
    Mat retval;

    // const char* keywords[] = { "path", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "path"), path, ArgInfo("path", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readTensorFromONNX(path), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_readTorchBlob(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filename;
    bool isBinary=true;
    Mat retval;

    // const char* keywords[] = { "filename", "isBinary", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filename"), filename, ArgInfo("filename", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "isBinary"), isBinary, ArgInfo("isBinary", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::dnn::readTorchBlob(filename, isBinary), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_shrinkCaffeModel(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String src;
    String dst;
    vector_String layersTypes=std::vector<String>();

    // const char* keywords[] = { "src", "dst", "layersTypes", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "src"), src, ArgInfo("src", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dst"), dst, ArgInfo("dst", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "layersTypes"), layersTypes, ArgInfo("layersTypes", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::dnn::shrinkCaffeModel(src, dst, layersTypes), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_softNMSBoxes(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_Rect bboxes;
    vector_float scores;
    vector_float updated_scores;
    float score_threshold=0.f;
    float nms_threshold=0.f;
    vector_int indices;
    size_t top_k=0;
    float sigma=0.5;
    std::underlying_type_t<SoftNMSMethod> method=static_cast<std::underlying_type_t<SoftNMSMethod>>(SoftNMSMethod::SOFTNMS_GAUSSIAN);

    // const char* keywords[] = { "bboxes", "scores", "score_threshold", "nms_threshold", "top_k", "sigma", "method", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "bboxes"), bboxes, ArgInfo("bboxes", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "scores"), scores, ArgInfo("scores", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "score_threshold"), score_threshold, ArgInfo("score_threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nms_threshold"), nms_threshold, ArgInfo("nms_threshold", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "top_k"), top_k, ArgInfo("top_k", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sigma"), sigma, ArgInfo("sigma", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "method"), method, ArgInfo("method", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::dnn::softNMSBoxes(bboxes, scores, updated_scores, score_threshold, nms_threshold, indices, top_k, sigma, static_cast<SoftNMSMethod>(method)), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, updated_scores), evision_from(env, indices));
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_dnn_writeTextGraph(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::dnn;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String model;
    String output;

    // const char* keywords[] = { "model", "output", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "model"), model, ArgInfo("model", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "output"), output, ArgInfo("output", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::dnn::writeTextGraph(model, output), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fisheye_calibrate(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::fisheye;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat objectPoints;
    vector_Mat imagePoints;
    Size image_size;
    Mat K;
    Mat D;
    vector_Mat rvecs;
    vector_Mat tvecs;
    int flags=0;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "image_size", "K", "D", "rvecs", "tvecs", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "image_size"), image_size, ArgInfo("image_size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::fisheye::calibrate(objectPoints, imagePoints, image_size, K, D, rvecs, tvecs, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple5(env, evision_from(env, retval), evision_from(env, K), evision_from(env, D), evision_from(env, rvecs), evision_from(env, tvecs));
        }
    }

    }
    

    {
    vector_UMat objectPoints;
    vector_UMat imagePoints;
    Size image_size;
    UMat K;
    UMat D;
    vector_UMat rvecs;
    vector_UMat tvecs;
    int flags=0;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints", "image_size", "K", "D", "rvecs", "tvecs", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "image_size"), image_size, ArgInfo("image_size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvecs"), rvecs, ArgInfo("rvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvecs"), tvecs, ArgInfo("tvecs", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::fisheye::calibrate(objectPoints, imagePoints, image_size, K, D, rvecs, tvecs, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple5(env, evision_from(env, retval), evision_from(env, K), evision_from(env, D), evision_from(env, rvecs), evision_from(env, tvecs));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fisheye_distortPoints(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::fisheye;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat undistorted;
    Mat distorted;
    Mat K;
    Mat D;
    double alpha=0;

    // const char* keywords[] = { "undistorted", "K", "D", "distorted", "alpha", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "undistorted"), undistorted, ArgInfo("undistorted", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distorted"), distorted, ArgInfo("distorted", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::distortPoints(undistorted, distorted, K, D, alpha), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, distorted);
        }
    }

    }
    

    {
    UMat undistorted;
    UMat distorted;
    UMat K;
    UMat D;
    double alpha=0;

    // const char* keywords[] = { "undistorted", "K", "D", "distorted", "alpha", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "undistorted"), undistorted, ArgInfo("undistorted", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "distorted"), distorted, ArgInfo("distorted", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::distortPoints(undistorted, distorted, K, D, alpha), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, distorted);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fisheye_estimateNewCameraMatrixForUndistortRectify(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::fisheye;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat K;
    Mat D;
    Size image_size;
    Mat R;
    Mat P;
    double balance=0.0;
    Size new_size;
    double fov_scale=1.0;

    // const char* keywords[] = { "K", "D", "image_size", "R", "P", "balance", "new_size", "fov_scale", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "image_size"), image_size, ArgInfo("image_size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p"), P, ArgInfo("P", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "balance"), balance, ArgInfo("balance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "new_size"), new_size, ArgInfo("new_size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fov_scale"), fov_scale, ArgInfo("fov_scale", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::estimateNewCameraMatrixForUndistortRectify(K, D, image_size, R, P, balance, new_size, fov_scale), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, P);
        }
    }

    }
    

    {
    UMat K;
    UMat D;
    Size image_size;
    UMat R;
    UMat P;
    double balance=0.0;
    Size new_size;
    double fov_scale=1.0;

    // const char* keywords[] = { "K", "D", "image_size", "R", "P", "balance", "new_size", "fov_scale", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "image_size"), image_size, ArgInfo("image_size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p"), P, ArgInfo("P", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "balance"), balance, ArgInfo("balance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "new_size"), new_size, ArgInfo("new_size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fov_scale"), fov_scale, ArgInfo("fov_scale", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::estimateNewCameraMatrixForUndistortRectify(K, D, image_size, R, P, balance, new_size, fov_scale), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, P);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fisheye_initUndistortRectifyMap(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::fisheye;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat K;
    Mat D;
    Mat R;
    Mat P;
    Size size;
    int m1type=0;
    Mat map1;
    Mat map2;

    // const char* keywords[] = { "K", "D", "R", "P", "size", "m1type", "map1", "map2", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p"), P, ArgInfo("P", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m1type"), m1type, ArgInfo("m1type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map1"), map1, ArgInfo("map1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map2"), map2, ArgInfo("map2", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::initUndistortRectifyMap(K, D, R, P, size, m1type, map1, map2), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, map1), evision_from(env, map2));
        }
    }

    }
    

    {
    UMat K;
    UMat D;
    UMat R;
    UMat P;
    Size size;
    int m1type=0;
    UMat map1;
    UMat map2;

    // const char* keywords[] = { "K", "D", "R", "P", "size", "m1type", "map1", "map2", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p"), P, ArgInfo("P", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "size"), size, ArgInfo("size", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "m1type"), m1type, ArgInfo("m1type", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map1"), map1, ArgInfo("map1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "map2"), map2, ArgInfo("map2", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::initUndistortRectifyMap(K, D, R, P, size, m1type, map1, map2), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, map1), evision_from(env, map2));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fisheye_projectPoints(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::fisheye;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat objectPoints;
    Mat imagePoints;
    Mat rvec;
    Mat tvec;
    Mat K;
    Mat D;
    double alpha=0;
    Mat jacobian;

    // const char* keywords[] = { "objectPoints", "rvec", "tvec", "K", "D", "imagePoints", "alpha", "jacobian", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "jacobian"), jacobian, ArgInfo("jacobian", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::projectPoints(objectPoints, imagePoints, rvec, tvec, K, D, alpha, jacobian), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, imagePoints), evision_from(env, jacobian));
        }
    }

    }
    

    {
    UMat objectPoints;
    UMat imagePoints;
    UMat rvec;
    UMat tvec;
    UMat K;
    UMat D;
    double alpha=0;
    UMat jacobian;

    // const char* keywords[] = { "objectPoints", "rvec", "tvec", "K", "D", "imagePoints", "alpha", "jacobian", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints"), imagePoints, ArgInfo("imagePoints", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rvec"), rvec, ArgInfo("rvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "alpha"), alpha, ArgInfo("alpha", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "jacobian"), jacobian, ArgInfo("jacobian", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::projectPoints(objectPoints, imagePoints, rvec, tvec, K, D, alpha, jacobian), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, imagePoints), evision_from(env, jacobian));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fisheye_stereoCalibrate(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::fisheye;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat objectPoints;
    vector_Mat imagePoints1;
    vector_Mat imagePoints2;
    Mat K1;
    Mat D1;
    Mat K2;
    Mat D2;
    Size imageSize;
    Mat R;
    Mat T;
    int flags=fisheye::CALIB_FIX_INTRINSIC;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "K1", "D1", "K2", "D2", "imageSize", "R", "T", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints1"), imagePoints1, ArgInfo("imagePoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints2"), imagePoints2, ArgInfo("imagePoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k1"), K1, ArgInfo("K1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d1"), D1, ArgInfo("D1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k2"), K2, ArgInfo("K2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d2"), D2, ArgInfo("D2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), T, ArgInfo("T", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::fisheye::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, K1, D1, K2, D2, imageSize, R, T, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple7(env, evision_from(env, retval), evision_from(env, K1), evision_from(env, D1), evision_from(env, K2), evision_from(env, D2), evision_from(env, R), evision_from(env, T));
        }
    }

    }
    

    {
    vector_UMat objectPoints;
    vector_UMat imagePoints1;
    vector_UMat imagePoints2;
    UMat K1;
    UMat D1;
    UMat K2;
    UMat D2;
    Size imageSize;
    UMat R;
    UMat T;
    int flags=fisheye::CALIB_FIX_INTRINSIC;
    TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON);
    double retval;

    // const char* keywords[] = { "objectPoints", "imagePoints1", "imagePoints2", "K1", "D1", "K2", "D2", "imageSize", "R", "T", "flags", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "objectPoints"), objectPoints, ArgInfo("objectPoints", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints1"), imagePoints1, ArgInfo("imagePoints1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imagePoints2"), imagePoints2, ArgInfo("imagePoints2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k1"), K1, ArgInfo("K1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d1"), D1, ArgInfo("D1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k2"), K2, ArgInfo("K2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d2"), D2, ArgInfo("D2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "t"), T, ArgInfo("T", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::fisheye::stereoCalibrate(objectPoints, imagePoints1, imagePoints2, K1, D1, K2, D2, imageSize, R, T, flags, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple7(env, evision_from(env, retval), evision_from(env, K1), evision_from(env, D1), evision_from(env, K2), evision_from(env, D2), evision_from(env, R), evision_from(env, T));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fisheye_stereoRectify(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::fisheye;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat K1;
    Mat D1;
    Mat K2;
    Mat D2;
    Size imageSize;
    Mat R;
    Mat tvec;
    Mat R1;
    Mat R2;
    Mat P1;
    Mat P2;
    Mat Q;
    int flags=0;
    Size newImageSize;
    double balance=0.0;
    double fov_scale=1.0;

    // const char* keywords[] = { "K1", "D1", "K2", "D2", "imageSize", "R", "tvec", "flags", "R1", "R2", "P1", "P2", "Q", "newImageSize", "balance", "fov_scale", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "k1"), K1, ArgInfo("K1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d1"), D1, ArgInfo("D1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k2"), K2, ArgInfo("K2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d2"), D2, ArgInfo("D2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r1"), R1, ArgInfo("R1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r2"), R2, ArgInfo("R2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p1"), P1, ArgInfo("P1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p2"), P2, ArgInfo("P2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "q"), Q, ArgInfo("Q", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newImageSize"), newImageSize, ArgInfo("newImageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "balance"), balance, ArgInfo("balance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fov_scale"), fov_scale, ArgInfo("fov_scale", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::stereoRectify(K1, D1, K2, D2, imageSize, R, tvec, R1, R2, P1, P2, Q, flags, newImageSize, balance, fov_scale), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple5(env, evision_from(env, R1), evision_from(env, R2), evision_from(env, P1), evision_from(env, P2), evision_from(env, Q));
        }
    }

    }
    

    {
    UMat K1;
    UMat D1;
    UMat K2;
    UMat D2;
    Size imageSize;
    UMat R;
    UMat tvec;
    UMat R1;
    UMat R2;
    UMat P1;
    UMat P2;
    UMat Q;
    int flags=0;
    Size newImageSize;
    double balance=0.0;
    double fov_scale=1.0;

    // const char* keywords[] = { "K1", "D1", "K2", "D2", "imageSize", "R", "tvec", "flags", "R1", "R2", "P1", "P2", "Q", "newImageSize", "balance", "fov_scale", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "k1"), K1, ArgInfo("K1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d1"), D1, ArgInfo("D1", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k2"), K2, ArgInfo("K2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d2"), D2, ArgInfo("D2", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "imageSize"), imageSize, ArgInfo("imageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "tvec"), tvec, ArgInfo("tvec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r1"), R1, ArgInfo("R1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r2"), R2, ArgInfo("R2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p1"), P1, ArgInfo("P1", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p2"), P2, ArgInfo("P2", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "q"), Q, ArgInfo("Q", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "flags"), flags, ArgInfo("flags", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "newImageSize"), newImageSize, ArgInfo("newImageSize", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "balance"), balance, ArgInfo("balance", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "fov_scale"), fov_scale, ArgInfo("fov_scale", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::stereoRectify(K1, D1, K2, D2, imageSize, R, tvec, R1, R2, P1, P2, Q, flags, newImageSize, balance, fov_scale), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple5(env, evision_from(env, R1), evision_from(env, R2), evision_from(env, P1), evision_from(env, P2), evision_from(env, Q));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fisheye_undistortImage(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::fisheye;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat distorted;
    Mat undistorted;
    Mat K;
    Mat D;
    Mat Knew=cv::Mat();
    Size new_size;

    // const char* keywords[] = { "distorted", "K", "D", "undistorted", "Knew", "new_size", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "distorted"), distorted, ArgInfo("distorted", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "undistorted"), undistorted, ArgInfo("undistorted", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "knew"), Knew, ArgInfo("Knew", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "new_size"), new_size, ArgInfo("new_size", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::undistortImage(distorted, undistorted, K, D, Knew, new_size), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, undistorted);
        }
    }

    }
    

    {
    UMat distorted;
    UMat undistorted;
    UMat K;
    UMat D;
    UMat Knew=cv::UMat();
    Size new_size;

    // const char* keywords[] = { "distorted", "K", "D", "undistorted", "Knew", "new_size", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "distorted"), distorted, ArgInfo("distorted", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "undistorted"), undistorted, ArgInfo("undistorted", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "knew"), Knew, ArgInfo("Knew", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "new_size"), new_size, ArgInfo("new_size", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::undistortImage(distorted, undistorted, K, D, Knew, new_size), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, undistorted);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_fisheye_undistortPoints(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::fisheye;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat distorted;
    Mat undistorted;
    Mat K;
    Mat D;
    Mat R;
    Mat P;
    TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 10, 1e-8);

    // const char* keywords[] = { "distorted", "K", "D", "undistorted", "R", "P", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "distorted"), distorted, ArgInfo("distorted", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "undistorted"), undistorted, ArgInfo("undistorted", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p"), P, ArgInfo("P", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::undistortPoints(distorted, undistorted, K, D, R, P, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, undistorted);
        }
    }

    }
    

    {
    UMat distorted;
    UMat undistorted;
    UMat K;
    UMat D;
    UMat R;
    UMat P;
    TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 10, 1e-8);

    // const char* keywords[] = { "distorted", "K", "D", "undistorted", "R", "P", "criteria", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "distorted"), distorted, ArgInfo("distorted", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "undistorted"), undistorted, ArgInfo("undistorted", 1)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "k"), K, ArgInfo("K", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "d"), D, ArgInfo("D", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "r"), R, ArgInfo("R", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "p"), P, ArgInfo("P", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "criteria"), criteria, ArgInfo("criteria", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::fisheye::undistortPoints(distorted, undistorted, K, D, R, P, criteria), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, undistorted);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ipp_getIppVersion(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ipp;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ipp::getIppVersion(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ipp_setUseIPP(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ipp;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool flag=0;

    // const char* keywords[] = { "flag", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "flag"), flag, ArgInfo("flag", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::ipp::setUseIPP(flag), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ipp_setUseIPP_NotExact(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ipp;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool flag=0;

    // const char* keywords[] = { "flag", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "flag"), flag, ArgInfo("flag", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::ipp::setUseIPP_NotExact(flag), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ipp_useIPP(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ipp;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ipp::useIPP(), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ipp_useIPP_NotExact(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ipp;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ipp::useIPP_NotExact(), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_ANN_MLP_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<ANN_MLP> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::ANN_MLP::create(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_ANN_MLP_load(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filepath;
    Ptr<ANN_MLP> retval;

    // const char* keywords[] = { "filepath", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filepath"), filepath, ArgInfo("filepath", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::ANN_MLP::load(filepath), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_Boost_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<Boost> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::Boost::create(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_Boost_load(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filepath;
    String nodeName = String();
    Ptr<Boost> retval;

    // const char* keywords[] = { "filepath", "nodeName", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filepath"), filepath, ArgInfo("filepath", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nodeName"), nodeName, ArgInfo("nodeName", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::Boost::load(filepath, nodeName), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_DTrees_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<DTrees> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::DTrees::create(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_DTrees_load(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filepath;
    String nodeName = String();
    Ptr<DTrees> retval;

    // const char* keywords[] = { "filepath", "nodeName", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filepath"), filepath, ArgInfo("filepath", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nodeName"), nodeName, ArgInfo("nodeName", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::DTrees::load(filepath, nodeName), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_EM_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<EM> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::EM::create(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_EM_load(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filepath;
    String nodeName = String();
    Ptr<EM> retval;

    // const char* keywords[] = { "filepath", "nodeName", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filepath"), filepath, ArgInfo("filepath", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nodeName"), nodeName, ArgInfo("nodeName", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::EM::load(filepath, nodeName), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_KNearest_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<KNearest> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::KNearest::create(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_KNearest_load(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filepath;
    Ptr<KNearest> retval;

    // const char* keywords[] = { "filepath", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filepath"), filepath, ArgInfo("filepath", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::KNearest::load(filepath), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_LogisticRegression_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<LogisticRegression> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::LogisticRegression::create(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_LogisticRegression_load(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filepath;
    String nodeName = String();
    Ptr<LogisticRegression> retval;

    // const char* keywords[] = { "filepath", "nodeName", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filepath"), filepath, ArgInfo("filepath", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nodeName"), nodeName, ArgInfo("nodeName", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::LogisticRegression::load(filepath, nodeName), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_NormalBayesClassifier_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<NormalBayesClassifier> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::NormalBayesClassifier::create(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_NormalBayesClassifier_load(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filepath;
    String nodeName = String();
    Ptr<NormalBayesClassifier> retval;

    // const char* keywords[] = { "filepath", "nodeName", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filepath"), filepath, ArgInfo("filepath", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nodeName"), nodeName, ArgInfo("nodeName", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::NormalBayesClassifier::load(filepath, nodeName), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_ParamGrid_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    double minVal=0.;
    double maxVal=0.;
    double logstep=1.;
    Ptr<ParamGrid> retval;

    // const char* keywords[] = { "minVal", "maxVal", "logstep", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "minVal"), minVal, ArgInfo("minVal", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "maxVal"), maxVal, ArgInfo("maxVal", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "logstep"), logstep, ArgInfo("logstep", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::ParamGrid::create(minVal, maxVal, logstep), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_RTrees_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<RTrees> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::RTrees::create(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_RTrees_load(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filepath;
    String nodeName = String();
    Ptr<RTrees> retval;

    // const char* keywords[] = { "filepath", "nodeName", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filepath"), filepath, ArgInfo("filepath", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nodeName"), nodeName, ArgInfo("nodeName", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::RTrees::load(filepath, nodeName), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_SVMSGD_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<SVMSGD> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::SVMSGD::create(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_SVMSGD_load(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filepath;
    String nodeName = String();
    Ptr<SVMSGD> retval;

    // const char* keywords[] = { "filepath", "nodeName", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filepath"), filepath, ArgInfo("filepath", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "nodeName"), nodeName, ArgInfo("nodeName", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::SVMSGD::load(filepath, nodeName), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_SVM_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Ptr<SVM> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::SVM::create(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_SVM_getDefaultGridPtr(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int param_id=0;
    Ptr<ParamGrid> retval;

    // const char* keywords[] = { "param_id", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "param_id"), param_id, ArgInfo("param_id", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::SVM::getDefaultGridPtr(param_id), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_SVM_load(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String filepath;
    Ptr<SVM> retval;

    // const char* keywords[] = { "filepath", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "filepath"), filepath, ArgInfo("filepath", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::SVM::load(filepath), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_TrainData_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat samples;
    int layout=0;
    Mat responses;
    Mat varIdx;
    Mat sampleIdx;
    Mat sampleWeights;
    Mat varType;
    Ptr<TrainData> retval;

    // const char* keywords[] = { "samples", "layout", "responses", "varIdx", "sampleIdx", "sampleWeights", "varType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "samples"), samples, ArgInfo("samples", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "layout"), layout, ArgInfo("layout", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "responses"), responses, ArgInfo("responses", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "varIdx"), varIdx, ArgInfo("varIdx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sampleIdx"), sampleIdx, ArgInfo("sampleIdx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sampleWeights"), sampleWeights, ArgInfo("sampleWeights", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "varType"), varType, ArgInfo("varType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::TrainData::create(samples, layout, responses, varIdx, sampleIdx, sampleWeights, varType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat samples;
    int layout=0;
    UMat responses;
    UMat varIdx;
    UMat sampleIdx;
    UMat sampleWeights;
    UMat varType;
    Ptr<TrainData> retval;

    // const char* keywords[] = { "samples", "layout", "responses", "varIdx", "sampleIdx", "sampleWeights", "varType", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "samples"), samples, ArgInfo("samples", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "layout"), layout, ArgInfo("layout", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "responses"), responses, ArgInfo("responses", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "varIdx"), varIdx, ArgInfo("varIdx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sampleIdx"), sampleIdx, ArgInfo("sampleIdx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "sampleWeights"), sampleWeights, ArgInfo("sampleWeights", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "varType"), varType, ArgInfo("varType", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::TrainData::create(samples, layout, responses, varIdx, sampleIdx, sampleWeights, varType), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_TrainData_getSubMatrix(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Mat matrix;
    Mat idx;
    int layout=0;
    Mat retval;

    // const char* keywords[] = { "matrix", "idx", "layout", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "matrix"), matrix, ArgInfo("matrix", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "idx"), idx, ArgInfo("idx", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "layout"), layout, ArgInfo("layout", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::TrainData::getSubMatrix(matrix, idx, layout), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ml_TrainData_getSubVector(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ml;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Mat vec;
    Mat idx;
    Mat retval;

    // const char* keywords[] = { "vec", "idx", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "vec"), vec, ArgInfo("vec", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "idx"), idx, ArgInfo("idx", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ml::TrainData::getSubVector(vec, idx), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ocl_Device_getDefault(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ocl;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Device retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ocl::Device::getDefault(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ocl_finish(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ocl;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(cv::ocl::finish(), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ocl_haveAmdBlas(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ocl;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ocl::haveAmdBlas(), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ocl_haveAmdFft(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ocl;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ocl::haveAmdFft(), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ocl_haveOpenCL(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ocl;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ocl::haveOpenCL(), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ocl_setUseOpenCL(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ocl;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool flag=0;

    // const char* keywords[] = { "flag", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "flag"), flag, ArgInfo("flag", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::ocl::setUseOpenCL(flag), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_ocl_useOpenCL(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::ocl;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::ocl::useOpenCL(), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_parallel_setParallelForBackend(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::parallel;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::string backendName;
    bool propagateNumThreads=true;
    bool retval;

    // const char* keywords[] = { "backendName", "propagateNumThreads", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "backendName"), backendName, ArgInfo("backendName", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "propagateNumThreads"), propagateNumThreads, ArgInfo("propagateNumThreads", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::parallel::setParallelForBackend(backendName, propagateNumThreads), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_samples_addSamplesDataSearchPath(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::samples;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String path;

    // const char* keywords[] = { "path", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "path"), path, ArgInfo("path", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::samples::addSamplesDataSearchPath(path), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_samples_addSamplesDataSearchSubDirectory(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::samples;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String subdir;

    // const char* keywords[] = { "subdir", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "subdir"), subdir, ArgInfo("subdir", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::samples::addSamplesDataSearchSubDirectory(subdir), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_samples_findFile(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::samples;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String relative_path;
    bool required=true;
    bool silentMode=false;
    cv::String retval;

    // const char* keywords[] = { "relative_path", "required", "silentMode", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "relative_path"), relative_path, ArgInfo("relative_path", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "required"), required, ArgInfo("required", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "silentMode"), silentMode, ArgInfo("silentMode", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::samples::findFile(relative_path, required, silentMode), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_samples_findFileOrKeep(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::samples;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String relative_path;
    bool silentMode=false;
    cv::String retval;

    // const char* keywords[] = { "relative_path", "silentMode", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "relative_path"), relative_path, ArgInfo("relative_path", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "silentMode"), silentMode, ArgInfo("silentMode", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::samples::findFileOrKeep(relative_path, silentMode), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpBool(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool argument=0;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpBool(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpCString(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    char* argument=(char*)"";
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( convert_to_char(env, evision_get_kw(env, erl_terms, "argument"), &argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpCString(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpDouble(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    double argument=0;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpDouble(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpFloat(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    float argument=0.f;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpFloat(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpInputArray(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat argument;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpInputArray(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat argument;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpInputArray(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpInputArrayOfArrays(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat argument;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpInputArrayOfArrays(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    vector_UMat argument;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpInputArrayOfArrays(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpInputOutputArray(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat argument;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpInputOutputArray(argument), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, argument));
        }
    }

    }
    

    {
    UMat argument;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpInputOutputArray(argument), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, argument));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpInputOutputArrayOfArrays(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    vector_Mat argument;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpInputOutputArrayOfArrays(argument), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, argument));
        }
    }

    }
    

    {
    vector_UMat argument;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpInputOutputArrayOfArrays(argument), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple2(env, evision_from(env, retval), evision_from(env, argument));
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpInt(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int argument=0;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpInt(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpRange(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Range argument;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpRange(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpRect(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    Rect argument;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpRect(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpRotatedRect(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    RotatedRect argument;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpRotatedRect(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpSizeT(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    size_t argument=0;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpSizeT(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpString(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    String argument;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpString(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpTermCriteria(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    TermCriteria argument;
    String retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpTermCriteria(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpVectorOfDouble(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_double vec;
    String retval;

    // const char* keywords[] = { "vec", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "vec"), vec, ArgInfo("vec", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpVectorOfDouble(vec), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpVectorOfInt(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_int vec;
    String retval;

    // const char* keywords[] = { "vec", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "vec"), vec, ArgInfo("vec", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpVectorOfInt(vec), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_dumpVectorOfRect(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    vector_Rect vec;
    String retval;

    // const char* keywords[] = { "vec", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "vec"), vec, ArgInfo("vec", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::dumpVectorOfRect(vec), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_generateVectorOfInt(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    size_t len=0;
    vector_int vec;

    // const char* keywords[] = { "len", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "len"), len, ArgInfo("len", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::utils::generateVectorOfInt(len, vec), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, vec);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_generateVectorOfMat(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    size_t len=0;
    int rows=0;
    int cols=0;
    int dtype=0;
    vector_Mat vec;

    // const char* keywords[] = { "len", "rows", "cols", "dtype", "vec", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "len"), len, ArgInfo("len", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "rows"), rows, ArgInfo("rows", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "cols"), cols, ArgInfo("cols", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "dtype"), dtype, ArgInfo("dtype", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "vec"), vec, ArgInfo("vec", 1)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::utils::generateVectorOfMat(len, rows, cols, dtype, vec), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, vec);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_generateVectorOfRect(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    size_t len=0;
    vector_Rect vec;

    // const char* keywords[] = { "len", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "len"), len, ArgInfo("len", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(cv::utils::generateVectorOfRect(len, vec), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, vec);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_testAsyncArray(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    Mat argument;
    AsyncArray retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::testAsyncArray(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    UMat argument;
    AsyncArray retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::testAsyncArray(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_testAsyncException(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    AsyncArray retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::testAsyncException(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_testOverloadResolution(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    {
    int value=0;
    Point point=Point(42, 24);
    String retval;

    // const char* keywords[] = { "value", "point", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "value"), value, ArgInfo("value", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "point"), point, ArgInfo("point", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::testOverloadResolution(value, point), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }
    

    {
    Rect rect;
    String retval;

    // const char* keywords[] = { "rect", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "rect"), rect, ArgInfo("rect", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::testOverloadResolution(rect), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_testOverwriteNativeMethod(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int argument=0;
    int retval;

    // const char* keywords[] = { "argument", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "argument"), argument, ArgInfo("argument", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::testOverwriteNativeMethod(argument), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_testRaiseGeneralException(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(cv::utils::testRaiseGeneralException(), env, error_flag, error_term);
        if (!error_flag) {
            return evision::nif::atom(env, "ok");
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_testReservedKeywordConversion(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    int positional_argument=0;
    int lambda=2;
    int from=3;
    String retval;

    // const char* keywords[] = { "positional_argument", "lambda", "from", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "positional_argument"), positional_argument, ArgInfo("positional_argument", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "lambda"), lambda, ArgInfo("lambda", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "from"), from, ArgInfo("from", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::testReservedKeywordConversion(positional_argument, lambda, from), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_testRotatedRect(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    float x=0.f;
    float y=0.f;
    float w=0.f;
    float h=0.f;
    float angle=0.f;
    RotatedRect retval;

    // const char* keywords[] = { "x", "y", "w", "h", "angle", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "x"), x, ArgInfo("x", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "y"), y, ArgInfo("y", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "w"), w, ArgInfo("w", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angle"), angle, ArgInfo("angle", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::testRotatedRect(x, y, w, h, angle), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_testRotatedRectVector(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    float x=0.f;
    float y=0.f;
    float w=0.f;
    float h=0.f;
    float angle=0.f;
    std::vector<RotatedRect> retval;

    // const char* keywords[] = { "x", "y", "w", "h", "angle", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "x"), x, ArgInfo("x", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "y"), y, ArgInfo("y", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "w"), w, ArgInfo("w", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "h"), h, ArgInfo("h", 0)) && 
        evision_to_safe(env, evision_get_kw(env, erl_terms, "angle"), angle, ArgInfo("angle", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::testRotatedRectVector(x, y, w, h, angle), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_fs_getCacheDirectoryForDownloads(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils::fs;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    cv::String retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::fs::getCacheDirectoryForDownloads(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_nested_ExportClassName_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils::nested;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    OriginalClassName_Params params=OriginalClassName::Params();
    Ptr<OriginalClassName> retval;

    // const char* keywords[] = { "params", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::nested::OriginalClassName::create(params), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_nested_ExportClassName_originalName(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils::nested;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::string retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::nested::OriginalClassName::originalName(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_nested_OriginalClassName_create(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils::nested;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    OriginalClassName_Params params=OriginalClassName::Params();
    Ptr<OriginalClassName> retval;

    // const char* keywords[] = { "params", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "params"), params, ArgInfo("params", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::nested::OriginalClassName::create(params), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_nested_OriginalClassName_originalName(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils::nested;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::string retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::nested::OriginalClassName::originalName(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_utils_nested_testEchoBooleanFunction(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::utils::nested;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    bool flag=0;
    bool retval;

    // const char* keywords[] = { "flag", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "flag"), flag, ArgInfo("flag", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::utils::nested::testEchoBooleanFunction(flag), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_videoio_registry_getBackendName(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::videoio_registry;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::underlying_type_t<VideoCaptureAPIs> api=static_cast<std::underlying_type_t<VideoCaptureAPIs>>(static_cast<VideoCaptureAPIs>(0));
    cv::String retval;

    // const char* keywords[] = { "api", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "api"), api, ArgInfo("api", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::videoio_registry::getBackendName(static_cast<VideoCaptureAPIs>(api)), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_videoio_registry_getBackends(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::videoio_registry;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::vector<VideoCaptureAPIs> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::videoio_registry::getBackends(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_videoio_registry_getCameraBackendPluginVersion(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::videoio_registry;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::underlying_type_t<VideoCaptureAPIs> api=static_cast<std::underlying_type_t<VideoCaptureAPIs>>(static_cast<VideoCaptureAPIs>(0));
    int version_ABI;
    int version_API;
    std::string retval;

    // const char* keywords[] = { "api", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "api"), api, ArgInfo("api", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::videoio_registry::getCameraBackendPluginVersion(static_cast<VideoCaptureAPIs>(api), version_ABI, version_API), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, retval), evision_from(env, version_ABI), evision_from(env, version_API));
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_videoio_registry_getCameraBackends(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::videoio_registry;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::vector<VideoCaptureAPIs> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::videoio_registry::getCameraBackends(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_videoio_registry_getStreamBackendPluginVersion(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::videoio_registry;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::underlying_type_t<VideoCaptureAPIs> api=static_cast<std::underlying_type_t<VideoCaptureAPIs>>(static_cast<VideoCaptureAPIs>(0));
    int version_ABI;
    int version_API;
    std::string retval;

    // const char* keywords[] = { "api", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "api"), api, ArgInfo("api", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::videoio_registry::getStreamBackendPluginVersion(static_cast<VideoCaptureAPIs>(api), version_ABI, version_API), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, retval), evision_from(env, version_ABI), evision_from(env, version_API));
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_videoio_registry_getStreamBackends(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::videoio_registry;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::vector<VideoCaptureAPIs> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::videoio_registry::getStreamBackends(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_videoio_registry_getWriterBackendPluginVersion(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::videoio_registry;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::underlying_type_t<VideoCaptureAPIs> api=static_cast<std::underlying_type_t<VideoCaptureAPIs>>(static_cast<VideoCaptureAPIs>(0));
    int version_ABI;
    int version_API;
    std::string retval;

    // const char* keywords[] = { "api", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "api"), api, ArgInfo("api", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::videoio_registry::getWriterBackendPluginVersion(static_cast<VideoCaptureAPIs>(api), version_ABI, version_API), env, error_flag, error_term);
        if (!error_flag) {
            return enif_make_tuple3(env, evision_from(env, retval), evision_from(env, version_ABI), evision_from(env, version_API));
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_videoio_registry_getWriterBackends(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::videoio_registry;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::vector<VideoCaptureAPIs> retval;

    if((argc - nif_opts_index == 1) && erl_terms.size() == 0)
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::videoio_registry::getWriterBackends(), env, error_flag, error_term);
        if (!error_flag) {
            return evision_from(env, retval);
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_videoio_registry_hasBackend(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::videoio_registry;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::underlying_type_t<VideoCaptureAPIs> api=static_cast<std::underlying_type_t<VideoCaptureAPIs>>(static_cast<VideoCaptureAPIs>(0));
    bool retval;

    // const char* keywords[] = { "api", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "api"), api, ArgInfo("api", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::videoio_registry::hasBackend(static_cast<VideoCaptureAPIs>(api)), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

static ERL_NIF_TERM evision_cv_videoio_registry_isBackendBuiltIn(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[])
{
    using namespace cv::videoio_registry;
    ERL_NIF_TERM error_term = 0;
    std::map<std::string, ERL_NIF_TERM> erl_terms;
    int nif_opts_index = 0; // <- autogenerated value 
    if (nif_opts_index < argc) {
        evision::nif::parse_arg(env, nif_opts_index, argv, erl_terms);
    }
    std::underlying_type_t<VideoCaptureAPIs> api=static_cast<std::underlying_type_t<VideoCaptureAPIs>>(static_cast<VideoCaptureAPIs>(0));
    bool retval;

    // const char* keywords[] = { "api", NULL }; // <- no more in use, left for debugging purpose
    if( evision_to_safe(env, evision_get_kw(env, erl_terms, "api"), api, ArgInfo("api", 0)) )
    {
        int error_flag = false;
        ERRWRAP2(retval = cv::videoio_registry::isBackendBuiltIn(static_cast<VideoCaptureAPIs>(api)), env, error_flag, error_term);
        if (!error_flag) {
            if (retval) {
                return evision::nif::atom(env, "true");
            } else {
                return evision::nif::atom(env, "false");
            };
        }
    }

    if (error_term != 0) return error_term;
    else return enif_make_badarg(env);
}

